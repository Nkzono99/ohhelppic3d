var tipuesearch = {"pages":[{"title":" ohhelp-pic-3d ","text":"ohhelp-pic-3d Developer Info Nkzono99","tags":"home","loc":"index.html"},{"title":"t_OhHelp – ohhelp-pic-3d ","text":"type, public :: t_OhHelp Inherits type~~t_ohhelp~~InheritsGraph type~t_ohhelp t_OhHelp oh_mycomm oh_mycomm type~t_ohhelp->oh_mycomm communicator type~t_boundarycommunicationinfos t_BoundaryCommunicationInfos type~t_ohhelp->type~t_boundarycommunicationinfos boundary_communication_infos type~t_fieldextensioninfo t_FieldExtensionInfo type~t_ohhelp->type~t_fieldextensioninfo field_extension_infos type~t_boundarycommunicationinfo t_BoundaryCommunicationInfo type~t_boundarycommunicationinfos->type~t_boundarycommunicationinfo infos Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables neighber_subdomain_ids nspecies particle_count_histgram subdomain_id subdomain_range Type-Bound Procedures allocate_ohfield broadcast_field correct_load_balancing correct_particle exchange_borders initialize inject_particle is_primary_mode is_secondary_mode map_subdomain_id notify_subdomain_range reduce_field requires_broadcast_field transbound Components Type Visibility Attributes Name Initial integer, public :: neighber_subdomain_ids (3,3,3) integer, public :: nspecies integer, public, allocatable :: particle_count_histgram (:,:,:) integer, public :: subdomain_id (2) integer, public, allocatable :: subdomain_range (:,:,:) Type-Bound Procedures procedure, public,  :: allocate_ohfield => ohhelp_allocate_ohfield private  subroutine ohhelp_allocate_ohfield(self, ohfield) Arguments Type Intent Optional Attributes Name class( t_OhHelp ), intent(in) :: self class( t_OhField ), intent(inout) :: ohfield procedure, public,  :: broadcast_field => ohhelp_broadcast_field private  subroutine ohhelp_broadcast_field(self, ohfield) Arguments Type Intent Optional Attributes Name class( t_OhHelp ), intent(inout) :: self type( t_OhField ), intent(inout) :: ohfield procedure, public,  :: correct_load_balancing => ohhelp_correct_load_balancing private  subroutine ohhelp_correct_load_balancing(self, ohparticles, eb, ohfields_to_be_notified) Arguments Type Intent Optional Attributes Name class( t_OhHelp ), intent(inout) :: self class( t_OhParticles ), intent(inout) :: ohparticles class( t_OhField ), intent(inout) :: eb type( tp_OhField ), intent(inout) :: ohfields_to_be_notified (:) procedure, public,  :: correct_particle => ohhelp_correct_particle private  subroutine ohhelp_correct_particle(self, particle, ps) Arguments Type Intent Optional Attributes Name class( t_OhHelp ), intent(inout) :: self type(oh_particle), intent(inout) :: particle integer, intent(in) :: ps procedure, public,  :: exchange_borders => ohhelp_exchange_borders private  subroutine ohhelp_exchange_borders(self, ohfield) Arguments Type Intent Optional Attributes Name class( t_OhHelp ), intent(inout) :: self type( t_OhField ), intent(inout) :: ohfield procedure, public,  :: initialize => ohhelp_initialize private  subroutine ohhelp_initialize(self, ohparticles, ohfields) Arguments Type Intent Optional Attributes Name class( t_OhHelp ), intent(inout) :: self type( t_OhParticles ), intent(inout) :: ohparticles type( tp_OhField ), intent(inout) :: ohfields (:) procedure, public,  :: inject_particle => ohhelp_inject_particle private  subroutine ohhelp_inject_particle(self, particle) Arguments Type Intent Optional Attributes Name class( t_OhHelp ), intent(inout) :: self type(oh_particle), intent(in) :: particle procedure, public,  :: is_primary_mode => ohhelp_is_primary_mode private  function ohhelp_is_primary_mode(self) result(ret) Arguments Type Intent Optional Attributes Name class( t_OhHelp ), intent(inout) :: self Return Value logical procedure, public,  :: is_secondary_mode => ohhelp_is_secondary_mode private  function ohhelp_is_secondary_mode(self) result(ret) Arguments Type Intent Optional Attributes Name class( t_OhHelp ), intent(inout) :: self Return Value logical procedure, public,  :: map_subdomain_id => ohhelp_map_subdomain_id private  function ohhelp_map_subdomain_id(self, position) result(ret) Arguments Type Intent Optional Attributes Name class( t_OhHelp ), intent(in) :: self double precision, intent(in) :: position (3) Return Value integer procedure, public,  :: notify_subdomain_range => ohhelp_notify_subdomain_range private  subroutine ohhelp_notify_subdomain_range(self, ohfield) Arguments Type Intent Optional Attributes Name class( t_OhHelp ), intent(inout) :: self type( t_OhField ), intent(inout) :: ohfield procedure, public,  :: reduce_field => ohhelp_reduce_field private  subroutine ohhelp_reduce_field(self, ohfield) Arguments Type Intent Optional Attributes Name class( t_OhHelp ), intent(inout) :: self type( t_OhField ), intent(inout) :: ohfield procedure, public,  :: requires_broadcast_field => ohhelp_requires_broadcast_field private  function ohhelp_requires_broadcast_field(self) result(ret) Arguments Type Intent Optional Attributes Name class( t_OhHelp ), intent(inout) :: self Return Value logical procedure, public,  :: transbound => ohhelp_transbound private  subroutine ohhelp_transbound(self, ohparticles) Arguments Type Intent Optional Attributes Name class( t_OhHelp ), intent(inout) :: self class( t_OhParticles ), intent(inout) :: ohparticles","tags":"","loc":"type/t_ohhelp.html"},{"title":"t_OhFieldFactory – ohhelp-pic-3d ","text":"type, public :: t_OhFieldFactory Contents Variables comm_id_count extension_id_count Type-Bound Procedures create_field Components Type Visibility Attributes Name Initial integer, public :: comm_id_count integer, public :: extension_id_count Type-Bound Procedures procedure, public,  :: create_field => factory_create_field private  function factory_create_field(self, name, nfields) result(field) Arguments Type Intent Optional Attributes Name class( t_OhFieldFactory ), intent(inout) :: self character(len=*), intent(in) :: name integer, intent(in), optional :: nfields Return Value type( t_OhField )","tags":"","loc":"type/t_ohfieldfactory.html"},{"title":"t_BoundaryCommunicationInfo – ohhelp-pic-3d ","text":"type, public :: t_BoundaryCommunicationInfo Inherited by type~~t_boundarycommunicationinfo~~InheritedByGraph type~t_boundarycommunicationinfo t_BoundaryCommunicationInfo type~t_boundarycommunicationinfos t_BoundaryCommunicationInfos type~t_boundarycommunicationinfos->type~t_boundarycommunicationinfo infos type~t_ohfield t_OhField type~t_ohfield->type~t_boundarycommunicationinfos boundary_comm_infos type~t_ohhelp t_OhHelp type~t_ohhelp->type~t_boundarycommunicationinfos boundary_communication_infos type~tp_ohfield tp_OhField type~tp_ohfield->type~t_ohfield ref Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables downward_comm_nsends downward_comm_receive_offset downward_comm_send_offset upward_comm_nsends upward_comm_receive_offset upward_comm_send_offset Components Type Visibility Attributes Name Initial integer, public :: downward_comm_nsends The number of planes to send/receive at downward communication integer, public :: downward_comm_receive_offset Offset to receive at downward communication integer, public :: downward_comm_send_offset Offset to send at downward communication integer, public :: upward_comm_nsends The number of planes to send/receive at upward communication integer, public :: upward_comm_receive_offset Offset to receive at upward communication integer, public :: upward_comm_send_offset Offset to send at upward communication","tags":"","loc":"type/t_boundarycommunicationinfo.html"},{"title":"t_BoundaryCommunicationInfos – ohhelp-pic-3d ","text":"type, public :: t_BoundaryCommunicationInfos Inherits type~~t_boundarycommunicationinfos~~InheritsGraph type~t_boundarycommunicationinfos t_BoundaryCommunicationInfos type~t_boundarycommunicationinfo t_BoundaryCommunicationInfo type~t_boundarycommunicationinfos->type~t_boundarycommunicationinfo infos Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~t_boundarycommunicationinfos~~InheritedByGraph type~t_boundarycommunicationinfos t_BoundaryCommunicationInfos type~t_ohfield t_OhField type~t_ohfield->type~t_boundarycommunicationinfos boundary_comm_infos type~t_ohhelp t_OhHelp type~t_ohhelp->type~t_boundarycommunicationinfos boundary_communication_infos type~tp_ohfield tp_OhField type~tp_ohfield->type~t_ohfield ref Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables id infos Components Type Visibility Attributes Name Initial integer, public :: id boundary communication type identifier type( t_BoundaryCommunicationInfo ), public :: infos (NBOUNDARY_CONDITION_TYPES)","tags":"","loc":"type/t_boundarycommunicationinfos.html"},{"title":"t_FieldExtensionInfo – ohhelp-pic-3d ","text":"type, public :: t_FieldExtensionInfo Inherited by type~~t_fieldextensioninfo~~InheritedByGraph type~t_fieldextensioninfo t_FieldExtensionInfo type~t_ohfield t_OhField type~t_ohfield->type~t_fieldextensioninfo extension_info type~t_ohhelp t_OhHelp type~t_ohhelp->type~t_fieldextensioninfo field_extension_infos type~tp_ohfield tp_OhField type~tp_ohfield->type~t_ohfield ref Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables id nelements nextensions nextensions_for_broadcast nextensions_for_reduction Components Type Visibility Attributes Name Initial integer, public :: id Identifier integer, public :: nelements = 0 The number of elements. integer, public :: nextensions (2) The size of subdomain expansion [lower, upper] integer, public :: nextensions_for_broadcast (2) The size of subdomain expansion when broadcast [lower, upper] integer, public :: nextensions_for_reduction (2) The size of subdomain expansion when reduction [lower, upper]","tags":"","loc":"type/t_fieldextensioninfo.html"},{"title":"t_OhField – ohhelp-pic-3d ","text":"type, public :: t_OhField Inherits type~~t_ohfield~~InheritsGraph type~t_ohfield t_OhField type~t_boundarycommunicationinfos t_BoundaryCommunicationInfos type~t_ohfield->type~t_boundarycommunicationinfos boundary_comm_infos type~t_fieldextensioninfo t_FieldExtensionInfo type~t_ohfield->type~t_fieldextensioninfo extension_info type~t_boundarycommunicationinfo t_BoundaryCommunicationInfo type~t_boundarycommunicationinfos->type~t_boundarycommunicationinfo infos Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~t_ohfield~~InheritedByGraph type~t_ohfield t_OhField type~tp_ohfield tp_OhField type~tp_ohfield->type~t_ohfield ref Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables boundary_comm_infos extension_info field_size nboundary_comm_infos nelements nfields subdomain_range values Type-Bound Procedures allocate local_shape make_copy to_global_index to_local_index to_local_position Components Type Visibility Attributes Name Initial type( t_BoundaryCommunicationInfos ), public, allocatable :: boundary_comm_infos (:) type( t_FieldExtensionInfo ), public :: extension_info integer, public :: field_size (2,3) integer, public :: nboundary_comm_infos integer, public :: nelements integer, public :: nfields integer, public :: subdomain_range (2,3,2) double precision, public, allocatable :: values (:,:,:,:,:) Type-Bound Procedures procedure, public,  :: allocate => ohfield_allocate private  subroutine ohfield_allocate(self, nelements, field_size, nfields) Arguments Type Intent Optional Attributes Name class( t_OhField ), intent(inout) :: self integer, intent(in) :: nelements integer, intent(in) :: field_size (2,3) integer, intent(in) :: nfields procedure, public,  :: local_shape => ohfield_local_shape private  function ohfield_local_shape(self, ps) result(ret) Arguments Type Intent Optional Attributes Name class( t_OhField ), intent(in) :: self integer, intent(in) :: ps Return Value integer, (3) procedure, public,  :: make_copy => ohfield_make_copy private  function ohfield_make_copy(self, nfields) result(copy) Arguments Type Intent Optional Attributes Name class( t_OhField ), intent(in) :: self integer, intent(in) :: nfields Return Value type( t_OhField ) procedure, public,  :: to_global_index => ohfield_to_global_index private  function ohfield_to_global_index(self, local_index, ps) result(global_index) Arguments Type Intent Optional Attributes Name class( t_OhField ), intent(in) :: self integer, intent(in) :: local_index (3) integer, intent(in) :: ps Return Value integer, (3) procedure, public,  :: to_local_index => ohfield_to_local_index private  function ohfield_to_local_index(self, global_index, ps) result(local_index) Arguments Type Intent Optional Attributes Name class( t_OhField ), intent(in) :: self integer, intent(in) :: global_index (3) integer, intent(in) :: ps Return Value integer, (3) procedure, public,  :: to_local_position => ohfield_to_local_position private  function ohfield_to_local_position(self, global_position, ps) result(ret) Arguments Type Intent Optional Attributes Name class( t_OhField ), intent(in) :: self double precision, intent(in) :: global_position (3) integer, intent(in) :: ps Return Value double precision, (3)","tags":"","loc":"type/t_ohfield.html"},{"title":"tp_OhField – ohhelp-pic-3d ","text":"type, public :: tp_OhField Inherits type~~tp_ohfield~~InheritsGraph type~tp_ohfield tp_OhField type~t_ohfield t_OhField type~tp_ohfield->type~t_ohfield ref type~t_boundarycommunicationinfos t_BoundaryCommunicationInfos type~t_ohfield->type~t_boundarycommunicationinfos boundary_comm_infos type~t_fieldextensioninfo t_FieldExtensionInfo type~t_ohfield->type~t_fieldextensioninfo extension_info type~t_boundarycommunicationinfo t_BoundaryCommunicationInfo type~t_boundarycommunicationinfos->type~t_boundarycommunicationinfo infos Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables ref Components Type Visibility Attributes Name Initial class( t_OhField ), public, pointer :: ref","tags":"","loc":"type/tp_ohfield.html"},{"title":"t_OhParticles – ohhelp-pic-3d ","text":"type, public :: t_OhParticles Inherits type~~t_ohparticles~~InheritsGraph type~t_ohparticles t_OhParticles oh_particle oh_particle type~t_ohparticles->oh_particle pbuf Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables max_local_particles nspecies pbase pbuf total_local_particles Type-Bound Procedures allocate_pbuf end_index start_index Components Type Visibility Attributes Name Initial integer, public :: max_local_particles integer, public :: nspecies integer, public, allocatable :: pbase (:) type(oh_particle), public, allocatable :: pbuf (:) integer, public, allocatable :: total_local_particles (:,:) Type-Bound Procedures procedure, public,  :: allocate_pbuf => ohparticles_allocate_pbuf private  subroutine ohparticles_allocate_pbuf(self, loadbalance_tolerance_percentage) Arguments Type Intent Optional Attributes Name class( t_OhParticles ), intent(inout) :: self integer, intent(in) :: loadbalance_tolerance_percentage procedure, public,  :: end_index => ohparticles_end_index private  function ohparticles_end_index(self, ispec, ps) result(ret) Arguments Type Intent Optional Attributes Name class( t_OhParticles ), intent(in) :: self integer, intent(in) :: ispec integer, intent(in) :: ps 1: primary subdomain, 2: secondary subdomain Return Value integer procedure, public,  :: start_index => ohparticles_start_index private  function ohparticles_start_index(self, ispec, ps) result(ret) Arguments Type Intent Optional Attributes Name class( t_OhParticles ), intent(in) :: self integer, intent(in) :: ispec integer, intent(in) :: ps Return Value integer","tags":"","loc":"type/t_ohparticles.html"},{"title":"t_Rescaler – ohhelp-pic-3d ","text":"type, public :: t_Rescaler dx : float\n    Grid length [m]\nto_c : float\n    Light Speed in EMSES\npi : UnitTranslator\n    Circular constant []\ne : UnitTranslator\n    Napiers constant []\nc : UnitTranslator\n    Light Speed [m/s]\ne0 : UnitTranslator\n    FS-Permttivity [F/m]\nm0 : UnitTranslator\n    FS-Permeablity [N/A&#94;2]\nqe : UnitTranslator\n    Elementary charge [C]\nme : UnitTranslator\n    Electron mass [kg]\nmi : UnitTranslator\n    Proton mass [kg]\nqe_me : UnitTranslator\n    Electron charge-to-mass ratio [C/kg]\nkB : UnitTranslator\n    Boltzmann constant [J/K]\nlength : UnitTranslator\n    Sim-to-Real length ratio [m]\nm : UnitTranslator\n    Mass [kg]\nt : UnitTranslator\n    Time [s]\nf : UnitTranslator\n    Frequency [Hz]\nv : UnitTranslator\n    Velocity [m/s]\nn : UnitTranslator\n    Number density [/m&#94;3]\nN : UnitTranslator\n    Flux [/m&#94;2s]\nF : UnitTranslator\n    Force [N]\nP : UnitTranslator\n    Power [W]\nW : UnitTranslator\n    Energy [J]\nw : UnitTranslator]\n    Energy density [J/m&#94;3]\neps : UnitTranslator\n    Permittivity  [F/m]\nq : UnitTranslator\n    Charge [C]\nrho : UnitTranslator\n    Charge density [C/m&#94;3]\nq_m : UnitTranslator\n    Charge-to-mass ratio [C/kg]\ni : UnitTranslator\n    Current [A]\nJ : UnitTranslator\n    Current density [A/m&#94;2]\nphi : UnitTranslator\n    Potential [V]\nE : UnitTranslator\n    Electric field [V/m]\nH : UnitTranslator\n    Magnetic field [A/m]\nC : UnitTranslator\n    Capacitance [F]\nR : UnitTranslator\n    Resistance [Ω]\nG : UnitTranslator\n    Conductance [S]\nmu : UnitTranslator\n    Permiability [H/m]\nB : UnitTranslator\n    Magnetic flux density [T]\nL : UnitTranslator\n    Inductance [H]\nT : UnitTranslator\n    Temperature [K] Inherits type~~t_rescaler~~InheritsGraph type~t_rescaler t_Rescaler t_UnitConverter t_UnitConverter type~t_rescaler->t_UnitConverter dx, to_c, pi, e, c, e0, m0, q_m, kB, length, m, t, f, v, n, flux, force, P, W, epsilon, q, rho, i, J, phi, ef, bf, cap, R, G, mu, B, L, temperature Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables B G J L P R W bf c cap dx e e0 ef epsilon f flux force i kB length m m0 mu n phi pi q q_m rho t temperature to_c v Components Type Visibility Attributes Name Initial type(t_UnitConverter), public :: B type(t_UnitConverter), public :: G type(t_UnitConverter), public :: J type(t_UnitConverter), public :: L type(t_UnitConverter), public :: P type(t_UnitConverter), public :: R type(t_UnitConverter), public :: W type(t_UnitConverter), public :: bf type(t_UnitConverter), public :: c type(t_UnitConverter), public :: cap type(t_UnitConverter), public :: dx type(t_UnitConverter), public :: e type(t_UnitConverter), public :: e0 type(t_UnitConverter), public :: ef type(t_UnitConverter), public :: epsilon type(t_UnitConverter), public :: f type(t_UnitConverter), public :: flux type(t_UnitConverter), public :: force type(t_UnitConverter), public :: i type(t_UnitConverter), public :: kB type(t_UnitConverter), public :: length type(t_UnitConverter), public :: m type(t_UnitConverter), public :: m0 type(t_UnitConverter), public :: mu type(t_UnitConverter), public :: n type(t_UnitConverter), public :: phi type(t_UnitConverter), public :: pi type(t_UnitConverter), public :: q type(t_UnitConverter), public :: q_m type(t_UnitConverter), public :: rho type(t_UnitConverter), public :: t type(t_UnitConverter), public :: temperature type(t_UnitConverter), public :: to_c type(t_UnitConverter), public :: v","tags":"","loc":"type/t_rescaler.html"},{"title":"t_Parameters – ohhelp-pic-3d ","text":"type, public :: t_Parameters Inherits type~~t_parameters~~InheritsGraph type~t_parameters t_Parameters type~t_stringholder t_StringHolder type~t_parameters->type~t_stringholder boundary_communication, boundary_type_for_electromagnetic_field, boundary_type_for_particle, plasma_initialization type~t_tomlwrapper t_TomlWrapper type~t_parameters->type~t_tomlwrapper toml toml_table toml_table type~t_tomlwrapper->toml_table table Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables boundary_communication boundary_type_for_electromagnetic_field boundary_type_for_particle charge_per_macro_particle charge_to_mass_ratio current_output_interval cyclotron_frequency dt field_output_interval flow_angle_deg_xy flow_angle_deg_z flow_velocity imbalance_tolerance_percentage load_continuaus_data load_directory nmacro_particles_per_grid nnodes nspecies nstep nx ny nz output_start_step particle_buffer_size particle_mover_type plasma_frequency plasma_initialization save_continuaus_data save_directory simulation_name simulation_type stdout_interval_step thermal_velocity_para thermal_velocity_perp toml toml_filepath Components Type Visibility Attributes Name Initial type( t_StringHolder ), public, allocatable :: boundary_communication (:) type( t_StringHolder ), public, allocatable :: boundary_type_for_electromagnetic_field (:) type( t_StringHolder ), public, allocatable :: boundary_type_for_particle (:,:) double precision, public, allocatable :: charge_per_macro_particle (:) double precision, public, allocatable :: charge_to_mass_ratio (:) integer, public :: current_output_interval double precision, public :: cyclotron_frequency = 0.0 double precision, public :: dt integer, public :: field_output_interval double precision, public, allocatable :: flow_angle_deg_xy (:) double precision, public, allocatable :: flow_angle_deg_z (:) double precision, public, allocatable :: flow_velocity (:) integer, public :: imbalance_tolerance_percentage = 10 integer, public :: load_continuaus_data character(len=:), public, allocatable :: load_directory integer, public :: nmacro_particles_per_grid (3) integer, public :: nnodes (3) integer, public :: nspecies integer, public :: nstep integer, public :: nx integer, public :: ny integer, public :: nz integer, public :: output_start_step = 0 double precision, public :: particle_buffer_size (3) character(len=:), public, allocatable :: particle_mover_type double precision, public, allocatable :: plasma_frequency (:) type( t_StringHolder ), public, allocatable :: plasma_initialization (:) integer, public :: save_continuaus_data character(len=:), public, allocatable :: save_directory character(len=:), public, allocatable :: simulation_name character(len=:), public, allocatable :: simulation_type integer, public :: stdout_interval_step = 10 double precision, public, allocatable :: thermal_velocity_para (:) double precision, public, allocatable :: thermal_velocity_perp (:) type( t_TomlWrapper ), public :: toml character(len=:), public, allocatable :: toml_filepath","tags":"","loc":"type/t_parameters.html"},{"title":"t_StringHolder – ohhelp-pic-3d ","text":"type, public :: t_StringHolder Inherited by type~~t_stringholder~~InheritedByGraph type~t_stringholder t_StringHolder type~t_parameters t_Parameters type~t_parameters->type~t_stringholder boundary_communication, boundary_type_for_electromagnetic_field, boundary_type_for_particle, plasma_initialization Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables string Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: string","tags":"","loc":"type/t_stringholder.html"},{"title":"t_TomlWrapper – ohhelp-pic-3d ","text":"type, public :: t_TomlWrapper Inherits type~~t_tomlwrapper~~InheritsGraph type~t_tomlwrapper t_TomlWrapper toml_table toml_table type~t_tomlwrapper->toml_table table Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~t_tomlwrapper~~InheritedByGraph type~t_tomlwrapper t_TomlWrapper type~t_parameters t_Parameters type~t_parameters->type~t_tomlwrapper toml Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables table Type-Bound Procedures load require_array require_double require_double_array require_int require_int_array require_real require_real_array require_string1 require_string2 require_string3 require_string4 require_string_array require_string_array2d require_table to_string Components Type Visibility Attributes Name Initial type(toml_table), public, allocatable :: table Type-Bound Procedures procedure, public,  :: load => toml_load private  subroutine toml_load(self, toml_filepath) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: toml_filepath generic, public,  :: require_array => require_array1, require_array2, require_array3, require_array4 private  function toml_require_array1(self, name) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name Return Value type(toml_array), pointer private  function toml_require_array2(self, name1, name2) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 Return Value type(toml_array), pointer private  function toml_require_array3(self, name1, name2, name3) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 Return Value type(toml_array), pointer private  function toml_require_array4(self, name1, name2, name3, name4) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 character(len=*), intent(in) :: name4 Return Value type(toml_array), pointer generic, public,  :: require_double => require_double1, require_double2, require_double3, require_double4 private  function toml_require_double1(self, name, default) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name double precision, intent(in), optional :: default Return Value double precision private  function toml_require_double2(self, name1, name2, default) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 double precision, intent(in), optional :: default Return Value double precision private  function toml_require_double3(self, name1, name2, name3, default) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 double precision, intent(in), optional :: default Return Value double precision private  function toml_require_double4(self, name1, name2, name3, name4, default) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 character(len=*), intent(in) :: name4 double precision, intent(in), optional :: default Return Value double precision generic, public,  :: require_double_array => require_double_array1, require_double_array2, require_double_array3, require_double_array4 private  function toml_require_double_array1(self, name) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name Return Value double precision, allocatable, (:) private  function toml_require_double_array2(self, name1, name2) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 Return Value double precision, allocatable, (:) private  function toml_require_double_array3(self, name1, name2, name3) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 Return Value double precision, allocatable, (:) private  function toml_require_double_array4(self, name1, name2, name3, name4) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 character(len=*), intent(in) :: name4 Return Value double precision, allocatable, (:) generic, public,  :: require_int => require_int1, require_int2, require_int3, require_int4 private  function toml_require_int1(self, name, default) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name integer, intent(in), optional :: default Return Value integer private  function toml_require_int2(self, name1, name2, default) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 integer, intent(in), optional :: default Return Value integer private  function toml_require_int3(self, name1, name2, name3, default) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 integer, intent(in), optional :: default Return Value integer private  function toml_require_int4(self, name1, name2, name3, name4, default) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 character(len=*), intent(in) :: name4 integer, intent(in), optional :: default Return Value integer generic, public,  :: require_int_array => require_int_array1, require_int_array2, require_int_array3, require_int_array4 private  function toml_require_int_array1(self, name) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name Return Value integer, allocatable, (:) private  function toml_require_int_array2(self, name1, name2) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 Return Value integer, allocatable, (:) private  function toml_require_int_array3(self, name1, name2, name3) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 Return Value integer, allocatable, (:) private  function toml_require_int_array4(self, name1, name2, name3, name4) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 character(len=*), intent(in) :: name4 Return Value integer, allocatable, (:) generic, public,  :: require_real => require_real1, require_real2, require_real3, require_real4 private  function toml_require_real1(self, name, default) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name real, intent(in), optional :: default Return Value real private  function toml_require_real2(self, name1, name2, default) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 real, intent(in), optional :: default Return Value real private  function toml_require_real3(self, name1, name2, name3, default) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 real, intent(in), optional :: default Return Value real private  function toml_require_real4(self, name1, name2, name3, name4, default) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 character(len=*), intent(in) :: name4 real, intent(in), optional :: default Return Value real generic, public,  :: require_real_array => require_real_array1, require_real_array2, require_real_array3, require_real_array4 private  function toml_require_real_array1(self, name) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name Return Value real, allocatable, (:) private  function toml_require_real_array2(self, name1, name2) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 Return Value real, allocatable, (:) private  function toml_require_real_array3(self, name1, name2, name3) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 Return Value real, allocatable, (:) private  function toml_require_real_array4(self, name1, name2, name3, name4) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 character(len=*), intent(in) :: name4 Return Value real, allocatable, (:) procedure, public,  :: require_string1 => toml_require_string1 private  function toml_require_string1(self, name, default) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name character(len=*), intent(in), optional :: default Return Value character(len=:), allocatable procedure, public,  :: require_string2 => toml_require_string2 private  function toml_require_string2(self, name1, name2, default) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in), optional :: default Return Value character(len=:), allocatable procedure, public,  :: require_string3 => toml_require_string3 private  function toml_require_string3(self, name1, name2, name3, default) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 character(len=*), intent(in), optional :: default Return Value character(len=:), allocatable procedure, public,  :: require_string4 => toml_require_string4 private  function toml_require_string4(self, name1, name2, name3, name4, default) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 character(len=*), intent(in) :: name4 character(len=:), intent(in), optional, allocatable :: default Return Value character(len=:), allocatable generic, public,  :: require_string_array => require_string_array1, require_string_array2, require_string_array3, require_string_array4 private  function toml_require_string_array1(self, name) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name Return Value type( t_StringHolder ), allocatable, (:) private  function toml_require_string_array2(self, name1, name2) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 Return Value type( t_StringHolder ), allocatable, (:) private  function toml_require_string_array3(self, name1, name2, name3) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 Return Value type( t_StringHolder ), allocatable, (:) private  function toml_require_string_array4(self, name1, name2, name3, name4) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 character(len=*), intent(in) :: name4 Return Value type( t_StringHolder ), allocatable, (:) generic, public,  :: require_string_array2d => require_string_array2d1, require_string_array2d2, require_string_array2d3, require_string_array2d4 private  function toml_require_string_array2d1(self, name) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name Return Value type( t_StringHolder ), allocatable, (:,:) private  function toml_require_string_array2d2(self, name1, name2) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 Return Value type( t_StringHolder ), allocatable, (:,:) private  function toml_require_string_array2d3(self, name1, name2, name3) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 Return Value type( t_StringHolder ), allocatable, (:,:) private  function toml_require_string_array2d4(self, name1, name2, name3, name4) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 character(len=*), intent(in) :: name4 Return Value type( t_StringHolder ), allocatable, (:,:) generic, public,  :: require_table => require_table1, require_table2, require_table3 private  function toml_require_table1(self, name) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name Return Value type(toml_table), pointer private  function toml_require_table2(self, name1, name2) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 Return Value type(toml_table), pointer private  function toml_require_table3(self, name1, name2, name3) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self character(len=*), intent(in) :: name1 character(len=*), intent(in) :: name2 character(len=*), intent(in) :: name3 Return Value type(toml_table), pointer procedure, public,  :: to_string => toml_to_string private  function toml_to_string(self) result(ret) Arguments Type Intent Optional Attributes Name class( t_TomlWrapper ), intent(inout) :: self Return Value character(len=:), allocatable","tags":"","loc":"type/t_tomlwrapper.html"},{"title":"t_Hdf5ForOhfield – ohhelp-pic-3d ","text":"type, public :: t_Hdf5ForOhfield Inherits type~~t_hdf5forohfield~~InheritsGraph type~t_hdf5forohfield t_Hdf5ForOhfield type~t_hdf5file t_HDF5File type~t_hdf5forohfield->type~t_hdf5file hdf5 type~t_hdf5group t_HDF5Group type~t_hdf5forohfield->type~t_hdf5group group type~t_hdf5file->type~t_hdf5group Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables filename global_offset global_shape group group_name hdf5 Type-Bound Procedures close write Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: filename integer(kind=8), public :: global_offset (3) integer(kind=8), public :: global_shape (3) type( t_HDF5Group ), public :: group character(len=:), public, allocatable :: group_name type( t_HDF5File ), public :: hdf5 Type-Bound Procedures procedure, public,  :: close => hdf5ForOhfield_close private  subroutine hdf5ForOhfield_close(self) Arguments Type Intent Optional Attributes Name class( t_Hdf5ForOhfield ), intent(in) :: self procedure, public,  :: write => hdf5ForOhfield_write private  subroutine hdf5ForOhfield_write(self, dataset_name, ohfield, ps) Arguments Type Intent Optional Attributes Name class( t_Hdf5ForOhfield ), intent(in) :: self character(len=*), intent(in) :: dataset_name class( t_OhField ), intent(in) :: ohfield integer, intent(in) :: ps","tags":"","loc":"type/t_hdf5forohfield.html"},{"title":"t_HDF5File – ohhelp-pic-3d ","text":"type, public, extends( t_HDF5Group ) :: t_HDF5File Inherits type~~t_hdf5file~~InheritsGraph type~t_hdf5file t_HDF5File type~t_hdf5group t_HDF5Group type~t_hdf5file->type~t_hdf5group Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~t_hdf5file~~InheritedByGraph type~t_hdf5file t_HDF5File type~t_hdf5forohfield t_Hdf5ForOhfield type~t_hdf5forohfield->type~t_hdf5file hdf5 Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables filename id mode name Type-Bound Procedures close create_group write_dataset Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: filename File name integer(kind=HID_T), public :: id Group id character(len=1), public :: mode Access mode (r: readonly, w: writeonly, a: read/write) character(len=:), public, allocatable :: name Group name Type-Bound Procedures procedure, public,  :: close => hdf5File_close private  subroutine hdf5File_close(self, status) Arguments Type Intent Optional Attributes Name class( t_HDF5File ), intent(in) :: self integer, intent(out) :: status procedure, public,  :: create_group => hdf5Group_create_group private  function hdf5Group_create_group(self, name) result(group) Arguments Type Intent Optional Attributes Name class( t_HDF5Group ), intent(in) :: self character(len=*), intent(in) :: name Return Value type( t_HDF5Group ) generic, public,  :: write_dataset => write_double3d private  subroutine hdf5Group_write_dataset3d_double(self, dataset_name, dataset, subdomain_info, status) Arguments Type Intent Optional Attributes Name class( t_HDF5Group ), intent(in) :: self character(len=*), intent(in) :: dataset_name double precision, intent(in) :: dataset (:,:,:) type( t_SubDomain3d ), intent(in) :: subdomain_info integer, intent(out) :: status","tags":"","loc":"type/t_hdf5file.html"},{"title":"t_HDF5Group – ohhelp-pic-3d ","text":"type, public :: t_HDF5Group Inherited by type~~t_hdf5group~~InheritedByGraph type~t_hdf5group t_HDF5Group type~t_hdf5file t_HDF5File type~t_hdf5file->type~t_hdf5group type~t_hdf5forohfield t_Hdf5ForOhfield type~t_hdf5forohfield->type~t_hdf5group group type~t_hdf5forohfield->type~t_hdf5file hdf5 Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables id mode name Type-Bound Procedures close create_group write_dataset Components Type Visibility Attributes Name Initial integer(kind=HID_T), public :: id Group id character(len=1), public :: mode Access mode (r: readonly, w: writeonly, a: read/write) character(len=:), public, allocatable :: name Group name Type-Bound Procedures procedure, public,  :: close => hdf5Group_close private  subroutine hdf5Group_close(self, status) Arguments Type Intent Optional Attributes Name class( t_HDF5Group ), intent(in) :: self integer, intent(out) :: status procedure, public,  :: create_group => hdf5Group_create_group private  function hdf5Group_create_group(self, name) result(group) Arguments Type Intent Optional Attributes Name class( t_HDF5Group ), intent(in) :: self character(len=*), intent(in) :: name Return Value type( t_HDF5Group ) generic, public,  :: write_dataset => write_double3d private  subroutine hdf5Group_write_dataset3d_double(self, dataset_name, dataset, subdomain_info, status) Arguments Type Intent Optional Attributes Name class( t_HDF5Group ), intent(in) :: self character(len=*), intent(in) :: dataset_name double precision, intent(in) :: dataset (:,:,:) type( t_SubDomain3d ), intent(in) :: subdomain_info integer, intent(out) :: status","tags":"","loc":"type/t_hdf5group.html"},{"title":"t_SubDomain3d – ohhelp-pic-3d ","text":"type, public :: t_SubDomain3d Contents Variables global_offset global_shape local_offset local_shape Components Type Visibility Attributes Name Initial integer(kind=8), public :: global_offset (3) integer(kind=8), public :: global_shape (3) integer(kind=8), public :: local_offset (3) integer(kind=8), public :: local_shape (3)","tags":"","loc":"type/t_subdomain3d.html"},{"title":"t_ParticleBoundaries – ohhelp-pic-3d ","text":"type, public, extends( t_ParticleBoundary ) :: t_ParticleBoundaries Inherits type~~t_particleboundaries~~InheritsGraph type~t_particleboundaries t_ParticleBoundaries type~t_particleboundary t_ParticleBoundary type~t_particleboundaries->type~t_particleboundary type~t_particleboundaryholder t_ParticleBoundaryHolder type~t_particleboundaries->type~t_particleboundaryholder particle_boundaries type~t_particleboundaryholder->type~t_particleboundary particle_boundary Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables particle_boundaries Type-Bound Procedures apply Components Type Visibility Attributes Name Initial type(t_ParticleBoundaryHolder), public :: particle_boundaries (3) Type-Bound Procedures procedure, public,  :: apply => particleBoundaries_apply private  subroutine particleBoundaries_apply(self, particle, dt) Arguments Type Intent Optional Attributes Name class( t_ParticleBoundaries ), intent(in) :: self type(oh_particle), intent(inout) :: particle double precision, intent(in) :: dt","tags":"","loc":"type/t_particleboundaries.html"},{"title":"t_ParticleBoundary – ohhelp-pic-3d ","text":"type, public, abstract :: t_ParticleBoundary Inherited by type~~t_particleboundary~~InheritedByGraph type~t_particleboundary t_ParticleBoundary type~t_particleboundaries t_ParticleBoundaries type~t_particleboundaries->type~t_particleboundary type~t_particleboundaryholder t_ParticleBoundaryHolder type~t_particleboundaries->type~t_particleboundaryholder particle_boundaries type~t_particleboundaryholder->type~t_particleboundary particle_boundary Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Type-Bound Procedures apply Type-Bound Procedures procedure(particleBoundary_apply), public, deferred :: apply subroutine particleBoundary_apply(self, particle, dt) Prototype Arguments Type Intent Optional Attributes Name class( t_ParticleBoundary ), intent(in) :: self type(oh_particle), intent(inout) :: particle double precision, intent(in) :: dt","tags":"","loc":"type/t_particleboundary.html"},{"title":"t_ParticleMoverBoris – ohhelp-pic-3d ","text":"type, public, extends( t_ParticleMover ) :: t_ParticleMoverBoris Inherits type~~t_particlemoverboris~~InheritsGraph type~t_particlemoverboris t_ParticleMoverBoris type~t_particlemover t_ParticleMover type~t_particlemoverboris->type~t_particlemover Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Type-Bound Procedures move Type-Bound Procedures procedure, public,  :: move => boris_move private  subroutine boris_move(self, particle, qm, eb, dt) Arguments Type Intent Optional Attributes Name class( t_ParticleMoverBoris ), intent(in) :: self type(oh_particle), intent(inout) :: particle double precision, intent(in) :: qm double precision, intent(in) :: eb (6) double precision :: dt","tags":"","loc":"type/t_particlemoverboris.html"},{"title":"t_ParticleMoverFactory – ohhelp-pic-3d ","text":"type, public :: t_ParticleMoverFactory Contents Type-Bound Procedures create_particle_mover Type-Bound Procedures procedure, public,  :: create_particle_mover => factory_create_particle_mover private  function factory_create_particle_mover(self, name) result(particle_mover) Arguments Type Intent Optional Attributes Name class( t_ParticleMoverFactory ), intent(in) :: self character(len=*), intent(in) :: name Return Value class( t_ParticleMover ), allocatable","tags":"","loc":"type/t_particlemoverfactory.html"},{"title":"t_ParticleMover – ohhelp-pic-3d ","text":"type, public, abstract :: t_ParticleMover Inherited by type~~t_particlemover~~InheritedByGraph type~t_particlemover t_ParticleMover type~t_particlemoverboris t_ParticleMoverBoris type~t_particlemoverboris->type~t_particlemover Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Type-Bound Procedures move Type-Bound Procedures procedure(particleMover_move), public, deferred :: move subroutine particleMover_move(self, particle, qm, eb, dt) Prototype Arguments Type Intent Optional Attributes Name class( t_ParticleMover ), intent(in) :: self type(oh_particle), intent(inout) :: particle double precision, intent(in) :: qm double precision, intent(in) :: eb (6) double precision :: dt","tags":"","loc":"type/t_particlemover.html"},{"title":"t_ParticleInjectorHolder – ohhelp-pic-3d ","text":"type, public :: t_ParticleInjectorHolder Inherits type~~t_particleinjectorholder~~InheritsGraph type~t_particleinjectorholder t_ParticleInjectorHolder type~t_particleinjector t_ParticleInjector type~t_particleinjectorholder->type~t_particleinjector injector Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~t_particleinjectorholder~~InheritedByGraph type~t_particleinjectorholder t_ParticleInjectorHolder type~t_particleinjectormanager t_ParticleInjectorManager type~t_particleinjectormanager->type~t_particleinjectorholder injectors_for_initialization, injectors_for_injection Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables injector Components Type Visibility Attributes Name Initial class( t_ParticleInjector ), public, allocatable :: injector","tags":"","loc":"type/t_particleinjectorholder.html"},{"title":"t_ParticleInjectorManager – ohhelp-pic-3d ","text":"type, public :: t_ParticleInjectorManager Inherits type~~t_particleinjectormanager~~InheritsGraph type~t_particleinjectormanager t_ParticleInjectorManager type~t_particleinjectorholder t_ParticleInjectorHolder type~t_particleinjectormanager->type~t_particleinjectorholder injectors_for_initialization, injectors_for_injection type~t_randomgenerator t_RandomGenerator type~t_particleinjectormanager->type~t_randomgenerator random_generator type~t_particleinjector t_ParticleInjector type~t_particleinjectorholder->type~t_particleinjector injector Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables injectors_for_initialization injectors_for_injection random_generator Type-Bound Procedures initialize_particles inject_particles Components Type Visibility Attributes Name Initial type( t_ParticleInjectorHolder ), public, allocatable :: injectors_for_initialization (:) type( t_ParticleInjectorHolder ), public, allocatable :: injectors_for_injection (:) class( t_RandomGenerator ), public, pointer :: random_generator Type-Bound Procedures procedure, public,  :: initialize_particles => particleInjectorManager_initialize_particles public  subroutine particleInjectorManager_initialize_particles (self, ohhelp) Arguments Type Intent Optional Attributes Name class( t_ParticleInjectorManager ), intent(in) :: self class( t_OhHelp ), intent(inout) :: ohhelp procedure, public,  :: inject_particles => particleInjectorManager_inject_particles public  subroutine particleInjectorManager_inject_particles (self, dt, ohhelp) Arguments Type Intent Optional Attributes Name class( t_ParticleInjectorManager ), intent(in) :: self double precision, intent(in) :: dt class( t_OhHelp ), intent(inout) :: ohhelp","tags":"","loc":"type/t_particleinjectormanager.html"},{"title":"t_NoParticleInjector – ohhelp-pic-3d ","text":"type, public, extends( t_ParticleInjector ) :: t_NoParticleInjector Inherits type~~t_noparticleinjector~~InheritsGraph type~t_noparticleinjector t_NoParticleInjector type~t_particleinjector t_ParticleInjector type~t_noparticleinjector->type~t_particleinjector Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables ispec Type-Bound Procedures inject_particles Components Type Visibility Attributes Name Initial integer, public :: ispec Type-Bound Procedures procedure, public,  :: inject_particles => noParticleInjector_inject_particles private  subroutine noParticleInjector_inject_particles(self, nparticles, ohhelp) Arguments Type Intent Optional Attributes Name class( t_NoParticleInjector ), intent(in) :: self integer, intent(in) :: nparticles class( t_OhHelp ), intent(inout) :: ohhelp","tags":"","loc":"type/t_noparticleinjector.html"},{"title":"t_ParticleInjector – ohhelp-pic-3d ","text":"type, public, abstract :: t_ParticleInjector Inherited by type~~t_particleinjector~~InheritedByGraph type~t_particleinjector t_ParticleInjector type~t_noparticleinjector t_NoParticleInjector type~t_noparticleinjector->type~t_particleinjector type~t_particleinjectorholder t_ParticleInjectorHolder type~t_particleinjectorholder->type~t_particleinjector injector type~t_particleinjectorwithdistribution t_ParticleInjectorWithDistribution type~t_particleinjectorwithdistribution->type~t_particleinjector type~t_particleinjectormanager t_ParticleInjectorManager type~t_particleinjectormanager->type~t_particleinjectorholder injectors_for_initialization, injectors_for_injection Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables ispec Type-Bound Procedures inject_particles Components Type Visibility Attributes Name Initial integer, public :: ispec Type-Bound Procedures procedure(particleInjector_inject_particles), public, deferred :: inject_particles subroutine particleInjector_inject_particles(self, nparticles, ohhelp) Prototype Arguments Type Intent Optional Attributes Name class( t_ParticleInjector ), intent(in) :: self integer, intent(in) :: nparticles class( t_OhHelp ), intent(inout) :: ohhelp","tags":"","loc":"type/t_particleinjector.html"},{"title":"t_ParticleInjectorWithDistribution – ohhelp-pic-3d ","text":"type, public, extends( t_ParticleInjector ) :: t_ParticleInjectorWithDistribution Inherits type~~t_particleinjectorwithdistribution~~InheritsGraph type~t_particleinjectorwithdistribution t_ParticleInjectorWithDistribution type~t_particleinjector t_ParticleInjector type~t_particleinjectorwithdistribution->type~t_particleinjector type~t_positiondistribution3d t_PositionDistribution3d type~t_particleinjectorwithdistribution->type~t_positiondistribution3d distribution_for_position type~t_randomgenerator t_RandomGenerator type~t_particleinjectorwithdistribution->type~t_randomgenerator random_generator type~t_velocitydistribution3d t_VelocityDistribution3d type~t_particleinjectorwithdistribution->type~t_velocitydistribution3d distribution_for_velocity Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables distribution_for_position distribution_for_velocity ispec random_generator Type-Bound Procedures inject_particles Components Type Visibility Attributes Name Initial class( t_PositionDistribution3d ), public, allocatable :: distribution_for_position class( t_VelocityDistribution3d ), public, allocatable :: distribution_for_velocity integer, public :: ispec class( t_RandomGenerator ), public, pointer :: random_generator Type-Bound Procedures procedure, public,  :: inject_particles => particleInjectorWithDistribution_inject_particles private  subroutine particleInjectorWithDistribution_inject_particles(self, nparticles, ohhelp) Arguments Type Intent Optional Attributes Name class( t_ParticleInjectorWithDistribution ), intent(in) :: self integer, intent(in) :: nparticles class( t_OhHelp ), intent(inout) :: ohhelp","tags":"","loc":"type/t_particleinjectorwithdistribution.html"},{"title":"t_ConstVelocityDistribution1d – ohhelp-pic-3d ","text":"type, public, extends( t_VelocityDistribution1d ) :: t_ConstVelocityDistribution1d Inherits type~~t_constvelocitydistribution1d~~InheritsGraph type~t_constvelocitydistribution1d t_ConstVelocityDistribution1d type~t_velocitydistribution1d t_VelocityDistribution1d type~t_constvelocitydistribution1d->type~t_velocitydistribution1d Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables constant_value Type-Bound Procedures sample Components Type Visibility Attributes Name Initial double precision, public :: constant_value Type-Bound Procedures procedure, public,  :: sample => constVelocityDistribution1d_sample private  function constVelocityDistribution1d_sample(self) result(ret) Arguments Type Intent Optional Attributes Name class( t_ConstVelocityDistribution1d ), intent(in) :: self Return Value double precision","tags":"","loc":"type/t_constvelocitydistribution1d.html"},{"title":"t_MaxwellianVelocityDistribution1d – ohhelp-pic-3d ","text":"type, public, extends( t_VelocityDistribution1d ) :: t_MaxwellianVelocityDistribution1d Inherits type~~t_maxwellianvelocitydistribution1d~~InheritsGraph type~t_maxwellianvelocitydistribution1d t_MaxwellianVelocityDistribution1d type~t_randomgenerator t_RandomGenerator type~t_maxwellianvelocitydistribution1d->type~t_randomgenerator random_generator type~t_velocitydistribution1d t_VelocityDistribution1d type~t_maxwellianvelocitydistribution1d->type~t_velocitydistribution1d Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables random_generator Type-Bound Procedures sample Components Type Visibility Attributes Name Initial class( t_RandomGenerator ), public, pointer :: random_generator Type-Bound Procedures procedure, public,  :: sample => maxwellianVelocityDistribution1d_sample private  function maxwellianVelocityDistribution1d_sample(self) result(ret) Arguments Type Intent Optional Attributes Name class( t_MaxwellianVelocityDistribution1d ), intent(in) :: self Return Value double precision","tags":"","loc":"type/t_maxwellianvelocitydistribution1d.html"},{"title":"t_NoVelocityDistribution3d – ohhelp-pic-3d ","text":"type, public, extends( t_VelocityDistribution3d ) :: t_NoVelocityDistribution3d Inherits type~~t_novelocitydistribution3d~~InheritsGraph type~t_novelocitydistribution3d t_NoVelocityDistribution3d type~t_velocitydistribution3d t_VelocityDistribution3d type~t_novelocitydistribution3d->type~t_velocitydistribution3d Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Type-Bound Procedures sample Type-Bound Procedures procedure, public,  :: sample => noVelocityDistribution3d_sample public  function noVelocityDistribution3d_sample (self) result(ret) Arguments Type Intent Optional Attributes Name class( t_NoVelocityDistribution3d ), intent(in) :: self Return Value double precision, (3)","tags":"","loc":"type/t_novelocitydistribution3d.html"},{"title":"t_SimpleVelocityDistribution3d – ohhelp-pic-3d ","text":"type, public, extends( t_VelocityDistribution3d ) :: t_SimpleVelocityDistribution3d Inherits type~~t_simplevelocitydistribution3d~~InheritsGraph type~t_simplevelocitydistribution3d t_SimpleVelocityDistribution3d type~t_velocitydistribution1d t_VelocityDistribution1d type~t_simplevelocitydistribution3d->type~t_velocitydistribution1d distribution_x, distribution_y, distribution_z type~t_velocitydistribution3d t_VelocityDistribution3d type~t_simplevelocitydistribution3d->type~t_velocitydistribution3d Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables distribution_x distribution_y distribution_z Type-Bound Procedures sample Components Type Visibility Attributes Name Initial class( t_VelocityDistribution1d ), public, allocatable :: distribution_x class( t_VelocityDistribution1d ), public, allocatable :: distribution_y class( t_VelocityDistribution1d ), public, allocatable :: distribution_z Type-Bound Procedures procedure, public,  :: sample => simpleVelocityDistribution3d_sample public  function simpleVelocityDistribution3d_sample (self) result(ret) Arguments Type Intent Optional Attributes Name class( t_SimpleVelocityDistribution3d ), intent(in) :: self Return Value double precision, (3)","tags":"","loc":"type/t_simplevelocitydistribution3d.html"},{"title":"t_VelocityDistribution1d – ohhelp-pic-3d ","text":"type, public, abstract :: t_VelocityDistribution1d Inherited by type~~t_velocitydistribution1d~~InheritedByGraph type~t_velocitydistribution1d t_VelocityDistribution1d type~t_constvelocitydistribution1d t_ConstVelocityDistribution1d type~t_constvelocitydistribution1d->type~t_velocitydistribution1d type~t_maxwellianvelocitydistribution1d t_MaxwellianVelocityDistribution1d type~t_maxwellianvelocitydistribution1d->type~t_velocitydistribution1d type~t_simplevelocitydistribution3d t_SimpleVelocityDistribution3d type~t_simplevelocitydistribution3d->type~t_velocitydistribution1d distribution_x, distribution_y, distribution_z Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Type-Bound Procedures sample Type-Bound Procedures procedure( distribution1d_sample ), public, deferred :: sample function distribution1d_sample(self) result(ret) Prototype Arguments Type Intent Optional Attributes Name class( t_VelocityDistribution1d ), intent(in) :: self Return Value double precision","tags":"","loc":"type/t_velocitydistribution1d.html"},{"title":"t_VelocityDistribution3d – ohhelp-pic-3d ","text":"type, public, abstract :: t_VelocityDistribution3d Inherited by type~~t_velocitydistribution3d~~InheritedByGraph type~t_velocitydistribution3d t_VelocityDistribution3d type~t_novelocitydistribution3d t_NoVelocityDistribution3d type~t_novelocitydistribution3d->type~t_velocitydistribution3d type~t_particleinjectorwithdistribution t_ParticleInjectorWithDistribution type~t_particleinjectorwithdistribution->type~t_velocitydistribution3d distribution_for_velocity type~t_simplevelocitydistribution3d t_SimpleVelocityDistribution3d type~t_simplevelocitydistribution3d->type~t_velocitydistribution3d Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Type-Bound Procedures sample Type-Bound Procedures procedure( distribution3d_sample ), public, deferred :: sample function distribution3d_sample(self) result(ret) Prototype Arguments Type Intent Optional Attributes Name class( t_VelocityDistribution3d ), intent(in) :: self Return Value double precision, (3)","tags":"","loc":"type/t_velocitydistribution3d.html"},{"title":"t_NoPositionDistribution3d – ohhelp-pic-3d ","text":"type, public, extends( t_PositionDistribution3d ) :: t_NoPositionDistribution3d Inherits type~~t_nopositiondistribution3d~~InheritsGraph type~t_nopositiondistribution3d t_NoPositionDistribution3d type~t_positiondistribution3d t_PositionDistribution3d type~t_nopositiondistribution3d->type~t_positiondistribution3d Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Type-Bound Procedures sample subdomain_ratio Type-Bound Procedures procedure, public,  :: sample => noPositionDistribution3d_sample private  function noPositionDistribution3d_sample(self, subdomain_range) result(ret) Arguments Type Intent Optional Attributes Name class( t_NoPositionDistribution3d ), intent(in) :: self double precision, intent(in) :: subdomain_range (2,3) Return Value double precision, (3) procedure, public,  :: subdomain_ratio => noPositionDistribution3d_subdomain_ratio private  function noPositionDistribution3d_subdomain_ratio(self, subdomain_range) result(ret) Arguments Type Intent Optional Attributes Name class( t_NoPositionDistribution3d ), intent(in) :: self double precision, intent(in) :: subdomain_range (2,3) Return Value double precision","tags":"","loc":"type/t_nopositiondistribution3d.html"},{"title":"t_PositionDistribution1d – ohhelp-pic-3d ","text":"type, public, abstract :: t_PositionDistribution1d Inherited by type~~t_positiondistribution1d~~InheritedByGraph type~t_positiondistribution1d t_PositionDistribution1d type~t_positionrandomuniformdistribution1d t_PositionRandomUniformDistribution1d type~t_positionrandomuniformdistribution1d->type~t_positiondistribution1d type~t_simplepositiondistribution3d t_SimplePositionDistribution3d type~t_simplepositiondistribution3d->type~t_positiondistribution1d distribution_x, distribution_y, distribution_z Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Type-Bound Procedures sample subdomain_ratio Type-Bound Procedures procedure(distribution1d_sample), public, deferred :: sample function distribution1d_sample(self, subdomain_range) result(ret) Prototype Arguments Type Intent Optional Attributes Name class( t_PositionDistribution1d ), intent(in) :: self double precision, intent(in) :: subdomain_range (2) Return Value double precision procedure(distribution1d_subdomain_ratio), public, deferred :: subdomain_ratio function distribution1d_subdomain_ratio(self, subdomain_range) result(ret) Prototype Arguments Type Intent Optional Attributes Name class( t_PositionDistribution1d ), intent(in) :: self double precision, intent(in) :: subdomain_range (2) Return Value double precision","tags":"","loc":"type/t_positiondistribution1d.html"},{"title":"t_PositionDistribution3d – ohhelp-pic-3d ","text":"type, public, abstract :: t_PositionDistribution3d Inherited by type~~t_positiondistribution3d~~InheritedByGraph type~t_positiondistribution3d t_PositionDistribution3d type~t_nopositiondistribution3d t_NoPositionDistribution3d type~t_nopositiondistribution3d->type~t_positiondistribution3d type~t_particleinjectorwithdistribution t_ParticleInjectorWithDistribution type~t_particleinjectorwithdistribution->type~t_positiondistribution3d distribution_for_position type~t_simplepositiondistribution3d t_SimplePositionDistribution3d type~t_simplepositiondistribution3d->type~t_positiondistribution3d Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Type-Bound Procedures sample subdomain_ratio Type-Bound Procedures procedure(distribution3d_sample), public, deferred :: sample function distribution3d_sample(self, subdomain_range) result(ret) Prototype Arguments Type Intent Optional Attributes Name class( t_PositionDistribution3d ), intent(in) :: self double precision, intent(in) :: subdomain_range (2,3) Return Value double precision, (3) procedure(distribution3d_subdomain_ratio), public, deferred :: subdomain_ratio function distribution3d_subdomain_ratio(self, subdomain_range) result(ret) Prototype Arguments Type Intent Optional Attributes Name class( t_PositionDistribution3d ), intent(in) :: self double precision, intent(in) :: subdomain_range (2,3) Return Value double precision","tags":"","loc":"type/t_positiondistribution3d.html"},{"title":"t_SimplePositionDistribution3d – ohhelp-pic-3d ","text":"type, public, extends( t_PositionDistribution3d ) :: t_SimplePositionDistribution3d Inherits type~~t_simplepositiondistribution3d~~InheritsGraph type~t_simplepositiondistribution3d t_SimplePositionDistribution3d type~t_positiondistribution1d t_PositionDistribution1d type~t_simplepositiondistribution3d->type~t_positiondistribution1d distribution_x, distribution_y, distribution_z type~t_positiondistribution3d t_PositionDistribution3d type~t_simplepositiondistribution3d->type~t_positiondistribution3d Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables distribution_x distribution_y distribution_z Type-Bound Procedures sample subdomain_ratio Components Type Visibility Attributes Name Initial class( t_PositionDistribution1d ), public, allocatable :: distribution_x class( t_PositionDistribution1d ), public, allocatable :: distribution_y class( t_PositionDistribution1d ), public, allocatable :: distribution_z Type-Bound Procedures procedure, public,  :: sample => simplePositionDistribution3d_sample private  function simplePositionDistribution3d_sample(self, subdomain_range) result(ret) Arguments Type Intent Optional Attributes Name class( t_SimplePositionDistribution3d ), intent(in) :: self double precision, intent(in) :: subdomain_range (2,3) Return Value double precision, (3) procedure, public,  :: subdomain_ratio => simplePositionDistribution3d_subdomain_ratio private  function simplePositionDistribution3d_subdomain_ratio(self, subdomain_range) result(ret) Arguments Type Intent Optional Attributes Name class( t_SimplePositionDistribution3d ), intent(in) :: self double precision, intent(in) :: subdomain_range (2,3) Return Value double precision","tags":"","loc":"type/t_simplepositiondistribution3d.html"},{"title":"t_PositionRandomUniformDistribution1d – ohhelp-pic-3d ","text":"type, public, extends( t_PositionDistribution1d ) :: t_PositionRandomUniformDistribution1d Inherits type~~t_positionrandomuniformdistribution1d~~InheritsGraph type~t_positionrandomuniformdistribution1d t_PositionRandomUniformDistribution1d type~t_positiondistribution1d t_PositionDistribution1d type~t_positionrandomuniformdistribution1d->type~t_positiondistribution1d type~t_randomgenerator t_RandomGenerator type~t_positionrandomuniformdistribution1d->type~t_randomgenerator random_generator Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables random_generator range Type-Bound Procedures sample subdomain_ratio Components Type Visibility Attributes Name Initial class( t_RandomGenerator ), public, pointer :: random_generator double precision, public :: range (2) Type-Bound Procedures procedure, public,  :: sample => positionRandomUniformDistribution1d_sample private  function positionRandomUniformDistribution1d_sample(self, subdomain_range) result(ret) Arguments Type Intent Optional Attributes Name class( t_PositionRandomUniformDistribution1d ), intent(in) :: self double precision, intent(in) :: subdomain_range (2) Return Value double precision procedure, public,  :: subdomain_ratio => positionRandomUniformDistribution1d_subdomain_ratio private  function positionRandomUniformDistribution1d_subdomain_ratio(self, subdomain_range) result(ret) Arguments Type Intent Optional Attributes Name class( t_PositionRandomUniformDistribution1d ), intent(in) :: self double precision, intent(in) :: subdomain_range (2) Return Value double precision","tags":"","loc":"type/t_positionrandomuniformdistribution1d.html"},{"title":"t_RandomGenerator – ohhelp-pic-3d ","text":"type, public, abstract :: t_RandomGenerator Inherited by type~~t_randomgenerator~~InheritedByGraph type~t_randomgenerator t_RandomGenerator type~t_maxwellianvelocitydistribution1d t_MaxwellianVelocityDistribution1d type~t_maxwellianvelocitydistribution1d->type~t_randomgenerator random_generator type~t_particleinjectormanager t_ParticleInjectorManager type~t_particleinjectormanager->type~t_randomgenerator random_generator type~t_particleinjectorwithdistribution t_ParticleInjectorWithDistribution type~t_particleinjectorwithdistribution->type~t_randomgenerator random_generator type~t_pcggenerator t_PcgGenerator type~t_pcggenerator->type~t_randomgenerator type~t_positionrandomuniformdistribution1d t_PositionRandomUniformDistribution1d type~t_positionrandomuniformdistribution1d->type~t_randomgenerator random_generator Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Type-Bound Procedures advance normal rand random_fix Type-Bound Procedures procedure(randomGenerator_advance), public, deferred :: advance subroutine randomGenerator_advance(self, n) Prototype Arguments Type Intent Optional Attributes Name class( t_RandomGenerator ), intent(in) :: self integer(kind=8), intent(in) :: n procedure, public,  :: normal => randomGenerator_normal private  function randomGenerator_normal(self) result(ret) Arguments Type Intent Optional Attributes Name class( t_RandomGenerator ), intent(in) :: self Return Value double precision procedure(randomGenerator_rand), public, deferred :: rand function randomGenerator_rand(self) result(ret) Prototype Arguments Type Intent Optional Attributes Name class( t_RandomGenerator ), intent(in) :: self Return Value double precision procedure, public,  :: random_fix => randomGenerator_random_fix private  function randomGenerator_random_fix(self, value) result(ret) Arguments Type Intent Optional Attributes Name class( t_RandomGenerator ), intent(in) :: self double precision, intent(in) :: value Return Value double precision","tags":"","loc":"type/t_randomgenerator.html"},{"title":"t_PcgGenerator – ohhelp-pic-3d ","text":"type, public, extends( t_RandomGenerator ) :: t_PcgGenerator Inherits type~~t_pcggenerator~~InheritsGraph type~t_pcggenerator t_PcgGenerator type~pcg_state_setseq_64 pcg_state_setseq_64 type~t_pcggenerator->type~pcg_state_setseq_64 rng type~t_randomgenerator t_RandomGenerator type~t_pcggenerator->type~t_randomgenerator Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables rng seeds Type-Bound Procedures advance normal rand random_fix Components Type Visibility Attributes Name Initial type( pcg_state_setseq_64 ), public :: rng integer(kind=8), public :: seeds (2) Type-Bound Procedures procedure, public,  :: advance => pcgGenerator_advance private  subroutine pcgGenerator_advance(self, n) Arguments Type Intent Optional Attributes Name class( t_PcgGenerator ), intent(in) :: self integer(kind=8), intent(in) :: n procedure, public,  :: normal => randomGenerator_normal private  function randomGenerator_normal(self) result(ret) Arguments Type Intent Optional Attributes Name class( t_RandomGenerator ), intent(in) :: self Return Value double precision procedure, public,  :: rand => pcgGenerator_rand private  function pcgGenerator_rand(self) result(ret) Arguments Type Intent Optional Attributes Name class( t_PcgGenerator ), intent(in) :: self Return Value double precision procedure, public,  :: random_fix => randomGenerator_random_fix private  function randomGenerator_random_fix(self, value) result(ret) Arguments Type Intent Optional Attributes Name class( t_RandomGenerator ), intent(in) :: self double precision, intent(in) :: value Return Value double precision","tags":"","loc":"type/t_pcggenerator.html"},{"title":"pcg_state_setseq_64 – ohhelp-pic-3d ","text":"type, public, bind(c) :: pcg_state_setseq_64 Inherited by type~~pcg_state_setseq_64~~InheritedByGraph type~pcg_state_setseq_64 pcg_state_setseq_64 type~t_pcggenerator t_PcgGenerator type~t_pcggenerator->type~pcg_state_setseq_64 rng Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables inc state Components Type Visibility Attributes Name Initial integer(kind=c_int64_t), public :: inc integer(kind=c_int64_t), public :: state","tags":"","loc":"type/pcg_state_setseq_64.html"},{"title":"t_PoissonSolver3d – ohhelp-pic-3d ","text":"type, public, extends( t_FieldSolver ) :: t_PoissonSolver3d 3d poisson equation solver. Poisson equation:\n    ∂&#94;2p/∂&#94;2 + ∂&#94;2p/∂y&#94;2 + ∂&#94;2p/∂z&#94;2 = f(x, y, z) Inherits type~~t_poissonsolver3d~~InheritsGraph type~t_poissonsolver3d t_PoissonSolver3d type~t_block t_Block type~t_poissonsolver3d->type~t_block local_block, global_block type~t_fieldsolver t_FieldSolver type~t_poissonsolver3d->type~t_fieldsolver type~t_mpifftsolver3d t_MPIFFTSolver3d type~t_poissonsolver3d->type~t_mpifftsolver3d fft3d type~t_mpifftsolver3d->type~t_block local_block, logical_block, global_block Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables global_block local_block Type-Bound Procedures solve Components Type Visibility Attributes Name Initial type( t_Block ), public :: global_block type( t_Block ), public :: local_block Type-Bound Procedures procedure, public,  :: solve => poissonSolver3d_solve private  subroutine poissonSolver3d_solve(self, rho, aj, eb, phi, ohhelp) Arguments Type Intent Optional Attributes Name class( t_PoissonSolver3d ), intent(in) :: self class( t_OhField ), intent(in) :: rho class( t_OhField ), intent(in) :: aj class( t_OhField ), intent(inout) :: eb class( t_OhField ), intent(inout) :: phi class( t_OhHelp ), intent(inout) :: ohhelp","tags":"","loc":"type/t_poissonsolver3d.html"},{"title":"t_FieldSolver – ohhelp-pic-3d ","text":"type, public, abstract :: t_FieldSolver Inherited by type~~t_fieldsolver~~InheritedByGraph type~t_fieldsolver t_FieldSolver type~t_poissonsolver3d t_PoissonSolver3d type~t_poissonsolver3d->type~t_fieldsolver Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Type-Bound Procedures solve Type-Bound Procedures procedure(fieldSolver_solve), public, deferred :: solve subroutine fieldSolver_solve(self, rho, aj, eb, phi, ohhelp) Prototype Arguments Type Intent Optional Attributes Name class( t_FieldSolver ), intent(in) :: self class( t_OhField ), intent(in) :: rho class( t_OhField ), intent(in) :: aj class( t_OhField ), intent(inout) :: eb class( t_OhField ), intent(inout) :: phi class( t_OhHelp ), intent(inout) :: ohhelp","tags":"","loc":"type/t_fieldsolver.html"},{"title":"t_MPIFFTSolver3d – ohhelp-pic-3d ","text":"type, public, abstract :: t_MPIFFTSolver3d Inherits type~~t_mpifftsolver3d~~InheritsGraph type~t_mpifftsolver3d t_MPIFFTSolver3d type~t_block t_Block type~t_mpifftsolver3d->type~t_block local_block, logical_block, global_block Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~t_mpifftsolver3d~~InheritedByGraph type~t_mpifftsolver3d t_MPIFFTSolver3d type~t_poissonsolver3d t_PoissonSolver3d type~t_poissonsolver3d->type~t_mpifftsolver3d fft3d Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables boundary_types global_block local_block logical_block Type-Bound Procedures backward forward Components Type Visibility Attributes Name Initial integer, public :: boundary_types (3) type( t_Block ), public :: global_block type( t_Block ), public :: local_block type( t_Block ), public :: logical_block Type-Bound Procedures procedure(mpiFFTSolver3d_backward), public, deferred :: backward subroutine mpiFFTSolver3d_backward(self, in, out) Prototype Arguments Type Intent Optional Attributes Name class( t_MPIFFTSolver3d ), intent(inout) :: self double precision, intent(in) :: in (self%local_block%start(1):self%local_block%end(1),self%local_block%start(2):self%local_block%end(2),self%local_block%start(3):self%local_block%end(3)) double precision, intent(out) :: out (self%local_block%start(1):self%local_block%end(1),self%local_block%start(2):self%local_block%end(2),self%local_block%start(3):self%local_block%end(3)) procedure(mpiFFTSolver3d_forward), public, deferred :: forward subroutine mpiFFTSolver3d_forward(self, in, out) Prototype Arguments Type Intent Optional Attributes Name class( t_MPIFFTSolver3d ), intent(inout) :: self double precision, intent(in) :: in (self%local_block%start(1):self%local_block%end(1),self%local_block%start(2):self%local_block%end(2),self%local_block%start(3):self%local_block%end(3)) double precision, intent(out) :: out (self%local_block%start(1):self%local_block%end(1),self%local_block%start(2):self%local_block%end(2),self%local_block%start(3):self%local_block%end(3))","tags":"","loc":"type/t_mpifftsolver3d.html"},{"title":"t_BlockCommunicatorList – ohhelp-pic-3d ","text":"type, public, extends(t_List) :: t_BlockCommunicatorList Inherits type~~t_blockcommunicatorlist~~InheritsGraph type~t_blockcommunicatorlist t_BlockCommunicatorList t_List t_List type~t_blockcommunicatorlist->t_List type~t_blockcommunicator t_BlockCommunicator type~t_blockcommunicatorlist->type~t_blockcommunicator buffer, tmp_buffer type~t_block t_Block type~t_blockcommunicator->type~t_block local_block, comm_block Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~t_blockcommunicatorlist~~InheritedByGraph type~t_blockcommunicatorlist t_BlockCommunicatorList type~t_mpiblockrebaser t_MPIBlockRebaser type~t_mpiblockrebaser->type~t_blockcommunicatorlist block_senders, block_receivers Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables buffer tmp_buffer Type-Bound Procedures allocate_tmp_buffer append copy_to_tmp_buffer destroy get switch_to_tmp_buffer Components Type Visibility Attributes Name Initial type( t_BlockCommunicator ), public, allocatable :: buffer (:) type( t_BlockCommunicator ), public, allocatable :: tmp_buffer (:) Type-Bound Procedures procedure, public,  :: allocate_tmp_buffer => blockSendReceiverList_allocate_tmp_buffer private  subroutine blockSendReceiverList_allocate_tmp_buffer(self, n) Arguments Type Intent Optional Attributes Name class( t_BlockCommunicatorList ), intent(inout) :: self integer, intent(in) :: n procedure, public,  :: append => blockSendReceiverList_append private  subroutine blockSendReceiverList_append(self, setting) Arguments Type Intent Optional Attributes Name class( t_BlockCommunicatorList ), intent(inout) :: self type( t_BlockCommunicator ), intent(in) :: setting procedure, public,  :: copy_to_tmp_buffer => blockSendReceiverList_copy_to_tmp_buffer private  subroutine blockSendReceiverList_copy_to_tmp_buffer(self) Arguments Type Intent Optional Attributes Name class( t_BlockCommunicatorList ), intent(inout) :: self procedure, public,  :: destroy => blockSendReceiverList_destroy private  subroutine blockSendReceiverList_destroy(self) Arguments Type Intent Optional Attributes Name class( t_BlockCommunicatorList ), intent(inout) :: self procedure, public,  :: get => blockSendReceiverList_get private  function blockSendReceiverList_get(self, i) result(ret) Arguments Type Intent Optional Attributes Name class( t_BlockCommunicatorList ), intent(in) :: self integer, intent(in) :: i Return Value type( t_BlockCommunicator ) procedure, public,  :: switch_to_tmp_buffer => blockSendReceiverList_switch_to_tmp_buffer private  subroutine blockSendReceiverList_switch_to_tmp_buffer(self) Arguments Type Intent Optional Attributes Name class( t_BlockCommunicatorList ), intent(inout) :: self","tags":"","loc":"type/t_blockcommunicatorlist.html"},{"title":"t_Block – ohhelp-pic-3d ","text":"type, public :: t_Block Inherited by type~~t_block~~InheritedByGraph type~t_block t_Block type~t_blockcommunicator t_BlockCommunicator type~t_blockcommunicator->type~t_block local_block, comm_block type~t_blocklist t_BlockList type~t_blocklist->type~t_block buffer, tmp_buffer type~t_mpiblockrebaser t_MPIBlockRebaser type~t_mpiblockrebaser->type~t_block local_block, require_block type~t_blockcommunicatorlist t_BlockCommunicatorList type~t_mpiblockrebaser->type~t_blockcommunicatorlist block_senders, block_receivers type~t_mpifftsolver3d t_MPIFFTSolver3d type~t_mpifftsolver3d->type~t_block local_block, logical_block, global_block type~t_poissonsolver3d t_PoissonSolver3d type~t_poissonsolver3d->type~t_block local_block, global_block type~t_poissonsolver3d->type~t_mpifftsolver3d fft3d type~t_blockcommunicatorlist->type~t_blockcommunicator buffer, tmp_buffer Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables end sizes start Type-Bound Procedures from_array overlapped size to_array Components Type Visibility Attributes Name Initial integer, public :: end (3) integer, public :: sizes (3) integer, public :: start (3) Type-Bound Procedures procedure, public,  :: from_array => block_from_array private  subroutine block_from_array(self, array) Arguments Type Intent Optional Attributes Name class( t_Block ), intent(inout) :: self integer, intent(in) :: array (SIZE_OF_BLOCK_ARRAY) procedure, public,  :: overlapped => block_overlapped private  function block_overlapped(self, other) result(overlapped) Arguments Type Intent Optional Attributes Name class( t_Block ), intent(in) :: self class( t_Block ), intent(in) :: other Return Value type( t_Block ) procedure, public,  :: size => block_size private  function block_size(self) result(size) Arguments Type Intent Optional Attributes Name class( t_Block ), intent(in) :: self Return Value integer procedure, public,  :: to_array => block_to_array private  subroutine block_to_array(self, array) Arguments Type Intent Optional Attributes Name class( t_Block ), intent(in) :: self integer, intent(out) :: array (SIZE_OF_BLOCK_ARRAY)","tags":"","loc":"type/t_block.html"},{"title":"t_BlockCommunicator – ohhelp-pic-3d ","text":"type, public :: t_BlockCommunicator Inherits type~~t_blockcommunicator~~InheritsGraph type~t_blockcommunicator t_BlockCommunicator type~t_block t_Block type~t_blockcommunicator->type~t_block local_block, comm_block Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~t_blockcommunicator~~InheritedByGraph type~t_blockcommunicator t_BlockCommunicator type~t_blockcommunicatorlist t_BlockCommunicatorList type~t_blockcommunicatorlist->type~t_blockcommunicator buffer, tmp_buffer type~t_mpiblockrebaser t_MPIBlockRebaser type~t_mpiblockrebaser->type~t_blockcommunicatorlist block_senders, block_receivers Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables comm comm_block local_block mpi_type pid Type-Bound Procedures destroy irecv isend Components Type Visibility Attributes Name Initial integer(kind=kind(MPI_COMM_WORLD)), public :: comm type( t_Block ), public :: comm_block type( t_Block ), public :: local_block integer, public :: mpi_type integer, public :: pid Type-Bound Procedures procedure, public,  :: destroy => blockCommunicator_destroy private  subroutine blockCommunicator_destroy(self) Arguments Type Intent Optional Attributes Name class( t_BlockCommunicator ), intent(inout) :: self procedure, public,  :: irecv => blockCommunicator_irecv private  subroutine blockCommunicator_irecv(self, recvdata, tag, request) Arguments Type Intent Optional Attributes Name class( t_BlockCommunicator ), intent(inout) :: self double precision, intent(inout) :: recvdata (self%local_block%start(1):self%local_block%end(1),self%local_block%start(2):self%local_block%end(2),self%local_block%start(3):self%local_block%end(3)) integer, intent(in) :: tag integer, intent(out) :: request procedure, public,  :: isend => blockCommunicator_isend private  subroutine blockCommunicator_isend(self, senddata, tag, request) Arguments Type Intent Optional Attributes Name class( t_BlockCommunicator ), intent(inout) :: self double precision, intent(in) :: senddata (self%local_block%start(1):self%local_block%end(1),self%local_block%start(2):self%local_block%end(2),self%local_block%start(3):self%local_block%end(3)) integer, intent(in) :: tag integer, intent(out) :: request","tags":"","loc":"type/t_blockcommunicator.html"},{"title":"t_MPIBlockRebaser – ohhelp-pic-3d ","text":"type, public :: t_MPIBlockRebaser Inherits type~~t_mpiblockrebaser~~InheritsGraph type~t_mpiblockrebaser t_MPIBlockRebaser type~t_block t_Block type~t_mpiblockrebaser->type~t_block local_block, require_block type~t_blockcommunicatorlist t_BlockCommunicatorList type~t_mpiblockrebaser->type~t_blockcommunicatorlist block_senders, block_receivers t_List t_List type~t_blockcommunicatorlist->t_List type~t_blockcommunicator t_BlockCommunicator type~t_blockcommunicatorlist->type~t_blockcommunicator buffer, tmp_buffer type~t_blockcommunicator->type~t_block local_block, comm_block Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables ipid local_block pids require_block Type-Bound Procedures destroy rebase Components Type Visibility Attributes Name Initial integer, public :: ipid type( t_Block ), public :: local_block Block that local process has. integer, public, allocatable :: pids (:) type( t_Block ), public :: require_block Block that local process requires. Type-Bound Procedures procedure, public,  :: destroy => mpiBlockRebaser_destroy private  subroutine mpiBlockRebaser_destroy(self) Arguments Type Intent Optional Attributes Name class( t_MPIBlockRebaser ), intent(inout) :: self procedure, public,  :: rebase => mpiBlockRebaser_rebase private  subroutine mpiBlockRebaser_rebase(self, send_data, recv_data, tag) Arguments Type Intent Optional Attributes Name class( t_MPIBlockRebaser ), intent(in) :: self double precision, intent(in) :: send_data (self%local_block%start(1):self%local_block%end(1),self%local_block%start(2):self%local_block%end(2),self%local_block%start(3):self%local_block%end(3)) double precision, intent(inout) :: recv_data (self%require_block%start(1):self%require_block%end(1),self%require_block%start(2):self%require_block%end(2),self%require_block%start(3):self%require_block%end(3)) integer, intent(in), optional :: tag","tags":"","loc":"type/t_mpiblockrebaser.html"},{"title":"t_BlockList – ohhelp-pic-3d ","text":"type, public, extends(t_List) :: t_BlockList Inherits type~~t_blocklist~~InheritsGraph type~t_blocklist t_BlockList t_List t_List type~t_blocklist->t_List type~t_block t_Block type~t_blocklist->type~t_block buffer, tmp_buffer Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Variables buffer tmp_buffer Type-Bound Procedures allocate_tmp_buffer append copy_to_tmp_buffer destroy get switch_to_tmp_buffer Components Type Visibility Attributes Name Initial type( t_Block ), public, allocatable :: buffer (:) type( t_Block ), public, allocatable :: tmp_buffer (:) Type-Bound Procedures procedure, public,  :: allocate_tmp_buffer => blockList_allocate_tmp_buffer private  subroutine blockList_allocate_tmp_buffer(self, n) Arguments Type Intent Optional Attributes Name class( t_BlockList ), intent(inout) :: self integer, intent(in) :: n procedure, public,  :: append => blockList_append private  subroutine blockList_append(self, blk) Arguments Type Intent Optional Attributes Name class( t_BlockList ), intent(inout) :: self type( t_Block ), intent(in) :: blk procedure, public,  :: copy_to_tmp_buffer => blockList_copy_to_tmp_buffer private  subroutine blockList_copy_to_tmp_buffer(self) Arguments Type Intent Optional Attributes Name class( t_BlockList ), intent(inout) :: self procedure, public,  :: destroy => blockList_destroy private  subroutine blockList_destroy(self) Arguments Type Intent Optional Attributes Name class( t_BlockList ), intent(inout) :: self procedure, public,  :: get => blockList_get private  function blockList_get(self, i) result(ret) Arguments Type Intent Optional Attributes Name class( t_BlockList ), intent(in) :: self integer, intent(in) :: i Return Value type( t_Block ) procedure, public,  :: switch_to_tmp_buffer => blockList_switch_to_tmp_buffer private  subroutine blockList_switch_to_tmp_buffer(self) Arguments Type Intent Optional Attributes Name class( t_BlockList ), intent(inout) :: self","tags":"","loc":"type/t_blocklist.html"},{"title":"t_LinearScatter – ohhelp-pic-3d ","text":"type, public, extends( t_Scatter ) :: t_LinearScatter Inherits type~~t_linearscatter~~InheritsGraph type~t_linearscatter t_LinearScatter type~t_scatter t_Scatter type~t_linearscatter->type~t_scatter Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Type-Bound Procedures scatter Type-Bound Procedures procedure, public,  :: scatter => linearScatter_scatter private  subroutine linearScatter_scatter(self, particle, ohfield, amount, ps) Arguments Type Intent Optional Attributes Name class( t_LinearScatter ), intent(in) :: self type(oh_particle), intent(in) :: particle class( t_OhField ), intent(inout) :: ohfield double precision, intent(in) :: amount (ohfield%nelements) integer, intent(in) :: ps","tags":"","loc":"type/t_linearscatter.html"},{"title":"t_Scatter – ohhelp-pic-3d ","text":"type, public, abstract :: t_Scatter Inherited by type~~t_scatter~~InheritedByGraph type~t_scatter t_Scatter type~t_linearscatter t_LinearScatter type~t_linearscatter->type~t_scatter Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Type-Bound Procedures scatter Type-Bound Procedures procedure(scatter_scatter), public, deferred :: scatter subroutine scatter_scatter(self, particle, ohfield, amount, ps) Prototype Arguments Type Intent Optional Attributes Name class( t_Scatter ), intent(in) :: self type(oh_particle), intent(in) :: particle class( t_OhField ), intent(inout) :: ohfield double precision, intent(in) :: amount (ohfield%nelements) integer, intent(in) :: ps","tags":"","loc":"type/t_scatter.html"},{"title":"t_Interpolator – ohhelp-pic-3d ","text":"type, public, abstract :: t_Interpolator Inherited by type~~t_interpolator~~InheritedByGraph type~t_interpolator t_Interpolator type~t_linearinterpolator t_LinearInterpolator type~t_linearinterpolator->type~t_interpolator Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Type-Bound Procedures interp Type-Bound Procedures procedure(interpolator_interp), public, deferred :: interp function interpolator_interp(self, particle, field, ps) result(ret) Prototype Arguments Type Intent Optional Attributes Name class( t_Interpolator ), intent(in) :: self type(oh_particle), intent(in) :: particle class( t_OhField ), intent(in) :: field integer, intent(in) :: ps Return Value double precision, (field%nelements)","tags":"","loc":"type/t_interpolator.html"},{"title":"t_LinearInterpolator – ohhelp-pic-3d ","text":"type, public, extends( t_Interpolator ) :: t_LinearInterpolator Inherits type~~t_linearinterpolator~~InheritsGraph type~t_linearinterpolator t_LinearInterpolator type~t_interpolator t_Interpolator type~t_linearinterpolator->type~t_interpolator Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Contents Type-Bound Procedures interp Type-Bound Procedures procedure, public,  :: interp => linearInterpolator_interp private  function linearInterpolator_interp(self, particle, field, ps) result(ret) Arguments Type Intent Optional Attributes Name class( t_LinearInterpolator ), intent(in) :: self type(oh_particle), intent(in) :: particle class( t_OhField ), intent(in) :: field integer, intent(in) :: ps Return Value double precision, (field%nelements)","tags":"","loc":"type/t_linearinterpolator.html"},{"title":"pic – ohhelp-pic-3d","text":"public  subroutine pic() Arguments None Calls proc~~pic~~CallsGraph proc~pic ohhelppic3d::pic charge_per_macro_particle charge_per_macro_particle proc~pic->charge_per_macro_particle mpi_comm_rank mpi_comm_rank proc~pic->mpi_comm_rank mpi_comm_size mpi_comm_size proc~pic->mpi_comm_size mpi_finalize mpi_finalize proc~pic->mpi_finalize mpi_init mpi_init proc~pic->mpi_init proc~hdf5_finalize m_hdf5::hdf5_finalize proc~pic->proc~hdf5_finalize proc~hdf5_initialize m_hdf5::hdf5_initialize proc~pic->proc~hdf5_initialize proc~new_hdf5forohfield m_hdf5_for_ohfield::new_Hdf5ForOhfield proc~pic->proc~new_hdf5forohfield solve solve proc~pic->solve str str proc~pic->str values values proc~pic->values h5close_f h5close_f proc~hdf5_finalize->h5close_f h5eset_auto_f h5eset_auto_f proc~hdf5_initialize->h5eset_auto_f h5open_f h5open_f proc~hdf5_initialize->h5open_f proc~new_hdf5file m_hdf5::new_HDF5File proc~new_hdf5forohfield->proc~new_hdf5file h5fcreate_f h5fcreate_f proc~new_hdf5file->h5fcreate_f h5fopen_f h5fopen_f proc~new_hdf5file->h5fopen_f h5pclose_f h5pclose_f proc~new_hdf5file->h5pclose_f h5pcreate_f h5pcreate_f proc~new_hdf5file->h5pcreate_f h5pset_fapl_mpio_f h5pset_fapl_mpio_f proc~new_hdf5file->h5pset_fapl_mpio_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~pic~~CalledByGraph proc~pic ohhelppic3d::pic program~main main program~main->proc~pic Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/pic.html"},{"title":"new_OhHelp – ohhelp-pic-3d","text":"public  function new_OhHelp(nspecies, nnodes, nx, ny, nz, boundary_conditions, loadbalance_tolerance_percentage) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: nspecies integer, intent(in) :: nnodes (3) integer, intent(in) :: nx integer, intent(in) :: ny integer, intent(in) :: nz integer, intent(in) :: boundary_conditions (2,3) Boundary conditions. boundary_conditions :=\n    [[xlower, xupper], [ylower, yupper], [zlower, zupper]]. [x/y/z][lower/upper] :=\n    periodic boundary : BOUNDARY_CONDITION_PERIODIC\n        otherwise     : BOUNDARY_CONDITION_NO_PERIODIC) integer, intent(in) :: loadbalance_tolerance_percentage Return Value type( t_OhHelp ) Calls proc~~new_ohhelp~~CallsGraph proc~new_ohhelp m_ohhelp::new_OhHelp particle_count_histgram particle_count_histgram proc~new_ohhelp->particle_count_histgram subdomain_boundary_conditions subdomain_boundary_conditions proc~new_ohhelp->subdomain_boundary_conditions subdomain_range subdomain_range proc~new_ohhelp->subdomain_range Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_ohhelp.html"},{"title":"new_OhFieldFactory – ohhelp-pic-3d","text":"public  function new_OhFieldFactory() result(obj) Arguments None Return Value type( t_OhFieldFactory ) Contents None","tags":"","loc":"proc/new_ohfieldfactory.html"},{"title":"new_BoundaryCommunicationInfo – ohhelp-pic-3d","text":"public  function new_BoundaryCommunicationInfo(downward_comm_send_offset, downward_comm_receive_offset, downward_comm_nsends, upward_comm_send_offset, upward_comm_receive_offset, upward_comm_nsends) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: downward_comm_send_offset Offset to send at downward communication integer, intent(in) :: downward_comm_receive_offset Offset to receive at downward communication integer, intent(in) :: downward_comm_nsends The number of planes to send/receive at downward communication integer, intent(in) :: upward_comm_send_offset Offset to send at upward communication integer, intent(in) :: upward_comm_receive_offset Offset to receive at upward communication integer, intent(in) :: upward_comm_nsends The number of planes to send/receive at upward communication Return Value type( t_BoundaryCommunicationInfo ) Contents","tags":"","loc":"proc/new_boundarycommunicationinfo.html"},{"title":"new_BoundaryCommunicationInfos – ohhelp-pic-3d","text":"public  function new_BoundaryCommunicationInfos(id, boundary_communication_infos) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: id boundary communication type identifier type( t_BoundaryCommunicationInfo ) :: boundary_communication_infos (NBOUNDARY_CONDITION_TYPES) Return Value type( t_BoundaryCommunicationInfos ) Contents","tags":"","loc":"proc/new_boundarycommunicationinfos.html"},{"title":"new_FieldExtensionInfo – ohhelp-pic-3d","text":"public  function new_FieldExtensionInfo(id, nelements, nextensions, nextensions_for_broadcast, nextensions_for_reduction) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: id integer, intent(in) :: nelements integer, intent(in) :: nextensions (2) integer, intent(in) :: nextensions_for_broadcast (2) integer, intent(in) :: nextensions_for_reduction (2) Return Value type( t_FieldExtensionInfo ) Contents","tags":"","loc":"proc/new_fieldextensioninfo.html"},{"title":"new_OhField – ohhelp-pic-3d","text":"public  function new_OhField(extension_info, nfields, boundary_comm_infos) result(obj) Arguments Type Intent Optional Attributes Name type( t_FieldExtensionInfo ), intent(in) :: extension_info integer, intent(in) :: nfields type( t_BoundaryCommunicationInfos ), intent(in), optional :: boundary_comm_infos (:) Return Value type( t_OhField ) Contents","tags":"","loc":"proc/new_ohfield.html"},{"title":"new_OhParticles – ohhelp-pic-3d","text":"public  function new_OhParticles(nspecies, max_nparticles, nprocs) result(self) Arguments Type Intent Optional Attributes Name integer, intent(in) :: nspecies integer(kind=8), intent(in) :: max_nparticles integer, intent(in) :: nprocs Return Value type( t_OhParticles ) Calls proc~~new_ohparticles~~CallsGraph proc~new_ohparticles m_ohparticles::new_OhParticles pbase pbase proc~new_ohparticles->pbase total_local_particles total_local_particles proc~new_ohparticles->total_local_particles Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_ohparticles.html"},{"title":"new_Parameters – ohhelp-pic-3d","text":"public  function new_Parameters(toml_filepath) result(obj) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: toml_filepath Return Value type( t_Parameters ) Calls proc~~new_parameters~~CallsGraph proc~new_parameters m_parameters::new_Parameters charge_to_mass_ratio charge_to_mass_ratio proc~new_parameters->charge_to_mass_ratio plasma_frequency plasma_frequency proc~new_parameters->plasma_frequency qm qm proc~new_parameters->qm wp wp proc~new_parameters->wp Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_parameters.html"},{"title":"new_Hdf5ForOhfield – ohhelp-pic-3d","text":"public  function new_Hdf5ForOhfield(filename, group_name, global_shape, global_offset, comm) result(obj) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: group_name integer(kind=8), intent(in) :: global_shape (3) integer(kind=8), intent(in) :: global_offset (3) integer, intent(in) :: comm Return Value type( t_Hdf5ForOhfield ) Calls proc~~new_hdf5forohfield~~CallsGraph proc~new_hdf5forohfield m_hdf5_for_ohfield::new_Hdf5ForOhfield proc~new_hdf5file m_hdf5::new_HDF5File proc~new_hdf5forohfield->proc~new_hdf5file h5fcreate_f h5fcreate_f proc~new_hdf5file->h5fcreate_f h5fopen_f h5fopen_f proc~new_hdf5file->h5fopen_f h5pclose_f h5pclose_f proc~new_hdf5file->h5pclose_f h5pcreate_f h5pcreate_f proc~new_hdf5file->h5pcreate_f h5pset_fapl_mpio_f h5pset_fapl_mpio_f proc~new_hdf5file->h5pset_fapl_mpio_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~new_hdf5forohfield~~CalledByGraph proc~new_hdf5forohfield m_hdf5_for_ohfield::new_Hdf5ForOhfield proc~pic ohhelppic3d::pic proc~pic->proc~new_hdf5forohfield program~main main program~main->proc~pic Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_hdf5forohfield.html"},{"title":"new_HDF5File – ohhelp-pic-3d","text":"public  function new_HDF5File(filename, mode, comm) result(obj) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename File name to create or open character(len=1), intent(in) :: mode Access mode (r: readonly, w: writeonly, a: read/write) integer, intent(in) :: comm MPI communicator Return Value type( t_HDF5File ) Calls proc~~new_hdf5file~~CallsGraph proc~new_hdf5file m_hdf5::new_HDF5File h5fcreate_f h5fcreate_f proc~new_hdf5file->h5fcreate_f h5fopen_f h5fopen_f proc~new_hdf5file->h5fopen_f h5pclose_f h5pclose_f proc~new_hdf5file->h5pclose_f h5pcreate_f h5pcreate_f proc~new_hdf5file->h5pcreate_f h5pset_fapl_mpio_f h5pset_fapl_mpio_f proc~new_hdf5file->h5pset_fapl_mpio_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~new_hdf5file~~CalledByGraph proc~new_hdf5file m_hdf5::new_HDF5File proc~new_hdf5forohfield m_hdf5_for_ohfield::new_Hdf5ForOhfield proc~new_hdf5forohfield->proc~new_hdf5file proc~pic ohhelppic3d::pic proc~pic->proc~new_hdf5forohfield program~main main program~main->proc~pic Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_hdf5file.html"},{"title":"hdf5_finalize – ohhelp-pic-3d","text":"public  subroutine hdf5_finalize(status) Arguments Type Intent Optional Attributes Name integer, intent(out) :: status Calls proc~~hdf5_finalize~~CallsGraph proc~hdf5_finalize m_hdf5::hdf5_finalize h5close_f h5close_f proc~hdf5_finalize->h5close_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~hdf5_finalize~~CalledByGraph proc~hdf5_finalize m_hdf5::hdf5_finalize proc~pic ohhelppic3d::pic proc~pic->proc~hdf5_finalize program~main main program~main->proc~pic Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/hdf5_finalize.html"},{"title":"hdf5_initialize – ohhelp-pic-3d","text":"public  subroutine hdf5_initialize(status) Arguments Type Intent Optional Attributes Name integer, intent(out) :: status Calls proc~~hdf5_initialize~~CallsGraph proc~hdf5_initialize m_hdf5::hdf5_initialize h5eset_auto_f h5eset_auto_f proc~hdf5_initialize->h5eset_auto_f h5open_f h5open_f proc~hdf5_initialize->h5open_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~hdf5_initialize~~CalledByGraph proc~hdf5_initialize m_hdf5::hdf5_initialize proc~pic ohhelppic3d::pic proc~pic->proc~hdf5_initialize program~main main program~main->proc~pic Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/hdf5_initialize.html"},{"title":"new_SubDomain3d – ohhelp-pic-3d","text":"public  function new_SubDomain3d(local_shape, local_offset, global_shape, global_offset) result(obj) Arguments Type Intent Optional Attributes Name integer(kind=8), intent(in) :: local_shape (3) integer(kind=8), intent(in) :: local_offset (3) integer(kind=8), intent(in) :: global_shape (3) integer(kind=8), intent(in) :: global_offset (3) Return Value type( t_SubDomain3d ) Contents","tags":"","loc":"proc/new_subdomain3d.html"},{"title":"new_ParticleBoundaries – ohhelp-pic-3d","text":"public  function new_ParticleBoundaries(nx, ny, nz) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: nx integer, intent(in) :: ny integer, intent(in) :: nz Return Value type( t_ParticleBoundaries ) Calls proc~~new_particleboundaries~~CallsGraph proc~new_particleboundaries m_particle_boundaries::new_ParticleBoundaries proc~new_periodicparticleboundary m_periodic_particle_boundary::new_PeriodicParticleBoundary proc~new_particleboundaries->proc~new_periodicparticleboundary Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_particleboundaries.html"},{"title":"new_PeriodicParticleBoundary – ohhelp-pic-3d","text":"public  function new_PeriodicParticleBoundary(axis, n) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: axis integer :: n Return Value type(t_PeriodicParticleBoundary) Called by proc~~new_periodicparticleboundary~~CalledByGraph proc~new_periodicparticleboundary m_periodic_particle_boundary::new_PeriodicParticleBoundary proc~new_particleboundaries m_particle_boundaries::new_ParticleBoundaries proc~new_particleboundaries->proc~new_periodicparticleboundary Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_periodicparticleboundary.html"},{"title":"new_ParticleMoverBoris – ohhelp-pic-3d","text":"public  function new_ParticleMoverBoris() result(obj) Arguments None Return Value type( t_ParticleMoverBoris ) Contents None","tags":"","loc":"proc/new_particlemoverboris.html"},{"title":"new_ParticleMoverFactory – ohhelp-pic-3d","text":"public  function new_ParticleMoverFactory() result(obj) Arguments None Return Value type( t_ParticleMoverFactory ) Contents None","tags":"","loc":"proc/new_particlemoverfactory.html"},{"title":"new_ParticleInjectorManager – ohhelp-pic-3d","text":"public  function new_ParticleInjectorManager(parameters, random_generator) result(obj) Arguments Type Intent Optional Attributes Name class( t_Parameters ), intent(inout) :: parameters class( t_RandomGenerator ), intent(in), pointer :: random_generator Return Value type( t_ParticleInjectorManager ) Calls proc~~new_particleinjectormanager~~CallsGraph proc~new_particleinjectormanager m_particle_injector_manager::new_ParticleInjectorManager injectors_for_initialization injectors_for_initialization proc~new_particleinjectormanager->injectors_for_initialization injectors_for_injection injectors_for_injection proc~new_particleinjectormanager->injectors_for_injection plasma_initialization plasma_initialization proc~new_particleinjectormanager->plasma_initialization proc~new_noparticleinjector m_no_particle_injector::new_NoParticleInjector proc~new_particleinjectormanager->proc~new_noparticleinjector proc~new_novelocitydistribution3d m_velocity_distribution::new_NoVelocityDistribution3d proc~new_particleinjectormanager->proc~new_novelocitydistribution3d proc~new_particleinjectorwithdistribution m_particle_injector_with_distribution::new_ParticleInjectorWithDistribution proc~new_particleinjectormanager->proc~new_particleinjectorwithdistribution proc~new_positionrandomuniformdistribution1d m_position_random_uniform_distribution::new_PositionRandomUniformDistribution1d proc~new_particleinjectormanager->proc~new_positionrandomuniformdistribution1d proc~new_simplepositiondistribution3d m_position_distribution::new_SimplePositionDistribution3d proc~new_particleinjectormanager->proc~new_simplepositiondistribution3d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents Variables init_type ispec Variables Type Visibility Attributes Name Initial character(len=:), public, allocatable :: init_type integer, public :: ispec","tags":"","loc":"proc/new_particleinjectormanager.html"},{"title":"particleInjectorManager_initialize_particles – ohhelp-pic-3d","text":"public  subroutine particleInjectorManager_initialize_particles(self, ohhelp) Type Bound t_ParticleInjectorManager Arguments Type Intent Optional Attributes Name class( t_ParticleInjectorManager ), intent(in) :: self class( t_OhHelp ), intent(inout) :: ohhelp Calls proc~~particleinjectormanager_initialize_particles~~CallsGraph proc~particleinjectormanager_initialize_particles m_particle_injector_manager::t_ParticleInjectorManager%particleInjectorManager_initialize_particles injectors_for_initialization injectors_for_initialization proc~particleinjectormanager_initialize_particles->injectors_for_initialization Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents Variables i Variables Type Visibility Attributes Name Initial integer, public :: i","tags":"","loc":"proc/particleinjectormanager_initialize_particles.html"},{"title":"particleInjectorManager_inject_particles – ohhelp-pic-3d","text":"public  subroutine particleInjectorManager_inject_particles(self, dt, ohhelp) Type Bound t_ParticleInjectorManager Arguments Type Intent Optional Attributes Name class( t_ParticleInjectorManager ), intent(in) :: self double precision, intent(in) :: dt class( t_OhHelp ), intent(inout) :: ohhelp Contents Variables i Variables Type Visibility Attributes Name Initial integer, public :: i","tags":"","loc":"proc/particleinjectormanager_inject_particles.html"},{"title":"new_NoParticleInjector – ohhelp-pic-3d","text":"public  function new_NoParticleInjector() result(obj) Arguments None Return Value type( t_NoParticleInjector ) Called by proc~~new_noparticleinjector~~CalledByGraph proc~new_noparticleinjector m_no_particle_injector::new_NoParticleInjector proc~new_particleinjectormanager m_particle_injector_manager::new_ParticleInjectorManager proc~new_particleinjectormanager->proc~new_noparticleinjector Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/new_noparticleinjector.html"},{"title":"new_ParticleInjectorWithDistribution – ohhelp-pic-3d","text":"public  function new_ParticleInjectorWithDistribution(ispec, distribution_for_position, distribution_for_velocity, random_generator) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: ispec class( t_PositionDistribution3d ), intent(in) :: distribution_for_position class( t_VelocityDistribution3d ), intent(in) :: distribution_for_velocity class( t_RandomGenerator ), intent(in), pointer :: random_generator Return Value type( t_ParticleInjectorWithDistribution ) Called by proc~~new_particleinjectorwithdistribution~~CalledByGraph proc~new_particleinjectorwithdistribution m_particle_injector_with_distribution::new_ParticleInjectorWithDistribution proc~new_particleinjectormanager m_particle_injector_manager::new_ParticleInjectorManager proc~new_particleinjectormanager->proc~new_particleinjectorwithdistribution Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_particleinjectorwithdistribution.html"},{"title":"new_ConstVelocityDistribution1d – ohhelp-pic-3d","text":"public  function new_ConstVelocityDistribution1d(constant_value) result(obj) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: constant_value Return Value type( t_ConstVelocityDistribution1d ) Contents","tags":"","loc":"proc/new_constvelocitydistribution1d.html"},{"title":"new_MaxwellianVelocityDistribution1d – ohhelp-pic-3d","text":"public  function new_MaxwellianVelocityDistribution1d(random_generator) result(obj) Arguments Type Intent Optional Attributes Name class( t_RandomGenerator ), pointer :: random_generator Return Value type( t_MaxwellianVelocityDistribution1d ) Contents","tags":"","loc":"proc/new_maxwellianvelocitydistribution1d.html"},{"title":"new_NoVelocityDistribution3d – ohhelp-pic-3d","text":"public  function new_NoVelocityDistribution3d() result(obj) Arguments None Return Value type( t_NoVelocityDistribution3d ) Called by proc~~new_novelocitydistribution3d~~CalledByGraph proc~new_novelocitydistribution3d m_velocity_distribution::new_NoVelocityDistribution3d proc~new_particleinjectormanager m_particle_injector_manager::new_ParticleInjectorManager proc~new_particleinjectormanager->proc~new_novelocitydistribution3d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/new_novelocitydistribution3d.html"},{"title":"new_SimpleVelocityDistribution3d – ohhelp-pic-3d","text":"public  function new_SimpleVelocityDistribution3d(distribution_x, distribution_y, distribution_z) result(obj) Arguments Type Intent Optional Attributes Name class( t_VelocityDistribution1d ), intent(in) :: distribution_x class( t_VelocityDistribution1d ), intent(in) :: distribution_y class( t_VelocityDistribution1d ), intent(in) :: distribution_z Return Value type( t_SimpleVelocityDistribution3d ) Contents","tags":"","loc":"proc/new_simplevelocitydistribution3d.html"},{"title":"noVelocityDistribution3d_sample – ohhelp-pic-3d","text":"public  function noVelocityDistribution3d_sample(self) result(ret) Type Bound t_NoVelocityDistribution3d Arguments Type Intent Optional Attributes Name class( t_NoVelocityDistribution3d ), intent(in) :: self Return Value double precision, (3) Contents","tags":"","loc":"proc/novelocitydistribution3d_sample.html"},{"title":"simpleVelocityDistribution3d_sample – ohhelp-pic-3d","text":"public  function simpleVelocityDistribution3d_sample(self) result(ret) Type Bound t_SimpleVelocityDistribution3d Arguments Type Intent Optional Attributes Name class( t_SimpleVelocityDistribution3d ), intent(in) :: self Return Value double precision, (3) Contents","tags":"","loc":"proc/simplevelocitydistribution3d_sample.html"},{"title":"distribution1d_sample – ohhelp-pic-3d","text":"interface public  function distribution1d_sample(self) result(ret) Arguments Type Intent Optional Attributes Name class( t_VelocityDistribution1d ), intent(in) :: self Return Value double precision","tags":"","loc":"interface/distribution1d_sample.html"},{"title":"distribution3d_sample – ohhelp-pic-3d","text":"interface public  function distribution3d_sample(self) result(ret) Arguments Type Intent Optional Attributes Name class( t_VelocityDistribution3d ), intent(in) :: self Return Value double precision(3)","tags":"","loc":"interface/distribution3d_sample.html"},{"title":"new_NoPositionDistribution3d – ohhelp-pic-3d","text":"public  function new_NoPositionDistribution3d() result(obj) Arguments None Return Value type( t_NoPositionDistribution3d ) Contents None","tags":"","loc":"proc/new_nopositiondistribution3d.html"},{"title":"new_SimplePositionDistribution3d – ohhelp-pic-3d","text":"public  function new_SimplePositionDistribution3d(distribution_x, distribution_y, distribution_z) result(obj) Arguments Type Intent Optional Attributes Name class( t_PositionDistribution1d ), intent(in) :: distribution_x class( t_PositionDistribution1d ), intent(in) :: distribution_y class( t_PositionDistribution1d ), intent(in) :: distribution_z Return Value type( t_SimplePositionDistribution3d ) Called by proc~~new_simplepositiondistribution3d~~CalledByGraph proc~new_simplepositiondistribution3d m_position_distribution::new_SimplePositionDistribution3d proc~new_particleinjectormanager m_particle_injector_manager::new_ParticleInjectorManager proc~new_particleinjectormanager->proc~new_simplepositiondistribution3d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_simplepositiondistribution3d.html"},{"title":"new_PositionRandomUniformDistribution1d – ohhelp-pic-3d","text":"public  function new_PositionRandomUniformDistribution1d(range, random_generator) result(obj) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: range (2) class( t_RandomGenerator ), intent(in), pointer :: random_generator Return Value type( t_PositionRandomUniformDistribution1d ) Called by proc~~new_positionrandomuniformdistribution1d~~CalledByGraph proc~new_positionrandomuniformdistribution1d m_position_random_uniform_distribution::new_PositionRandomUniformDistribution1d proc~new_particleinjectormanager m_particle_injector_manager::new_ParticleInjectorManager proc~new_particleinjectormanager->proc~new_positionrandomuniformdistribution1d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_positionrandomuniformdistribution1d.html"},{"title":"new_PcgGenerator – ohhelp-pic-3d","text":"public  function new_PcgGenerator(seeds) result(obj) Arguments Type Intent Optional Attributes Name integer(kind=8), intent(in) :: seeds (2) Return Value type( t_PcgGenerator ) Calls proc~~new_pcggenerator~~CallsGraph proc~new_pcggenerator m_pcg_generator::new_PcgGenerator interface~pcg32_srandom_r m_pcg32::pcg32_srandom_r proc~new_pcggenerator->interface~pcg32_srandom_r Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_pcggenerator.html"},{"title":"pcg32_advance_r – ohhelp-pic-3d","text":"interface public  subroutine pcg32_advance_r(rng, delta) bind(c, name='pcg_setseq_64_advance_r') Arguments Type Intent Optional Attributes Name type( pcg_state_setseq_64 ) :: rng integer(kind=c_int64_t), intent(in), value :: delta","tags":"","loc":"interface/pcg32_advance_r.html"},{"title":"pcg32_random_double_r – ohhelp-pic-3d","text":"interface public  function pcg32_random_double_r(rng) result(ret) bind(c) Arguments Type Intent Optional Attributes Name type( pcg_state_setseq_64 ) :: rng Return Value real(kind=c_double)","tags":"","loc":"interface/pcg32_random_double_r.html"},{"title":"pcg32_srandom_r – ohhelp-pic-3d","text":"interface Called by interface~~pcg32_srandom_r~~CalledByGraph interface~pcg32_srandom_r m_pcg32::pcg32_srandom_r proc~new_pcggenerator m_pcg_generator::new_PcgGenerator proc~new_pcggenerator->interface~pcg32_srandom_r Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. public  subroutine pcg32_srandom_r(rng, state, initseq) bind(c, name='pcg_setseq_64_srandom_r') Arguments Type Intent Optional Attributes Name type( pcg_state_setseq_64 ) :: rng integer(kind=c_int64_t), intent(in), value :: state integer(kind=c_int64_t), intent(in), value :: initseq","tags":"","loc":"interface/pcg32_srandom_r.html"},{"title":"new_PoissonSolver3d – ohhelp-pic-3d","text":"public  function new_PoissonSolver3d(local_block, global_block, fft3d, boundary_values) result(obj) Arguments Type Intent Optional Attributes Name type( t_Block ), intent(in) :: local_block type( t_Block ), intent(in) :: global_block class( t_MPIFFTSolver3d ), intent(in), pointer :: fft3d double precision, intent(in), optional :: boundary_values (2,3) Return Value type( t_PoissonSolver3d ) Calls proc~~new_poissonsolver3d~~CallsGraph proc~new_poissonsolver3d m_poisson_solver::new_PoissonSolver3d boundary_types boundary_types proc~new_poissonsolver3d->boundary_types modified_wave_number modified_wave_number proc~new_poissonsolver3d->modified_wave_number sizes sizes proc~new_poissonsolver3d->sizes Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_poissonsolver3d.html"},{"title":"new_MPIFFTW3Solver3d – ohhelp-pic-3d","text":"public  function new_MPIFFTW3Solver3d(fft_boundary_types, local_block, global_block, myid, nprocs, communicator, tag) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: fft_boundary_types (3) type( t_Block ), intent(in) :: local_block Block that the local process has.\nglobal index 座標系は1:nx type( t_Block ), intent(in) :: global_block integer, intent(in) :: myid integer, intent(in) :: nprocs integer, intent(in) :: communicator integer, intent(in) :: tag Return Value type(t_MPIFFTW3Solver3d) Calls proc~~new_mpifftw3solver3d~~CallsGraph proc~new_mpifftw3solver3d m_mpi_fftw3_solver::new_MPIFFTW3Solver3d fftw_alloc_real fftw_alloc_real proc~new_mpifftw3solver3d->fftw_alloc_real fftw_mpi_init fftw_mpi_init proc~new_mpifftw3solver3d->fftw_mpi_init fftw_mpi_local_size_3d fftw_mpi_local_size_3d proc~new_mpifftw3solver3d->fftw_mpi_local_size_3d fftw_mpi_plan_r2r_3d fftw_mpi_plan_r2r_3d proc~new_mpifftw3solver3d->fftw_mpi_plan_r2r_3d interface~new_mpiblockrebaser m_mpi_block_rebaser::new_MPIBlockRebaser proc~new_mpifftw3solver3d->interface~new_mpiblockrebaser logical_end logical_end proc~new_mpifftw3solver3d->logical_end logical_start logical_start proc~new_mpifftw3solver3d->logical_start pids pids proc~new_mpifftw3solver3d->pids proc~new_block m_block::new_Block proc~new_mpifftw3solver3d->proc~new_block start start proc~new_mpifftw3solver3d->start Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_mpifftw3solver3d.html"},{"title":"new_BlockCommunicatorList – ohhelp-pic-3d","text":"public  function new_BlockCommunicatorList(max_size, growth_factor) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: max_size double precision, intent(in), optional :: growth_factor Return Value type( t_BlockCommunicatorList ) Calls proc~~new_blockcommunicatorlist~~CallsGraph proc~new_blockcommunicatorlist m_block_communicator_list::new_BlockCommunicatorList init_list init_list proc~new_blockcommunicatorlist->init_list Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_blockcommunicatorlist.html"},{"title":"new_Block – ohhelp-pic-3d","text":"public  function new_Block(start, end) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: start (3) integer, intent(in) :: end (3) Return Value type( t_Block ) Called by proc~~new_block~~CalledByGraph proc~new_block m_block::new_Block proc~new_mpifftw3solver3d m_mpi_fftw3_solver::new_MPIFFTW3Solver3d proc~new_mpifftw3solver3d->proc~new_block Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_block.html"},{"title":"new_BlockCommunicator – ohhelp-pic-3d","text":"public  function new_BlockCommunicator(local_block, comm_block, pid, comm) result(obj) Arguments Type Intent Optional Attributes Name type( t_Block ), intent(in) :: local_block Locally allocated block. type( t_Block ), intent(in) :: comm_block Block used for communication. integer, intent(in) :: pid integer(kind=kind(MPI_COMM_WORLD)), intent(in) :: comm Return Value type( t_BlockCommunicator ) Calls proc~~new_blockcommunicator~~CallsGraph proc~new_blockcommunicator m_block_communicator::new_BlockCommunicator mpi_type_commit mpi_type_commit proc~new_blockcommunicator->mpi_type_commit mpi_type_create_subarray mpi_type_create_subarray proc~new_blockcommunicator->mpi_type_create_subarray start start proc~new_blockcommunicator->start Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_blockcommunicator.html"},{"title":"new_MPIBlockRebaser – ohhelp-pic-3d","text":"public interface new_MPIBlockRebaser Called by interface~~new_mpiblockrebaser~~CalledByGraph interface~new_mpiblockrebaser m_mpi_block_rebaser::new_MPIBlockRebaser proc~new_mpifftw3solver3d m_mpi_fftw3_solver::new_MPIFFTW3Solver3d proc~new_mpifftw3solver3d->interface~new_mpiblockrebaser Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents Module Procedures new_MPIBlockRebaser_with_blocks new_MPIBlockRebaser_with_local_block Module Procedures private  function new_MPIBlockRebaser_with_blocks(local_blocks, require_blocks, pids, ipid, comm) result(obj) Arguments Type Intent Optional Attributes Name type( t_BlockList ), intent(in) :: local_blocks Blocks that each process has. type( t_BlockList ), intent(in) :: require_blocks Blocks that each process requires. integer, intent(in) :: pids (:) Array of process ID (= rank = 0, 1, 2, ..., nproc-1).\nIt should be the same as the order of blocks and require_blocks. integer, intent(in) :: ipid Index to identify the current process ID from pids(1:len(pids)). integer(kind=kind(MPI_COMM_WORLD)), intent(in) :: comm MPI Communicator. Return Value type( t_MPIBlockRebaser ) private  function new_MPIBlockRebaser_with_local_block(local_block, require_block, pids, ipid, comm, tag) result(obj) Arguments Type Intent Optional Attributes Name type( t_Block ), intent(in) :: local_block Blocks that each process has. type( t_Block ), intent(in) :: require_block Blocks that each process requires. integer, intent(in) :: pids (:) Array of process ID (= rank = 0, 1, 2, ..., nproc-1).\nIt should be the same as the order of blocks and require_blocks. integer, intent(in) :: ipid Index to identify the current process ID from pids(1:len(pids)). integer(kind=kind(MPI_COMM_WORLD)), intent(in) :: comm MPI Communicator. integer, intent(in), optional :: tag Return Value type( t_MPIBlockRebaser )","tags":"","loc":"interface/new_mpiblockrebaser.html"},{"title":"new_BlockList – ohhelp-pic-3d","text":"public  function new_BlockList(max_size, growth_factor) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: max_size double precision, intent(in), optional :: growth_factor Return Value type( t_BlockList ) Calls proc~~new_blocklist~~CallsGraph proc~new_blocklist m_block_list::new_BlockList init_list init_list proc~new_blocklist->init_list Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/new_blocklist.html"},{"title":"new_LinearScatter – ohhelp-pic-3d","text":"public  function new_LinearScatter() result(obj) Arguments None Return Value type( t_LinearScatter ) Contents None","tags":"","loc":"proc/new_linearscatter.html"},{"title":"new_LinearInterpolator – ohhelp-pic-3d","text":"public  function new_LinearInterpolator() result(obj) Arguments None Return Value type( t_LinearInterpolator ) Contents None","tags":"","loc":"proc/new_linearinterpolator.html"},{"title":"ohhelppic3d – ohhelp-pic-3d","text":"Main Variables Uses m_domain m_particle_mover m_no_position_distribution m_interpolator m_block m_ohfield_factory m_ohparticles m_scatter m_ohfield m_hdf5_for_ohfield m_velocity_distribution m_particle_mover_factory m_pcg_generator oh_type m_poisson_solver m_particle_injector_manager m_particle_boundaries iso_fortran_env m_field_boundary_type m_ohhelp mpi m_random_generator m_linear_scatter m_parameters m_mpi_fft_solver m_field_solver m_mpi_fftw3_solver m_str m_linear_interpolator m_hdf5 module~~ohhelppic3d~~UsesGraph module~ohhelppic3d ohhelppic3d iso_fortran_env iso_fortran_env module~ohhelppic3d->iso_fortran_env m_str m_str module~ohhelppic3d->m_str module~m_block m_block module~ohhelppic3d->module~m_block module~m_domain m_domain module~ohhelppic3d->module~m_domain module~m_field_boundary_type m_field_boundary_type module~ohhelppic3d->module~m_field_boundary_type module~m_field_solver m_field_solver module~ohhelppic3d->module~m_field_solver module~m_hdf5 m_hdf5 module~ohhelppic3d->module~m_hdf5 module~m_hdf5_for_ohfield m_hdf5_for_ohfield module~ohhelppic3d->module~m_hdf5_for_ohfield module~m_interpolator m_interpolator module~ohhelppic3d->module~m_interpolator module~m_linear_interpolator m_linear_interpolator module~ohhelppic3d->module~m_linear_interpolator module~m_linear_scatter m_linear_scatter module~ohhelppic3d->module~m_linear_scatter module~m_mpi_fft_solver m_mpi_fft_solver module~ohhelppic3d->module~m_mpi_fft_solver module~m_mpi_fftw3_solver m_mpi_fftw3_solver module~ohhelppic3d->module~m_mpi_fftw3_solver module~m_no_position_distribution m_no_position_distribution module~ohhelppic3d->module~m_no_position_distribution module~m_ohfield m_ohfield module~ohhelppic3d->module~m_ohfield module~m_ohfield_factory m_ohfield_factory module~ohhelppic3d->module~m_ohfield_factory module~m_ohhelp m_ohhelp module~ohhelppic3d->module~m_ohhelp module~m_ohparticles m_ohparticles module~ohhelppic3d->module~m_ohparticles module~m_parameters m_parameters module~ohhelppic3d->module~m_parameters module~m_particle_boundaries m_particle_boundaries module~ohhelppic3d->module~m_particle_boundaries module~m_particle_injector_manager m_particle_injector_manager module~ohhelppic3d->module~m_particle_injector_manager module~m_particle_mover m_particle_mover module~ohhelppic3d->module~m_particle_mover module~m_particle_mover_factory m_particle_mover_factory module~ohhelppic3d->module~m_particle_mover_factory module~m_pcg_generator m_pcg_generator module~ohhelppic3d->module~m_pcg_generator module~m_poisson_solver m_poisson_solver module~ohhelppic3d->module~m_poisson_solver module~m_random_generator m_random_generator module~ohhelppic3d->module~m_random_generator module~m_scatter m_scatter module~ohhelppic3d->module~m_scatter module~m_velocity_distribution m_velocity_distribution module~ohhelppic3d->module~m_velocity_distribution mpi mpi module~ohhelppic3d->mpi oh_type oh_type module~ohhelppic3d->oh_type module~m_field_solver->module~m_ohfield module~m_field_solver->module~m_ohhelp module~m_hdf5->module~m_domain module~m_hdf5->mpi HDF5 HDF5 module~m_hdf5->HDF5 module~m_hdf5_for_ohfield->module~m_domain module~m_hdf5_for_ohfield->module~m_hdf5 module~m_hdf5_for_ohfield->module~m_ohfield module~m_interpolator->module~m_ohfield module~m_interpolator->oh_type module~m_linear_interpolator->module~m_interpolator module~m_linear_interpolator->module~m_ohfield module~m_linear_interpolator->oh_type module~m_linear_scatter->module~m_ohfield module~m_linear_scatter->module~m_scatter module~m_linear_scatter->oh_type module~m_mpi_fft_solver->module~m_block module~m_mpi_fftw3_solver->module~m_block module~m_mpi_fftw3_solver->module~m_field_boundary_type module~m_mpi_fftw3_solver->module~m_mpi_fft_solver module~m_mpi_fftw3_solver->mpi m_fftw3_mpi m_fftw3_mpi module~m_mpi_fftw3_solver->m_fftw3_mpi module~m_mpi_block_rebaser m_mpi_block_rebaser module~m_mpi_fftw3_solver->module~m_mpi_block_rebaser module~m_position_distribution m_position_distribution module~m_no_position_distribution->module~m_position_distribution module~m_ohfield_factory->module~m_ohfield module~m_ohhelp->module~m_ohfield module~m_ohhelp->module~m_ohparticles module~m_ohhelp->oh_type ohhelp2 ohhelp2 module~m_ohhelp->ohhelp2 ohhelp3 ohhelp3 module~m_ohhelp->ohhelp3 module~m_ohparticles->oh_type module~m_ohparticles->ohhelp2 module~m_science_constants m_science_constants module~m_parameters->module~m_science_constants module~m_toml_wrapper m_toml_wrapper module~m_parameters->module~m_toml_wrapper module~m_particle_boundaries->oh_type module~m_particle_boundary m_particle_boundary module~m_particle_boundaries->module~m_particle_boundary module~m_periodic_particle_boundary m_periodic_particle_boundary module~m_particle_boundaries->module~m_periodic_particle_boundary module~m_particle_injector_manager->module~m_no_position_distribution module~m_particle_injector_manager->module~m_ohhelp module~m_particle_injector_manager->module~m_parameters module~m_particle_injector_manager->module~m_random_generator module~m_particle_injector_manager->module~m_velocity_distribution module~m_maxwellian_distribution m_maxwellian_distribution module~m_particle_injector_manager->module~m_maxwellian_distribution module~m_no_particle_injector m_no_particle_injector module~m_particle_injector_manager->module~m_no_particle_injector module~m_particle_injector m_particle_injector module~m_particle_injector_manager->module~m_particle_injector module~m_particle_injector_with_distribution m_particle_injector_with_distribution module~m_particle_injector_manager->module~m_particle_injector_with_distribution module~m_particle_injector_manager->module~m_position_distribution module~m_position_random_uniform_distribution m_position_random_uniform_distribution module~m_particle_injector_manager->module~m_position_random_uniform_distribution module~m_particle_injector_manager->module~m_toml_wrapper module~m_particle_mover->oh_type module~m_particle_mover_factory->module~m_particle_mover module~m_particle_mover_boris m_particle_mover_boris module~m_particle_mover_factory->module~m_particle_mover_boris module~m_pcg_generator->module~m_random_generator module~m_pcg32 m_pcg32 module~m_pcg_generator->module~m_pcg32 module~m_poisson_solver->module~m_block module~m_poisson_solver->module~m_field_boundary_type module~m_poisson_solver->module~m_field_solver module~m_poisson_solver->module~m_mpi_fft_solver module~m_poisson_solver->module~m_ohfield module~m_poisson_solver->module~m_ohhelp m_get_default m_get_default module~m_poisson_solver->m_get_default module~m_poisson_solver->module~m_science_constants module~m_random_generator->module~m_science_constants module~m_scatter->module~m_ohfield module~m_scatter->oh_type module~m_maxwellian_distribution->module~m_velocity_distribution module~m_mpi_block_rebaser->module~m_block module~m_mpi_block_rebaser->mpi module~m_mpi_block_rebaser->m_get_default module~m_block_communicator m_block_communicator module~m_mpi_block_rebaser->module~m_block_communicator module~m_block_communicator_list m_block_communicator_list module~m_mpi_block_rebaser->module~m_block_communicator_list module~m_block_list m_block_list module~m_mpi_block_rebaser->module~m_block_list module~m_no_particle_injector->module~m_ohhelp module~m_no_particle_injector->module~m_particle_injector module~m_particle_boundary->oh_type module~m_particle_injector->module~m_ohhelp module~m_particle_injector_with_distribution->module~m_ohhelp module~m_particle_injector_with_distribution->module~m_random_generator module~m_particle_injector_with_distribution->module~m_velocity_distribution module~m_particle_injector_with_distribution->oh_type module~m_particle_injector_with_distribution->module~m_particle_injector module~m_particle_injector_with_distribution->module~m_position_distribution module~m_particle_mover_boris->module~m_particle_mover module~m_particle_mover_boris->oh_type m_vector m_vector module~m_particle_mover_boris->m_vector iso_c_binding iso_c_binding module~m_pcg32->iso_c_binding module~m_periodic_particle_boundary->oh_type module~m_periodic_particle_boundary->module~m_particle_boundary module~m_position_random_uniform_distribution->module~m_random_generator module~m_position_random_uniform_distribution->module~m_position_distribution module~m_toml_wrapper->iso_fortran_env module~m_toml_wrapper->mpi tomlf tomlf module~m_toml_wrapper->tomlf module~m_block_communicator->module~m_block module~m_block_communicator->mpi module~m_block_communicator_list->module~m_block_communicator m_list m_list module~m_block_communicator_list->m_list module~m_block_list->module~m_block module~m_block_list->m_list Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~ohhelppic3d~~UsedByGraph module~ohhelppic3d ohhelppic3d program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Subroutines pic Subroutines public  subroutine pic () Arguments None","tags":"","loc":"module/ohhelppic3d.html"},{"title":"m_ohhelp – ohhelp-pic-3d","text":"OhHelp Wrapper module. Uses m_ohparticles m_ohfield oh_type ohhelp3 ohhelp2 module~~m_ohhelp~~UsesGraph module~m_ohhelp m_ohhelp module~m_ohfield m_ohfield module~m_ohhelp->module~m_ohfield module~m_ohparticles m_ohparticles module~m_ohhelp->module~m_ohparticles oh_type oh_type module~m_ohhelp->oh_type ohhelp2 ohhelp2 module~m_ohhelp->ohhelp2 ohhelp3 ohhelp3 module~m_ohhelp->ohhelp3 module~m_ohparticles->oh_type module~m_ohparticles->ohhelp2 Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_ohhelp~~UsedByGraph module~m_ohhelp m_ohhelp module~m_field_solver m_field_solver module~m_field_solver->module~m_ohhelp module~m_no_particle_injector m_no_particle_injector module~m_no_particle_injector->module~m_ohhelp module~m_particle_injector m_particle_injector module~m_no_particle_injector->module~m_particle_injector module~m_particle_injector->module~m_ohhelp module~m_particle_injector_manager m_particle_injector_manager module~m_particle_injector_manager->module~m_ohhelp module~m_particle_injector_manager->module~m_no_particle_injector module~m_particle_injector_manager->module~m_particle_injector module~m_particle_injector_with_distribution m_particle_injector_with_distribution module~m_particle_injector_manager->module~m_particle_injector_with_distribution module~m_particle_injector_with_distribution->module~m_ohhelp module~m_particle_injector_with_distribution->module~m_particle_injector module~m_poisson_solver m_poisson_solver module~m_poisson_solver->module~m_ohhelp module~m_poisson_solver->module~m_field_solver module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_ohhelp module~ohhelppic3d->module~m_field_solver module~ohhelppic3d->module~m_particle_injector_manager module~ohhelppic3d->module~m_poisson_solver program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Variables OHH_PRIMARY_MODE OHH_REQUIRES_BCAST OHH_SECONDARY_MODE Derived Types t_OhHelp Functions new_OhHelp Variables Type Visibility Attributes Name Initial integer, public, parameter :: OHH_PRIMARY_MODE = 0 In primary mode (= 0). integer, public, parameter :: OHH_REQUIRES_BCAST = -1 Helpand-helper configuration in (re)build and in secondary mode (= -1). integer, public, parameter :: OHH_SECONDARY_MODE = 1 In secondary mode (= 1). Derived Types type, public :: t_OhHelp Components Type Visibility Attributes Name Initial integer, public :: neighber_subdomain_ids (3,3,3) integer, public :: nspecies integer, public, allocatable :: particle_count_histgram (:,:,:) integer, public :: subdomain_id (2) integer, public, allocatable :: subdomain_range (:,:,:) Type-Bound Procedures procedure\n                    ,                  public\n,                   :: allocate_ohfield =>\n                    ohhelp_allocate_ohfield Subroutine procedure\n                    ,                  public\n,                   :: broadcast_field =>\n                    ohhelp_broadcast_field Subroutine procedure\n                    ,                  public\n,                   :: correct_load_balancing =>\n                    ohhelp_correct_load_balancing Subroutine procedure\n                    ,                  public\n,                   :: correct_particle =>\n                    ohhelp_correct_particle Subroutine procedure\n                    ,                  public\n,                   :: exchange_borders =>\n                    ohhelp_exchange_borders Subroutine procedure\n                    ,                  public\n,                   :: initialize =>\n                    ohhelp_initialize Subroutine procedure\n                    ,                  public\n,                   :: inject_particle =>\n                    ohhelp_inject_particle Subroutine procedure\n                    ,                  public\n,                   :: is_primary_mode =>\n                    ohhelp_is_primary_mode Function procedure\n                    ,                  public\n,                   :: is_secondary_mode =>\n                    ohhelp_is_secondary_mode Function procedure\n                    ,                  public\n,                   :: map_subdomain_id =>\n                    ohhelp_map_subdomain_id Function procedure\n                    ,                  public\n,                   :: notify_subdomain_range =>\n                    ohhelp_notify_subdomain_range Subroutine procedure\n                    ,                  public\n,                   :: reduce_field =>\n                    ohhelp_reduce_field Subroutine procedure\n                    ,                  public\n,                   :: requires_broadcast_field =>\n                    ohhelp_requires_broadcast_field Function procedure\n                    ,                  public\n,                   :: transbound =>\n                    ohhelp_transbound Subroutine Functions public  function new_OhHelp (nspecies, nnodes, nx, ny, nz, boundary_conditions, loadbalance_tolerance_percentage) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: nspecies integer, intent(in) :: nnodes (3) integer, intent(in) :: nx integer, intent(in) :: ny integer, intent(in) :: nz integer, intent(in) :: boundary_conditions (2,3) Boundary conditions. Read more… integer, intent(in) :: loadbalance_tolerance_percentage Return Value type( t_OhHelp )","tags":"","loc":"module/m_ohhelp.html"},{"title":"m_ohfield_factory – ohhelp-pic-3d","text":"Uses m_ohfield module~~m_ohfield_factory~~UsesGraph module~m_ohfield_factory m_ohfield_factory module~m_ohfield m_ohfield module~m_ohfield_factory->module~m_ohfield Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_ohfield_factory~~UsedByGraph module~m_ohfield_factory m_ohfield_factory module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_ohfield_factory program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_OhFieldFactory Functions new_OhFieldFactory Derived Types type, public :: t_OhFieldFactory Components Type Visibility Attributes Name Initial integer, public :: comm_id_count integer, public :: extension_id_count Type-Bound Procedures procedure\n                    ,                  public\n,                   :: create_field =>\n                    factory_create_field Function Functions public  function new_OhFieldFactory () result(obj) Arguments None Return Value type( t_OhFieldFactory )","tags":"","loc":"module/m_ohfield_factory.html"},{"title":"m_ohfield – ohhelp-pic-3d","text":"Used by module~~m_ohfield~~UsedByGraph module~m_ohfield m_ohfield module~m_field_solver m_field_solver module~m_field_solver->module~m_ohfield module~m_ohhelp m_ohhelp module~m_field_solver->module~m_ohhelp module~m_hdf5_for_ohfield m_hdf5_for_ohfield module~m_hdf5_for_ohfield->module~m_ohfield module~m_interpolator m_interpolator module~m_interpolator->module~m_ohfield module~m_linear_interpolator m_linear_interpolator module~m_linear_interpolator->module~m_ohfield module~m_linear_interpolator->module~m_interpolator module~m_linear_scatter m_linear_scatter module~m_linear_scatter->module~m_ohfield module~m_scatter m_scatter module~m_linear_scatter->module~m_scatter module~m_ohfield_factory m_ohfield_factory module~m_ohfield_factory->module~m_ohfield module~m_ohhelp->module~m_ohfield module~m_poisson_solver m_poisson_solver module~m_poisson_solver->module~m_ohfield module~m_poisson_solver->module~m_field_solver module~m_poisson_solver->module~m_ohhelp module~m_scatter->module~m_ohfield module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_ohfield module~ohhelppic3d->module~m_field_solver module~ohhelppic3d->module~m_hdf5_for_ohfield module~ohhelppic3d->module~m_interpolator module~ohhelppic3d->module~m_linear_interpolator module~ohhelppic3d->module~m_linear_scatter module~ohhelppic3d->module~m_ohfield_factory module~ohhelppic3d->module~m_ohhelp module~ohhelppic3d->module~m_poisson_solver module~ohhelppic3d->module~m_scatter module~m_particle_injector_manager m_particle_injector_manager module~ohhelppic3d->module~m_particle_injector_manager module~m_no_particle_injector m_no_particle_injector module~m_no_particle_injector->module~m_ohhelp module~m_particle_injector m_particle_injector module~m_no_particle_injector->module~m_particle_injector module~m_particle_injector->module~m_ohhelp module~m_particle_injector_manager->module~m_ohhelp module~m_particle_injector_manager->module~m_no_particle_injector module~m_particle_injector_manager->module~m_particle_injector module~m_particle_injector_with_distribution m_particle_injector_with_distribution module~m_particle_injector_manager->module~m_particle_injector_with_distribution module~m_particle_injector_with_distribution->module~m_ohhelp module~m_particle_injector_with_distribution->module~m_particle_injector program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Variables BOUNDARY_CONDITION_NO_PERIODIC BOUNDARY_CONDITION_PERIODIC NBOUNDARY_CONDITION_TYPES Derived Types t_BoundaryCommunicationInfo t_BoundaryCommunicationInfos t_FieldExtensionInfo t_OhField tp_OhField Functions new_BoundaryCommunicationInfo new_BoundaryCommunicationInfos new_FieldExtensionInfo new_OhField Variables Type Visibility Attributes Name Initial integer, public, parameter :: BOUNDARY_CONDITION_NO_PERIODIC = 2 integer, public, parameter :: BOUNDARY_CONDITION_PERIODIC = 1 integer, public, parameter :: NBOUNDARY_CONDITION_TYPES = 2 Derived Types type, public :: t_BoundaryCommunicationInfo Components Type Visibility Attributes Name Initial integer, public :: downward_comm_nsends The number of planes to send/receive at downward communication integer, public :: downward_comm_receive_offset Offset to receive at downward communication integer, public :: downward_comm_send_offset Offset to send at downward communication integer, public :: upward_comm_nsends The number of planes to send/receive at upward communication integer, public :: upward_comm_receive_offset Offset to receive at upward communication integer, public :: upward_comm_send_offset Offset to send at upward communication type, public :: t_BoundaryCommunicationInfos Components Type Visibility Attributes Name Initial integer, public :: id boundary communication type identifier type( t_BoundaryCommunicationInfo ), public :: infos (NBOUNDARY_CONDITION_TYPES) type, public :: t_FieldExtensionInfo Components Type Visibility Attributes Name Initial integer, public :: id Identifier integer, public :: nelements = 0 The number of elements. integer, public :: nextensions (2) The size of subdomain expansion [lower, upper] integer, public :: nextensions_for_broadcast (2) The size of subdomain expansion when broadcast [lower, upper] integer, public :: nextensions_for_reduction (2) The size of subdomain expansion when reduction [lower, upper] type, public :: t_OhField Components Type Visibility Attributes Name Initial type( t_BoundaryCommunicationInfos ), public, allocatable :: boundary_comm_infos (:) type( t_FieldExtensionInfo ), public :: extension_info integer, public :: field_size (2,3) integer, public :: nboundary_comm_infos integer, public :: nelements integer, public :: nfields integer, public :: subdomain_range (2,3,2) double precision, public, allocatable :: values (:,:,:,:,:) Type-Bound Procedures procedure\n                    ,                  public\n,                   :: allocate =>\n                    ohfield_allocate Subroutine procedure\n                    ,                  public\n,                   :: local_shape =>\n                    ohfield_local_shape Function procedure\n                    ,                  public\n,                   :: make_copy =>\n                    ohfield_make_copy Function procedure\n                    ,                  public\n,                   :: to_global_index =>\n                    ohfield_to_global_index Function procedure\n                    ,                  public\n,                   :: to_local_index =>\n                    ohfield_to_local_index Function procedure\n                    ,                  public\n,                   :: to_local_position =>\n                    ohfield_to_local_position Function type, public :: tp_OhField Components Type Visibility Attributes Name Initial class( t_OhField ), public, pointer :: ref Functions public  function new_BoundaryCommunicationInfo (downward_comm_send_offset, downward_comm_receive_offset, downward_comm_nsends, upward_comm_send_offset, upward_comm_receive_offset, upward_comm_nsends) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: downward_comm_send_offset Offset to send at downward communication integer, intent(in) :: downward_comm_receive_offset Offset to receive at downward communication integer, intent(in) :: downward_comm_nsends The number of planes to send/receive at downward communication integer, intent(in) :: upward_comm_send_offset Offset to send at upward communication integer, intent(in) :: upward_comm_receive_offset Offset to receive at upward communication integer, intent(in) :: upward_comm_nsends The number of planes to send/receive at upward communication Return Value type( t_BoundaryCommunicationInfo ) public  function new_BoundaryCommunicationInfos (id, boundary_communication_infos) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: id boundary communication type identifier type( t_BoundaryCommunicationInfo ) :: boundary_communication_infos (NBOUNDARY_CONDITION_TYPES) Return Value type( t_BoundaryCommunicationInfos ) public  function new_FieldExtensionInfo (id, nelements, nextensions, nextensions_for_broadcast, nextensions_for_reduction) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: id integer, intent(in) :: nelements integer, intent(in) :: nextensions (2) integer, intent(in) :: nextensions_for_broadcast (2) integer, intent(in) :: nextensions_for_reduction (2) Return Value type( t_FieldExtensionInfo ) public  function new_OhField (extension_info, nfields, boundary_comm_infos) result(obj) Arguments Type Intent Optional Attributes Name type( t_FieldExtensionInfo ), intent(in) :: extension_info integer, intent(in) :: nfields type( t_BoundaryCommunicationInfos ), intent(in), optional :: boundary_comm_infos (:) Return Value type( t_OhField )","tags":"","loc":"module/m_ohfield.html"},{"title":"m_ohparticles – ohhelp-pic-3d","text":"Uses oh_type ohhelp2 module~~m_ohparticles~~UsesGraph module~m_ohparticles m_ohparticles oh_type oh_type module~m_ohparticles->oh_type ohhelp2 ohhelp2 module~m_ohparticles->ohhelp2 Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_ohparticles~~UsedByGraph module~m_ohparticles m_ohparticles module~m_ohhelp m_ohhelp module~m_ohhelp->module~m_ohparticles module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_ohparticles module~ohhelppic3d->module~m_ohhelp module~m_field_solver m_field_solver module~ohhelppic3d->module~m_field_solver module~m_particle_injector_manager m_particle_injector_manager module~ohhelppic3d->module~m_particle_injector_manager module~m_poisson_solver m_poisson_solver module~ohhelppic3d->module~m_poisson_solver module~m_field_solver->module~m_ohhelp module~m_no_particle_injector m_no_particle_injector module~m_no_particle_injector->module~m_ohhelp module~m_particle_injector m_particle_injector module~m_no_particle_injector->module~m_particle_injector module~m_particle_injector->module~m_ohhelp module~m_particle_injector_manager->module~m_ohhelp module~m_particle_injector_manager->module~m_no_particle_injector module~m_particle_injector_manager->module~m_particle_injector module~m_particle_injector_with_distribution m_particle_injector_with_distribution module~m_particle_injector_manager->module~m_particle_injector_with_distribution module~m_particle_injector_with_distribution->module~m_ohhelp module~m_particle_injector_with_distribution->module~m_particle_injector module~m_poisson_solver->module~m_ohhelp module~m_poisson_solver->module~m_field_solver program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_OhParticles Functions new_OhParticles Derived Types type, public :: t_OhParticles Components Type Visibility Attributes Name Initial integer, public :: max_local_particles integer, public :: nspecies integer, public, allocatable :: pbase (:) type(oh_particle), public, allocatable :: pbuf (:) integer, public, allocatable :: total_local_particles (:,:) Type-Bound Procedures procedure\n                    ,                  public\n,                   :: allocate_pbuf =>\n                    ohparticles_allocate_pbuf Subroutine procedure\n                    ,                  public\n,                   :: end_index =>\n                    ohparticles_end_index Function procedure\n                    ,                  public\n,                   :: start_index =>\n                    ohparticles_start_index Function Functions public  function new_OhParticles (nspecies, max_nparticles, nprocs) result(self) Arguments Type Intent Optional Attributes Name integer, intent(in) :: nspecies integer(kind=8), intent(in) :: max_nparticles integer, intent(in) :: nprocs Return Value type( t_OhParticles )","tags":"","loc":"module/m_ohparticles.html"},{"title":"m_rescaler – ohhelp-pic-3d","text":"Uses m_unit_converter module~~m_rescaler~~UsesGraph module~m_rescaler m_rescaler m_unit_converter m_unit_converter module~m_rescaler->m_unit_converter Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_Rescaler Derived Types type, public :: t_Rescaler dx : float\n    Grid length [m]\nto_c : float\n    Light Speed in EMSES\npi : UnitTranslator\n    Circular constant []\ne : UnitTranslator\n    Napiers constant []\nc : UnitTranslator\n    Light Speed [m/s]\ne0 : UnitTranslator\n    FS-Permttivity [F/m]\nm0 : UnitTranslator\n    FS-Permeablity [N/A&#94;2]\nqe : UnitTranslator\n    Elementary charge [C]\nme : UnitTranslator\n    Electron mass [kg]\nmi : UnitTranslator\n    Proton mass [kg]\nqe_me : UnitTranslator\n    Electron charge-to-mass ratio [C/kg]\nkB : UnitTranslator\n    Boltzmann constant [J/K]\nlength : UnitTranslator\n    Sim-to-Real length ratio [m]\nm : UnitTranslator\n    Mass [kg]\nt : UnitTranslator\n    Time [s]\nf : UnitTranslator\n    Frequency [Hz]\nv : UnitTranslator\n    Velocity [m/s]\nn : UnitTranslator\n    Number density [/m&#94;3]\nN : UnitTranslator\n    Flux [/m&#94;2s]\nF : UnitTranslator\n    Force [N]\nP : UnitTranslator\n    Power [W]\nW : UnitTranslator\n    Energy [J]\nw : UnitTranslator]\n    Energy density [J/m&#94;3]\neps : UnitTranslator\n    Permittivity  [F/m]\nq : UnitTranslator\n    Charge [C]\nrho : UnitTranslator\n    Charge density [C/m&#94;3]\nq_m : UnitTranslator\n    Charge-to-mass ratio [C/kg]\ni : UnitTranslator\n    Current [A]\nJ : UnitTranslator\n    Current density [A/m&#94;2]\nphi : UnitTranslator\n    Potential [V]\nE : UnitTranslator\n    Electric field [V/m]\nH : UnitTranslator\n    Magnetic field [A/m]\nC : UnitTranslator\n    Capacitance [F]\nR : UnitTranslator\n    Resistance [Ω]\nG : UnitTranslator\n    Conductance [S]\nmu : UnitTranslator\n    Permiability [H/m]\nB : UnitTranslator\n    Magnetic flux density [T]\nL : UnitTranslator\n    Inductance [H]\nT : UnitTranslator\n    Temperature [K] Components Type Visibility Attributes Name Initial type(t_UnitConverter), public :: B type(t_UnitConverter), public :: G type(t_UnitConverter), public :: J type(t_UnitConverter), public :: L type(t_UnitConverter), public :: P type(t_UnitConverter), public :: R type(t_UnitConverter), public :: W type(t_UnitConverter), public :: bf type(t_UnitConverter), public :: c type(t_UnitConverter), public :: cap type(t_UnitConverter), public :: dx type(t_UnitConverter), public :: e type(t_UnitConverter), public :: e0 type(t_UnitConverter), public :: ef type(t_UnitConverter), public :: epsilon type(t_UnitConverter), public :: f type(t_UnitConverter), public :: flux type(t_UnitConverter), public :: force type(t_UnitConverter), public :: i type(t_UnitConverter), public :: kB type(t_UnitConverter), public :: length type(t_UnitConverter), public :: m type(t_UnitConverter), public :: m0 type(t_UnitConverter), public :: mu type(t_UnitConverter), public :: n type(t_UnitConverter), public :: phi type(t_UnitConverter), public :: pi type(t_UnitConverter), public :: q type(t_UnitConverter), public :: q_m type(t_UnitConverter), public :: rho type(t_UnitConverter), public :: t type(t_UnitConverter), public :: temperature type(t_UnitConverter), public :: to_c type(t_UnitConverter), public :: v","tags":"","loc":"module/m_rescaler.html"},{"title":"m_parameters – ohhelp-pic-3d","text":"Uses m_toml_wrapper m_science_constants module~~m_parameters~~UsesGraph module~m_parameters m_parameters module~m_science_constants m_science_constants module~m_parameters->module~m_science_constants module~m_toml_wrapper m_toml_wrapper module~m_parameters->module~m_toml_wrapper iso_fortran_env iso_fortran_env module~m_toml_wrapper->iso_fortran_env mpi mpi module~m_toml_wrapper->mpi tomlf tomlf module~m_toml_wrapper->tomlf Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_parameters~~UsedByGraph module~m_parameters m_parameters module~m_particle_injector_manager m_particle_injector_manager module~m_particle_injector_manager->module~m_parameters module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_parameters module~ohhelppic3d->module~m_particle_injector_manager program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_Parameters Functions new_Parameters Derived Types type, public :: t_Parameters Components Type Visibility Attributes Name Initial type( t_StringHolder ), public, allocatable :: boundary_communication (:) type( t_StringHolder ), public, allocatable :: boundary_type_for_electromagnetic_field (:) type( t_StringHolder ), public, allocatable :: boundary_type_for_particle (:,:) double precision, public, allocatable :: charge_per_macro_particle (:) double precision, public, allocatable :: charge_to_mass_ratio (:) integer, public :: current_output_interval double precision, public :: cyclotron_frequency = 0.0 double precision, public :: dt integer, public :: field_output_interval double precision, public, allocatable :: flow_angle_deg_xy (:) double precision, public, allocatable :: flow_angle_deg_z (:) double precision, public, allocatable :: flow_velocity (:) integer, public :: imbalance_tolerance_percentage = 10 integer, public :: load_continuaus_data character(len=:), public, allocatable :: load_directory integer, public :: nmacro_particles_per_grid (3) integer, public :: nnodes (3) integer, public :: nspecies integer, public :: nstep integer, public :: nx integer, public :: ny integer, public :: nz integer, public :: output_start_step = 0 double precision, public :: particle_buffer_size (3) character(len=:), public, allocatable :: particle_mover_type double precision, public, allocatable :: plasma_frequency (:) type( t_StringHolder ), public, allocatable :: plasma_initialization (:) integer, public :: save_continuaus_data character(len=:), public, allocatable :: save_directory character(len=:), public, allocatable :: simulation_name character(len=:), public, allocatable :: simulation_type integer, public :: stdout_interval_step = 10 double precision, public, allocatable :: thermal_velocity_para (:) double precision, public, allocatable :: thermal_velocity_perp (:) type( t_TomlWrapper ), public :: toml character(len=:), public, allocatable :: toml_filepath Functions public  function new_Parameters (toml_filepath) result(obj) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: toml_filepath Return Value type( t_Parameters )","tags":"","loc":"module/m_parameters.html"},{"title":"m_toml_wrapper – ohhelp-pic-3d","text":"Uses iso_fortran_env mpi tomlf module~~m_toml_wrapper~~UsesGraph module~m_toml_wrapper m_toml_wrapper iso_fortran_env iso_fortran_env module~m_toml_wrapper->iso_fortran_env mpi mpi module~m_toml_wrapper->mpi tomlf tomlf module~m_toml_wrapper->tomlf Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_toml_wrapper~~UsedByGraph module~m_toml_wrapper m_toml_wrapper module~m_parameters m_parameters module~m_parameters->module~m_toml_wrapper module~m_particle_injector_manager m_particle_injector_manager module~m_particle_injector_manager->module~m_toml_wrapper module~m_particle_injector_manager->module~m_parameters module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_parameters module~ohhelppic3d->module~m_particle_injector_manager program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_StringHolder t_TomlWrapper Derived Types type, public :: t_StringHolder Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: string type, public :: t_TomlWrapper Components Type Visibility Attributes Name Initial type(toml_table), public, allocatable :: table Type-Bound Procedures procedure\n                    ,                  public\n,                   :: load =>\n                    toml_load Subroutine generic,\n                  public\n,                   :: require_array =>\n                    require_array1, require_array2, require_array3, require_array4 generic,\n                  public\n,                   :: require_double =>\n                    require_double1, require_double2, require_double3, require_double4 generic,\n                  public\n,                   :: require_double_array =>\n                    require_double_array1, require_double_array2, require_double_array3, require_double_array4 generic,\n                  public\n,                   :: require_int =>\n                    require_int1, require_int2, require_int3, require_int4 generic,\n                  public\n,                   :: require_int_array =>\n                    require_int_array1, require_int_array2, require_int_array3, require_int_array4 generic,\n                  public\n,                   :: require_real =>\n                    require_real1, require_real2, require_real3, require_real4 generic,\n                  public\n,                   :: require_real_array =>\n                    require_real_array1, require_real_array2, require_real_array3, require_real_array4 procedure\n                    ,                  public\n,                   :: require_string1 =>\n                    toml_require_string1 Function procedure\n                    ,                  public\n,                   :: require_string2 =>\n                    toml_require_string2 Function procedure\n                    ,                  public\n,                   :: require_string3 =>\n                    toml_require_string3 Function procedure\n                    ,                  public\n,                   :: require_string4 =>\n                    toml_require_string4 Function generic,\n                  public\n,                   :: require_string_array =>\n                    require_string_array1, require_string_array2, require_string_array3, require_string_array4 generic,\n                  public\n,                   :: require_string_array2d =>\n                    require_string_array2d1, require_string_array2d2, require_string_array2d3, require_string_array2d4 generic,\n                  public\n,                   :: require_table =>\n                    require_table1, require_table2, require_table3 procedure\n                    ,                  public\n,                   :: to_string =>\n                    toml_to_string Function","tags":"","loc":"module/m_toml_wrapper.html"},{"title":"m_hdf5_for_ohfield – ohhelp-pic-3d","text":"Uses m_ohfield m_hdf5 m_domain module~~m_hdf5_for_ohfield~~UsesGraph module~m_hdf5_for_ohfield m_hdf5_for_ohfield module~m_domain m_domain module~m_hdf5_for_ohfield->module~m_domain module~m_hdf5 m_hdf5 module~m_hdf5_for_ohfield->module~m_hdf5 module~m_ohfield m_ohfield module~m_hdf5_for_ohfield->module~m_ohfield module~m_hdf5->module~m_domain HDF5 HDF5 module~m_hdf5->HDF5 mpi mpi module~m_hdf5->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_hdf5_for_ohfield~~UsedByGraph module~m_hdf5_for_ohfield m_hdf5_for_ohfield module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_hdf5_for_ohfield program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_Hdf5ForOhfield Functions new_Hdf5ForOhfield Derived Types type, public :: t_Hdf5ForOhfield Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: filename integer(kind=8), public :: global_offset (3) integer(kind=8), public :: global_shape (3) type( t_HDF5Group ), public :: group character(len=:), public, allocatable :: group_name type( t_HDF5File ), public :: hdf5 Type-Bound Procedures procedure\n                    ,                  public\n,                   :: close =>\n                    hdf5ForOhfield_close Subroutine procedure\n                    ,                  public\n,                   :: write =>\n                    hdf5ForOhfield_write Subroutine Functions public  function new_Hdf5ForOhfield (filename, group_name, global_shape, global_offset, comm) result(obj) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: group_name integer(kind=8), intent(in) :: global_shape (3) integer(kind=8), intent(in) :: global_offset (3) integer, intent(in) :: comm Return Value type( t_Hdf5ForOhfield )","tags":"","loc":"module/m_hdf5_for_ohfield.html"},{"title":"m_hdf5 – ohhelp-pic-3d","text":"Uses m_domain mpi HDF5 module~~m_hdf5~~UsesGraph module~m_hdf5 m_hdf5 HDF5 HDF5 module~m_hdf5->HDF5 module~m_domain m_domain module~m_hdf5->module~m_domain mpi mpi module~m_hdf5->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_hdf5~~UsedByGraph module~m_hdf5 m_hdf5 module~m_hdf5_for_ohfield m_hdf5_for_ohfield module~m_hdf5_for_ohfield->module~m_hdf5 module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_hdf5 module~ohhelppic3d->module~m_hdf5_for_ohfield program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_HDF5File t_HDF5Group Functions new_HDF5File Subroutines hdf5_finalize hdf5_initialize Derived Types type, public, extends( t_HDF5Group ) :: t_HDF5File Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: filename File name integer(kind=HID_T), public :: id Group id character(len=1), public :: mode Access mode (r: readonly, w: writeonly, a: read/write) character(len=:), public, allocatable :: name Group name Type-Bound Procedures procedure\n                    ,                  public\n,                   :: close =>\n                    hdf5File_close Subroutine procedure\n                    ,                  public\n,                   :: create_group =>\n                    hdf5Group_create_group Function generic,\n                  public\n,                   :: write_dataset =>\n                    write_double3d type, public :: t_HDF5Group Components Type Visibility Attributes Name Initial integer(kind=HID_T), public :: id Group id character(len=1), public :: mode Access mode (r: readonly, w: writeonly, a: read/write) character(len=:), public, allocatable :: name Group name Type-Bound Procedures procedure\n                    ,                  public\n,                   :: close =>\n                    hdf5Group_close Subroutine procedure\n                    ,                  public\n,                   :: create_group =>\n                    hdf5Group_create_group Function generic,\n                  public\n,                   :: write_dataset =>\n                    write_double3d Functions public  function new_HDF5File (filename, mode, comm) result(obj) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename File name to create or open character(len=1), intent(in) :: mode Access mode (r: readonly, w: writeonly, a: read/write) integer, intent(in) :: comm MPI communicator Return Value type( t_HDF5File ) Subroutines public  subroutine hdf5_finalize (status) Arguments Type Intent Optional Attributes Name integer, intent(out) :: status public  subroutine hdf5_initialize (status) Arguments Type Intent Optional Attributes Name integer, intent(out) :: status","tags":"","loc":"module/m_hdf5.html"},{"title":"m_domain – ohhelp-pic-3d","text":"Used by module~~m_domain~~UsedByGraph module~m_domain m_domain module~m_hdf5 m_hdf5 module~m_hdf5->module~m_domain module~m_hdf5_for_ohfield m_hdf5_for_ohfield module~m_hdf5_for_ohfield->module~m_domain module~m_hdf5_for_ohfield->module~m_hdf5 module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_domain module~ohhelppic3d->module~m_hdf5 module~ohhelppic3d->module~m_hdf5_for_ohfield program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_SubDomain3d Functions new_SubDomain3d Derived Types type, public :: t_SubDomain3d Components Type Visibility Attributes Name Initial integer(kind=8), public :: global_offset (3) integer(kind=8), public :: global_shape (3) integer(kind=8), public :: local_offset (3) integer(kind=8), public :: local_shape (3) Functions public  function new_SubDomain3d (local_shape, local_offset, global_shape, global_offset) result(obj) Arguments Type Intent Optional Attributes Name integer(kind=8), intent(in) :: local_shape (3) integer(kind=8), intent(in) :: local_offset (3) integer(kind=8), intent(in) :: global_shape (3) integer(kind=8), intent(in) :: global_offset (3) Return Value type( t_SubDomain3d )","tags":"","loc":"module/m_domain.html"},{"title":"m_particle_boundaries – ohhelp-pic-3d","text":"Uses oh_type m_particle_boundary m_periodic_particle_boundary module~~m_particle_boundaries~~UsesGraph module~m_particle_boundaries m_particle_boundaries module~m_particle_boundary m_particle_boundary module~m_particle_boundaries->module~m_particle_boundary module~m_periodic_particle_boundary m_periodic_particle_boundary module~m_particle_boundaries->module~m_periodic_particle_boundary oh_type oh_type module~m_particle_boundaries->oh_type module~m_particle_boundary->oh_type module~m_periodic_particle_boundary->module~m_particle_boundary module~m_periodic_particle_boundary->oh_type Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_particle_boundaries~~UsedByGraph module~m_particle_boundaries m_particle_boundaries module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_particle_boundaries program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_ParticleBoundaries Functions new_ParticleBoundaries Derived Types type, public, extends( t_ParticleBoundary ) :: t_ParticleBoundaries Components Type Visibility Attributes Name Initial type(t_ParticleBoundaryHolder), public :: particle_boundaries (3) Type-Bound Procedures procedure\n                    ,                  public\n,                   :: apply =>\n                    particleBoundaries_apply Subroutine Functions public  function new_ParticleBoundaries (nx, ny, nz) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: nx integer, intent(in) :: ny integer, intent(in) :: nz Return Value type( t_ParticleBoundaries )","tags":"","loc":"module/m_particle_boundaries.html"},{"title":"m_periodic_particle_boundary – ohhelp-pic-3d","text":"Uses oh_type m_particle_boundary module~~m_periodic_particle_boundary~~UsesGraph module~m_periodic_particle_boundary m_periodic_particle_boundary module~m_particle_boundary m_particle_boundary module~m_periodic_particle_boundary->module~m_particle_boundary oh_type oh_type module~m_periodic_particle_boundary->oh_type module~m_particle_boundary->oh_type Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_periodic_particle_boundary~~UsedByGraph module~m_periodic_particle_boundary m_periodic_particle_boundary module~m_particle_boundaries m_particle_boundaries module~m_particle_boundaries->module~m_periodic_particle_boundary module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_particle_boundaries program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Functions new_PeriodicParticleBoundary Functions public  function new_PeriodicParticleBoundary (axis, n) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: axis integer :: n Return Value type(t_PeriodicParticleBoundary)","tags":"","loc":"module/m_periodic_particle_boundary.html"},{"title":"m_particle_boundary – ohhelp-pic-3d","text":"Uses oh_type module~~m_particle_boundary~~UsesGraph module~m_particle_boundary m_particle_boundary oh_type oh_type module~m_particle_boundary->oh_type Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_particle_boundary~~UsedByGraph module~m_particle_boundary m_particle_boundary module~m_particle_boundaries m_particle_boundaries module~m_particle_boundaries->module~m_particle_boundary module~m_periodic_particle_boundary m_periodic_particle_boundary module~m_particle_boundaries->module~m_periodic_particle_boundary module~m_periodic_particle_boundary->module~m_particle_boundary module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_particle_boundaries program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_ParticleBoundary Derived Types type, public :: t_ParticleBoundary Type-Bound Procedures procedure\n(particleBoundary_apply)                    ,                  public\n                  :: apply","tags":"","loc":"module/m_particle_boundary.html"},{"title":"m_particle_mover_boris – ohhelp-pic-3d","text":"Uses m_vector oh_type m_particle_mover module~~m_particle_mover_boris~~UsesGraph module~m_particle_mover_boris m_particle_mover_boris m_vector m_vector module~m_particle_mover_boris->m_vector module~m_particle_mover m_particle_mover module~m_particle_mover_boris->module~m_particle_mover oh_type oh_type module~m_particle_mover_boris->oh_type module~m_particle_mover->oh_type Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_particle_mover_boris~~UsedByGraph module~m_particle_mover_boris m_particle_mover_boris module~m_particle_mover_factory m_particle_mover_factory module~m_particle_mover_factory->module~m_particle_mover_boris module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_particle_mover_factory program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_ParticleMoverBoris Functions new_ParticleMoverBoris Derived Types type, public, extends( t_ParticleMover ) :: t_ParticleMoverBoris Type-Bound Procedures procedure\n                    ,                  public\n,                   :: move =>\n                    boris_move Subroutine Functions public  function new_ParticleMoverBoris () result(obj) Arguments None Return Value type( t_ParticleMoverBoris )","tags":"","loc":"module/m_particle_mover_boris.html"},{"title":"m_particle_mover_factory – ohhelp-pic-3d","text":"Uses m_particle_mover_boris m_particle_mover module~~m_particle_mover_factory~~UsesGraph module~m_particle_mover_factory m_particle_mover_factory module~m_particle_mover m_particle_mover module~m_particle_mover_factory->module~m_particle_mover module~m_particle_mover_boris m_particle_mover_boris module~m_particle_mover_factory->module~m_particle_mover_boris oh_type oh_type module~m_particle_mover->oh_type module~m_particle_mover_boris->module~m_particle_mover m_vector m_vector module~m_particle_mover_boris->m_vector module~m_particle_mover_boris->oh_type Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_particle_mover_factory~~UsedByGraph module~m_particle_mover_factory m_particle_mover_factory module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_particle_mover_factory program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_ParticleMoverFactory Functions new_ParticleMoverFactory Derived Types type, public :: t_ParticleMoverFactory Type-Bound Procedures procedure\n                    ,                  public\n,                   :: create_particle_mover =>\n                    factory_create_particle_mover Function Functions public  function new_ParticleMoverFactory () result(obj) Arguments None Return Value type( t_ParticleMoverFactory )","tags":"","loc":"module/m_particle_mover_factory.html"},{"title":"m_particle_mover – ohhelp-pic-3d","text":"Uses oh_type module~~m_particle_mover~~UsesGraph module~m_particle_mover m_particle_mover oh_type oh_type module~m_particle_mover->oh_type Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_particle_mover~~UsedByGraph module~m_particle_mover m_particle_mover module~m_particle_mover_boris m_particle_mover_boris module~m_particle_mover_boris->module~m_particle_mover module~m_particle_mover_factory m_particle_mover_factory module~m_particle_mover_factory->module~m_particle_mover module~m_particle_mover_factory->module~m_particle_mover_boris module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_particle_mover module~ohhelppic3d->module~m_particle_mover_factory program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_ParticleMover Derived Types type, public :: t_ParticleMover Type-Bound Procedures procedure\n(particleMover_move)                    ,                  public\n                  :: move","tags":"","loc":"module/m_particle_mover.html"},{"title":"m_science_constants – ohhelp-pic-3d","text":"Used by module~~m_science_constants~~UsedByGraph module~m_science_constants m_science_constants module~m_parameters m_parameters module~m_parameters->module~m_science_constants module~m_poisson_solver m_poisson_solver module~m_poisson_solver->module~m_science_constants module~m_random_generator m_random_generator module~m_random_generator->module~m_science_constants module~m_maxwellian_velocity_distribution1d m_maxwellian_velocity_distribution1d module~m_maxwellian_velocity_distribution1d->module~m_random_generator module~m_particle_injector_manager m_particle_injector_manager module~m_particle_injector_manager->module~m_parameters module~m_particle_injector_manager->module~m_random_generator module~m_particle_injector_with_distribution m_particle_injector_with_distribution module~m_particle_injector_manager->module~m_particle_injector_with_distribution module~m_position_random_uniform_distribution m_position_random_uniform_distribution module~m_particle_injector_manager->module~m_position_random_uniform_distribution module~m_particle_injector_with_distribution->module~m_random_generator module~m_pcg_generator m_pcg_generator module~m_pcg_generator->module~m_random_generator module~m_position_random_uniform_distribution->module~m_random_generator module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_parameters module~ohhelppic3d->module~m_poisson_solver module~ohhelppic3d->module~m_random_generator module~ohhelppic3d->module~m_particle_injector_manager module~ohhelppic3d->module~m_pcg_generator program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Variables electron_mass elemental_charge pi Variables Type Visibility Attributes Name Initial double precision, public, parameter :: electron_mass = 9.1093837015d-31 double precision, public, parameter :: elemental_charge = 1.602176634d-19 double precision, public, parameter :: pi = 3.14159265358979d0","tags":"","loc":"module/m_science_constants.html"},{"title":"m_particle_injector_manager – ohhelp-pic-3d","text":"Uses m_ohhelp m_maxwellian_distribution m_velocity_distribution m_position_random_uniform_distribution m_toml_wrapper m_no_position_distribution m_no_particle_injector m_random_generator m_parameters m_particle_injector_with_distribution m_position_distribution m_particle_injector module~~m_particle_injector_manager~~UsesGraph module~m_particle_injector_manager m_particle_injector_manager module~m_maxwellian_distribution m_maxwellian_distribution module~m_particle_injector_manager->module~m_maxwellian_distribution module~m_no_particle_injector m_no_particle_injector module~m_particle_injector_manager->module~m_no_particle_injector module~m_no_position_distribution m_no_position_distribution module~m_particle_injector_manager->module~m_no_position_distribution module~m_ohhelp m_ohhelp module~m_particle_injector_manager->module~m_ohhelp module~m_parameters m_parameters module~m_particle_injector_manager->module~m_parameters module~m_particle_injector m_particle_injector module~m_particle_injector_manager->module~m_particle_injector module~m_particle_injector_with_distribution m_particle_injector_with_distribution module~m_particle_injector_manager->module~m_particle_injector_with_distribution module~m_position_distribution m_position_distribution module~m_particle_injector_manager->module~m_position_distribution module~m_position_random_uniform_distribution m_position_random_uniform_distribution module~m_particle_injector_manager->module~m_position_random_uniform_distribution module~m_random_generator m_random_generator module~m_particle_injector_manager->module~m_random_generator module~m_toml_wrapper m_toml_wrapper module~m_particle_injector_manager->module~m_toml_wrapper module~m_velocity_distribution m_velocity_distribution module~m_particle_injector_manager->module~m_velocity_distribution module~m_maxwellian_distribution->module~m_velocity_distribution module~m_no_particle_injector->module~m_ohhelp module~m_no_particle_injector->module~m_particle_injector module~m_no_position_distribution->module~m_position_distribution module~m_ohfield m_ohfield module~m_ohhelp->module~m_ohfield module~m_ohparticles m_ohparticles module~m_ohhelp->module~m_ohparticles oh_type oh_type module~m_ohhelp->oh_type ohhelp2 ohhelp2 module~m_ohhelp->ohhelp2 ohhelp3 ohhelp3 module~m_ohhelp->ohhelp3 module~m_parameters->module~m_toml_wrapper module~m_science_constants m_science_constants module~m_parameters->module~m_science_constants module~m_particle_injector->module~m_ohhelp module~m_particle_injector_with_distribution->module~m_ohhelp module~m_particle_injector_with_distribution->module~m_particle_injector module~m_particle_injector_with_distribution->module~m_position_distribution module~m_particle_injector_with_distribution->module~m_random_generator module~m_particle_injector_with_distribution->module~m_velocity_distribution module~m_particle_injector_with_distribution->oh_type module~m_position_random_uniform_distribution->module~m_position_distribution module~m_position_random_uniform_distribution->module~m_random_generator module~m_random_generator->module~m_science_constants iso_fortran_env iso_fortran_env module~m_toml_wrapper->iso_fortran_env mpi mpi module~m_toml_wrapper->mpi tomlf tomlf module~m_toml_wrapper->tomlf module~m_ohparticles->oh_type module~m_ohparticles->ohhelp2 Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_particle_injector_manager~~UsedByGraph module~m_particle_injector_manager m_particle_injector_manager module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_particle_injector_manager program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_ParticleInjectorHolder t_ParticleInjectorManager Functions new_ParticleInjectorManager Subroutines particleInjectorManager_initialize_particles particleInjectorManager_inject_particles Derived Types type, public :: t_ParticleInjectorHolder Components Type Visibility Attributes Name Initial class( t_ParticleInjector ), public, allocatable :: injector type, public :: t_ParticleInjectorManager Components Type Visibility Attributes Name Initial type( t_ParticleInjectorHolder ), public, allocatable :: injectors_for_initialization (:) type( t_ParticleInjectorHolder ), public, allocatable :: injectors_for_injection (:) class( t_RandomGenerator ), public, pointer :: random_generator Type-Bound Procedures procedure\n                    ,                  public\n,                   :: initialize_particles => particleInjectorManager_initialize_particles Subroutine procedure\n                    ,                  public\n,                   :: inject_particles => particleInjectorManager_inject_particles Subroutine Functions public  function new_ParticleInjectorManager (parameters, random_generator) result(obj) Arguments Type Intent Optional Attributes Name class( t_Parameters ), intent(inout) :: parameters class( t_RandomGenerator ), intent(in), pointer :: random_generator Return Value type( t_ParticleInjectorManager ) Subroutines public  subroutine particleInjectorManager_initialize_particles (self, ohhelp) Arguments Type Intent Optional Attributes Name class( t_ParticleInjectorManager ), intent(in) :: self class( t_OhHelp ), intent(inout) :: ohhelp public  subroutine particleInjectorManager_inject_particles (self, dt, ohhelp) Arguments Type Intent Optional Attributes Name class( t_ParticleInjectorManager ), intent(in) :: self double precision, intent(in) :: dt class( t_OhHelp ), intent(inout) :: ohhelp","tags":"","loc":"module/m_particle_injector_manager.html"},{"title":"m_no_particle_injector – ohhelp-pic-3d","text":"Uses m_ohhelp m_particle_injector module~~m_no_particle_injector~~UsesGraph module~m_no_particle_injector m_no_particle_injector module~m_ohhelp m_ohhelp module~m_no_particle_injector->module~m_ohhelp module~m_particle_injector m_particle_injector module~m_no_particle_injector->module~m_particle_injector module~m_ohfield m_ohfield module~m_ohhelp->module~m_ohfield module~m_ohparticles m_ohparticles module~m_ohhelp->module~m_ohparticles oh_type oh_type module~m_ohhelp->oh_type ohhelp2 ohhelp2 module~m_ohhelp->ohhelp2 ohhelp3 ohhelp3 module~m_ohhelp->ohhelp3 module~m_particle_injector->module~m_ohhelp module~m_ohparticles->oh_type module~m_ohparticles->ohhelp2 Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_no_particle_injector~~UsedByGraph module~m_no_particle_injector m_no_particle_injector module~m_particle_injector_manager m_particle_injector_manager module~m_particle_injector_manager->module~m_no_particle_injector module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_particle_injector_manager program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_NoParticleInjector Functions new_NoParticleInjector Derived Types type, public, extends( t_ParticleInjector ) :: t_NoParticleInjector Components Type Visibility Attributes Name Initial integer, public :: ispec Type-Bound Procedures procedure\n                    ,                  public\n,                   :: inject_particles =>\n                    noParticleInjector_inject_particles Subroutine Functions public  function new_NoParticleInjector () result(obj) Arguments None Return Value type( t_NoParticleInjector )","tags":"","loc":"module/m_no_particle_injector.html"},{"title":"m_particle_injector – ohhelp-pic-3d","text":"Uses m_ohhelp module~~m_particle_injector~~UsesGraph module~m_particle_injector m_particle_injector module~m_ohhelp m_ohhelp module~m_particle_injector->module~m_ohhelp module~m_ohfield m_ohfield module~m_ohhelp->module~m_ohfield module~m_ohparticles m_ohparticles module~m_ohhelp->module~m_ohparticles oh_type oh_type module~m_ohhelp->oh_type ohhelp2 ohhelp2 module~m_ohhelp->ohhelp2 ohhelp3 ohhelp3 module~m_ohhelp->ohhelp3 module~m_ohparticles->oh_type module~m_ohparticles->ohhelp2 Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_particle_injector~~UsedByGraph module~m_particle_injector m_particle_injector module~m_no_particle_injector m_no_particle_injector module~m_no_particle_injector->module~m_particle_injector module~m_particle_injector_manager m_particle_injector_manager module~m_particle_injector_manager->module~m_particle_injector module~m_particle_injector_manager->module~m_no_particle_injector module~m_particle_injector_with_distribution m_particle_injector_with_distribution module~m_particle_injector_manager->module~m_particle_injector_with_distribution module~m_particle_injector_with_distribution->module~m_particle_injector module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_particle_injector_manager program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_ParticleInjector Derived Types type, public :: t_ParticleInjector Components Type Visibility Attributes Name Initial integer, public :: ispec Type-Bound Procedures procedure\n(particleInjector_inject_particles)                    ,                  public\n                  :: inject_particles","tags":"","loc":"module/m_particle_injector.html"},{"title":"m_particle_injector_with_distribution – ohhelp-pic-3d","text":"Uses m_ohhelp m_velocity_distribution m_random_generator oh_type m_position_distribution m_particle_injector module~~m_particle_injector_with_distribution~~UsesGraph module~m_particle_injector_with_distribution m_particle_injector_with_distribution module~m_ohhelp m_ohhelp module~m_particle_injector_with_distribution->module~m_ohhelp module~m_particle_injector m_particle_injector module~m_particle_injector_with_distribution->module~m_particle_injector module~m_position_distribution m_position_distribution module~m_particle_injector_with_distribution->module~m_position_distribution module~m_random_generator m_random_generator module~m_particle_injector_with_distribution->module~m_random_generator module~m_velocity_distribution m_velocity_distribution module~m_particle_injector_with_distribution->module~m_velocity_distribution oh_type oh_type module~m_particle_injector_with_distribution->oh_type module~m_ohhelp->oh_type module~m_ohfield m_ohfield module~m_ohhelp->module~m_ohfield module~m_ohparticles m_ohparticles module~m_ohhelp->module~m_ohparticles ohhelp2 ohhelp2 module~m_ohhelp->ohhelp2 ohhelp3 ohhelp3 module~m_ohhelp->ohhelp3 module~m_particle_injector->module~m_ohhelp module~m_science_constants m_science_constants module~m_random_generator->module~m_science_constants module~m_ohparticles->oh_type module~m_ohparticles->ohhelp2 Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_particle_injector_with_distribution~~UsedByGraph module~m_particle_injector_with_distribution m_particle_injector_with_distribution module~m_particle_injector_manager m_particle_injector_manager module~m_particle_injector_manager->module~m_particle_injector_with_distribution module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_particle_injector_manager program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_ParticleInjectorWithDistribution Functions new_ParticleInjectorWithDistribution Derived Types type, public, extends( t_ParticleInjector ) :: t_ParticleInjectorWithDistribution Components Type Visibility Attributes Name Initial class( t_PositionDistribution3d ), public, allocatable :: distribution_for_position class( t_VelocityDistribution3d ), public, allocatable :: distribution_for_velocity integer, public :: ispec class( t_RandomGenerator ), public, pointer :: random_generator Type-Bound Procedures procedure\n                    ,                  public\n,                   :: inject_particles =>\n                    particleInjectorWithDistribution_inject_particles Subroutine Functions public  function new_ParticleInjectorWithDistribution (ispec, distribution_for_position, distribution_for_velocity, random_generator) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: ispec class( t_PositionDistribution3d ), intent(in) :: distribution_for_position class( t_VelocityDistribution3d ), intent(in) :: distribution_for_velocity class( t_RandomGenerator ), intent(in), pointer :: random_generator Return Value type( t_ParticleInjectorWithDistribution )","tags":"","loc":"module/m_particle_injector_with_distribution.html"},{"title":"m_const_velocity_distribution – ohhelp-pic-3d","text":"Uses m_velocity_distribution module~~m_const_velocity_distribution~~UsesGraph module~m_const_velocity_distribution m_const_velocity_distribution module~m_velocity_distribution m_velocity_distribution module~m_const_velocity_distribution->module~m_velocity_distribution Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_ConstVelocityDistribution1d Functions new_ConstVelocityDistribution1d Derived Types type, public, extends( t_VelocityDistribution1d ) :: t_ConstVelocityDistribution1d Components Type Visibility Attributes Name Initial double precision, public :: constant_value Type-Bound Procedures procedure\n                    ,                  public\n,                   :: sample =>\n                    constVelocityDistribution1d_sample Function Functions public  function new_ConstVelocityDistribution1d (constant_value) result(obj) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: constant_value Return Value type( t_ConstVelocityDistribution1d )","tags":"","loc":"module/m_const_velocity_distribution.html"},{"title":"m_maxwellian_velocity_distribution1d – ohhelp-pic-3d","text":"Uses m_velocity_distribution m_random_generator module~~m_maxwellian_velocity_distribution1d~~UsesGraph module~m_maxwellian_velocity_distribution1d m_maxwellian_velocity_distribution1d module~m_random_generator m_random_generator module~m_maxwellian_velocity_distribution1d->module~m_random_generator module~m_velocity_distribution m_velocity_distribution module~m_maxwellian_velocity_distribution1d->module~m_velocity_distribution module~m_science_constants m_science_constants module~m_random_generator->module~m_science_constants Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_MaxwellianVelocityDistribution1d Functions new_MaxwellianVelocityDistribution1d Derived Types type, public, extends( t_VelocityDistribution1d ) :: t_MaxwellianVelocityDistribution1d Components Type Visibility Attributes Name Initial class( t_RandomGenerator ), public, pointer :: random_generator Type-Bound Procedures procedure\n                    ,                  public\n,                   :: sample =>\n                    maxwellianVelocityDistribution1d_sample Function Functions public  function new_MaxwellianVelocityDistribution1d (random_generator) result(obj) Arguments Type Intent Optional Attributes Name class( t_RandomGenerator ), pointer :: random_generator Return Value type( t_MaxwellianVelocityDistribution1d )","tags":"","loc":"module/m_maxwellian_velocity_distribution1d.html"},{"title":"m_maxwellian_distribution – ohhelp-pic-3d","text":"Uses m_velocity_distribution module~~m_maxwellian_distribution~~UsesGraph module~m_maxwellian_distribution m_maxwellian_distribution module~m_velocity_distribution m_velocity_distribution module~m_maxwellian_distribution->module~m_velocity_distribution Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_maxwellian_distribution~~UsedByGraph module~m_maxwellian_distribution m_maxwellian_distribution module~m_particle_injector_manager m_particle_injector_manager module~m_particle_injector_manager->module~m_maxwellian_distribution module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_particle_injector_manager program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents None","tags":"","loc":"module/m_maxwellian_distribution.html"},{"title":"m_velocity_distribution – ohhelp-pic-3d","text":"Used by module~~m_velocity_distribution~~UsedByGraph module~m_velocity_distribution m_velocity_distribution module~m_const_velocity_distribution m_const_velocity_distribution module~m_const_velocity_distribution->module~m_velocity_distribution module~m_maxwellian_distribution m_maxwellian_distribution module~m_maxwellian_distribution->module~m_velocity_distribution module~m_maxwellian_velocity_distribution1d m_maxwellian_velocity_distribution1d module~m_maxwellian_velocity_distribution1d->module~m_velocity_distribution module~m_particle_injector_manager m_particle_injector_manager module~m_particle_injector_manager->module~m_velocity_distribution module~m_particle_injector_manager->module~m_maxwellian_distribution module~m_particle_injector_with_distribution m_particle_injector_with_distribution module~m_particle_injector_manager->module~m_particle_injector_with_distribution module~m_particle_injector_with_distribution->module~m_velocity_distribution module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_velocity_distribution module~ohhelppic3d->module~m_particle_injector_manager program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Interfaces distribution1d_sample distribution3d_sample Derived Types t_NoVelocityDistribution3d t_SimpleVelocityDistribution3d t_VelocityDistribution1d t_VelocityDistribution3d Functions new_NoVelocityDistribution3d new_SimpleVelocityDistribution3d noVelocityDistribution3d_sample simpleVelocityDistribution3d_sample Interfaces interface public  function distribution1d_sample(self) result(ret) Arguments Type Intent Optional Attributes Name class( t_VelocityDistribution1d ), intent(in) :: self Return Value double precision interface public  function distribution3d_sample(self) result(ret) Arguments Type Intent Optional Attributes Name class( t_VelocityDistribution3d ), intent(in) :: self Return Value double precision, (3) Derived Types type, public, extends( t_VelocityDistribution3d ) :: t_NoVelocityDistribution3d Type-Bound Procedures procedure\n                    ,                  public\n,                   :: sample => noVelocityDistribution3d_sample Function type, public, extends( t_VelocityDistribution3d ) :: t_SimpleVelocityDistribution3d Components Type Visibility Attributes Name Initial class( t_VelocityDistribution1d ), public, allocatable :: distribution_x class( t_VelocityDistribution1d ), public, allocatable :: distribution_y class( t_VelocityDistribution1d ), public, allocatable :: distribution_z Type-Bound Procedures procedure\n                    ,                  public\n,                   :: sample => simpleVelocityDistribution3d_sample Function type, public :: t_VelocityDistribution1d Type-Bound Procedures procedure\n(distribution1d_sample)                    ,                  public\n                  :: sample type, public :: t_VelocityDistribution3d Type-Bound Procedures procedure\n(distribution3d_sample)                    ,                  public\n                  :: sample Functions public  function new_NoVelocityDistribution3d () result(obj) Arguments None Return Value type( t_NoVelocityDistribution3d ) public  function new_SimpleVelocityDistribution3d (distribution_x, distribution_y, distribution_z) result(obj) Arguments Type Intent Optional Attributes Name class( t_VelocityDistribution1d ), intent(in) :: distribution_x class( t_VelocityDistribution1d ), intent(in) :: distribution_y class( t_VelocityDistribution1d ), intent(in) :: distribution_z Return Value type( t_SimpleVelocityDistribution3d ) public  function noVelocityDistribution3d_sample (self) result(ret) Arguments Type Intent Optional Attributes Name class( t_NoVelocityDistribution3d ), intent(in) :: self Return Value double precision, (3) public  function simpleVelocityDistribution3d_sample (self) result(ret) Arguments Type Intent Optional Attributes Name class( t_SimpleVelocityDistribution3d ), intent(in) :: self Return Value double precision, (3)","tags":"","loc":"module/m_velocity_distribution.html"},{"title":"m_no_position_distribution – ohhelp-pic-3d","text":"Uses m_position_distribution module~~m_no_position_distribution~~UsesGraph module~m_no_position_distribution m_no_position_distribution module~m_position_distribution m_position_distribution module~m_no_position_distribution->module~m_position_distribution Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_no_position_distribution~~UsedByGraph module~m_no_position_distribution m_no_position_distribution module~m_particle_injector_manager m_particle_injector_manager module~m_particle_injector_manager->module~m_no_position_distribution module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_no_position_distribution module~ohhelppic3d->module~m_particle_injector_manager program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_NoPositionDistribution3d Functions new_NoPositionDistribution3d Derived Types type, public, extends( t_PositionDistribution3d ) :: t_NoPositionDistribution3d Type-Bound Procedures procedure\n                    ,                  public\n,                   :: sample =>\n                    noPositionDistribution3d_sample Function procedure\n                    ,                  public\n,                   :: subdomain_ratio =>\n                    noPositionDistribution3d_subdomain_ratio Function Functions public  function new_NoPositionDistribution3d () result(obj) Arguments None Return Value type( t_NoPositionDistribution3d )","tags":"","loc":"module/m_no_position_distribution.html"},{"title":"m_position_distribution – ohhelp-pic-3d","text":"Used by module~~m_position_distribution~~UsedByGraph module~m_position_distribution m_position_distribution module~m_no_position_distribution m_no_position_distribution module~m_no_position_distribution->module~m_position_distribution module~m_particle_injector_manager m_particle_injector_manager module~m_particle_injector_manager->module~m_position_distribution module~m_particle_injector_manager->module~m_no_position_distribution module~m_particle_injector_with_distribution m_particle_injector_with_distribution module~m_particle_injector_manager->module~m_particle_injector_with_distribution module~m_position_random_uniform_distribution m_position_random_uniform_distribution module~m_particle_injector_manager->module~m_position_random_uniform_distribution module~m_particle_injector_with_distribution->module~m_position_distribution module~m_position_random_uniform_distribution->module~m_position_distribution module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_no_position_distribution module~ohhelppic3d->module~m_particle_injector_manager program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_PositionDistribution1d t_PositionDistribution3d t_SimplePositionDistribution3d Functions new_SimplePositionDistribution3d Derived Types type, public :: t_PositionDistribution1d Type-Bound Procedures procedure\n(distribution1d_sample)                    ,                  public\n                  :: sample procedure\n(distribution1d_subdomain_ratio)                    ,                  public\n                  :: subdomain_ratio type, public :: t_PositionDistribution3d Type-Bound Procedures procedure\n(distribution3d_sample)                    ,                  public\n                  :: sample procedure\n(distribution3d_subdomain_ratio)                    ,                  public\n                  :: subdomain_ratio type, public, extends( t_PositionDistribution3d ) :: t_SimplePositionDistribution3d Components Type Visibility Attributes Name Initial class( t_PositionDistribution1d ), public, allocatable :: distribution_x class( t_PositionDistribution1d ), public, allocatable :: distribution_y class( t_PositionDistribution1d ), public, allocatable :: distribution_z Type-Bound Procedures procedure\n                    ,                  public\n,                   :: sample =>\n                    simplePositionDistribution3d_sample Function procedure\n                    ,                  public\n,                   :: subdomain_ratio =>\n                    simplePositionDistribution3d_subdomain_ratio Function Functions public  function new_SimplePositionDistribution3d (distribution_x, distribution_y, distribution_z) result(obj) Arguments Type Intent Optional Attributes Name class( t_PositionDistribution1d ), intent(in) :: distribution_x class( t_PositionDistribution1d ), intent(in) :: distribution_y class( t_PositionDistribution1d ), intent(in) :: distribution_z Return Value type( t_SimplePositionDistribution3d )","tags":"","loc":"module/m_position_distribution.html"},{"title":"m_position_random_uniform_distribution – ohhelp-pic-3d","text":"Uses m_position_distribution m_random_generator module~~m_position_random_uniform_distribution~~UsesGraph module~m_position_random_uniform_distribution m_position_random_uniform_distribution module~m_position_distribution m_position_distribution module~m_position_random_uniform_distribution->module~m_position_distribution module~m_random_generator m_random_generator module~m_position_random_uniform_distribution->module~m_random_generator module~m_science_constants m_science_constants module~m_random_generator->module~m_science_constants Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_position_random_uniform_distribution~~UsedByGraph module~m_position_random_uniform_distribution m_position_random_uniform_distribution module~m_particle_injector_manager m_particle_injector_manager module~m_particle_injector_manager->module~m_position_random_uniform_distribution module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_particle_injector_manager program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_PositionRandomUniformDistribution1d Functions new_PositionRandomUniformDistribution1d Derived Types type, public, extends( t_PositionDistribution1d ) :: t_PositionRandomUniformDistribution1d Components Type Visibility Attributes Name Initial class( t_RandomGenerator ), public, pointer :: random_generator double precision, public :: range (2) Type-Bound Procedures procedure\n                    ,                  public\n,                   :: sample =>\n                    positionRandomUniformDistribution1d_sample Function procedure\n                    ,                  public\n,                   :: subdomain_ratio =>\n                    positionRandomUniformDistribution1d_subdomain_ratio Function Functions public  function new_PositionRandomUniformDistribution1d (range, random_generator) result(obj) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: range (2) class( t_RandomGenerator ), intent(in), pointer :: random_generator Return Value type( t_PositionRandomUniformDistribution1d )","tags":"","loc":"module/m_position_random_uniform_distribution.html"},{"title":"m_random_generator – ohhelp-pic-3d","text":"Uses m_science_constants module~~m_random_generator~~UsesGraph module~m_random_generator m_random_generator module~m_science_constants m_science_constants module~m_random_generator->module~m_science_constants Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_random_generator~~UsedByGraph module~m_random_generator m_random_generator module~m_maxwellian_velocity_distribution1d m_maxwellian_velocity_distribution1d module~m_maxwellian_velocity_distribution1d->module~m_random_generator module~m_particle_injector_manager m_particle_injector_manager module~m_particle_injector_manager->module~m_random_generator module~m_particle_injector_with_distribution m_particle_injector_with_distribution module~m_particle_injector_manager->module~m_particle_injector_with_distribution module~m_position_random_uniform_distribution m_position_random_uniform_distribution module~m_particle_injector_manager->module~m_position_random_uniform_distribution module~m_particle_injector_with_distribution->module~m_random_generator module~m_pcg_generator m_pcg_generator module~m_pcg_generator->module~m_random_generator module~m_position_random_uniform_distribution->module~m_random_generator module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_random_generator module~ohhelppic3d->module~m_particle_injector_manager module~ohhelppic3d->module~m_pcg_generator program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_RandomGenerator Derived Types type, public :: t_RandomGenerator Type-Bound Procedures procedure\n(randomGenerator_advance)                    ,                  public\n                  :: advance procedure\n                    ,                  public\n,                   :: normal =>\n                    randomGenerator_normal Function procedure\n(randomGenerator_rand)                    ,                  public\n                  :: rand procedure\n                    ,                  public\n,                   :: random_fix =>\n                    randomGenerator_random_fix Function","tags":"","loc":"module/m_random_generator.html"},{"title":"m_pcg_generator – ohhelp-pic-3d","text":"Uses m_pcg32 m_random_generator module~~m_pcg_generator~~UsesGraph module~m_pcg_generator m_pcg_generator module~m_pcg32 m_pcg32 module~m_pcg_generator->module~m_pcg32 module~m_random_generator m_random_generator module~m_pcg_generator->module~m_random_generator iso_c_binding iso_c_binding module~m_pcg32->iso_c_binding module~m_science_constants m_science_constants module~m_random_generator->module~m_science_constants Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_pcg_generator~~UsedByGraph module~m_pcg_generator m_pcg_generator module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_pcg_generator program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_PcgGenerator Functions new_PcgGenerator Derived Types type, public, extends( t_RandomGenerator ) :: t_PcgGenerator Components Type Visibility Attributes Name Initial type( pcg_state_setseq_64 ), public :: rng integer(kind=8), public :: seeds (2) Type-Bound Procedures procedure\n                    ,                  public\n,                   :: advance =>\n                    pcgGenerator_advance Subroutine procedure\n                    ,                  public\n,                   :: normal =>\n                    randomGenerator_normal Function procedure\n                    ,                  public\n,                   :: rand =>\n                    pcgGenerator_rand Function procedure\n                    ,                  public\n,                   :: random_fix =>\n                    randomGenerator_random_fix Function Functions public  function new_PcgGenerator (seeds) result(obj) Arguments Type Intent Optional Attributes Name integer(kind=8), intent(in) :: seeds (2) Return Value type( t_PcgGenerator )","tags":"","loc":"module/m_pcg_generator.html"},{"title":"m_pcg32 – ohhelp-pic-3d","text":"Uses iso_c_binding module~~m_pcg32~~UsesGraph module~m_pcg32 m_pcg32 iso_c_binding iso_c_binding module~m_pcg32->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_pcg32~~UsedByGraph module~m_pcg32 m_pcg32 module~m_pcg_generator m_pcg_generator module~m_pcg_generator->module~m_pcg32 module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_pcg_generator program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Interfaces pcg32_advance_r pcg32_random_double_r pcg32_srandom_r Derived Types pcg_state_setseq_64 Interfaces interface public  subroutine pcg32_advance_r(rng, delta) bind(c, name='pcg_setseq_64_advance_r') Arguments Type Intent Optional Attributes Name type( pcg_state_setseq_64 ) :: rng integer(kind=c_int64_t), intent(in), value :: delta interface public  function pcg32_random_double_r(rng) result(ret) bind(c) Arguments Type Intent Optional Attributes Name type( pcg_state_setseq_64 ) :: rng Return Value real(kind=c_double) interface public  subroutine pcg32_srandom_r(rng, state, initseq) bind(c, name='pcg_setseq_64_srandom_r') Arguments Type Intent Optional Attributes Name type( pcg_state_setseq_64 ) :: rng integer(kind=c_int64_t), intent(in), value :: state integer(kind=c_int64_t), intent(in), value :: initseq Derived Types type, public :: pcg_state_setseq_64 Components Type Visibility Attributes Name Initial integer(kind=c_int64_t), public :: inc integer(kind=c_int64_t), public :: state","tags":"","loc":"module/m_pcg32.html"},{"title":"m_field_boundary_type – ohhelp-pic-3d","text":"Used by module~~m_field_boundary_type~~UsedByGraph module~m_field_boundary_type m_field_boundary_type module~m_mpi_fftw3_solver m_mpi_fftw3_solver module~m_mpi_fftw3_solver->module~m_field_boundary_type module~m_poisson_solver m_poisson_solver module~m_poisson_solver->module~m_field_boundary_type module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_field_boundary_type module~ohhelppic3d->module~m_mpi_fftw3_solver module~ohhelppic3d->module~m_poisson_solver program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Variables Field_BoundaryType_Dirichlet Field_BoundaryType_Dirichlet_Neumann Field_BoundaryType_Neumann Field_BoundaryType_Neumann_Dirichlet Field_BoundaryType_Periodic Variables Type Visibility Attributes Name Initial integer, public, parameter :: Field_BoundaryType_Dirichlet = 1 Dirichlet boundary type. Example (Array of length n = g.e-g.s-1, Logical size = 2(n+1))\n D---- ---- --- ... --- ---- ----D\ng.s  +1   +2          -2   -1   g.e g: global range (s: start, e: end) *: Actual data element (required)\nD: Dirichlet boundary condition value (= 0) integer, public, parameter :: Field_BoundaryType_Dirichlet_Neumann = 3 Dirichlet(left) and Neumann(right) boundary type. (Not tested to work properly.) Example (Array of length n = g.e-g.s, Logical size = 2n)\n D---- ---- --- ... --- ---- ----*N\ng.s  +1   +2          -2   -1    g.e g: global range (s: start, e: end) *: Actual data element (required)\nD: Dirichlet boundary condition value (= 0)\nN: Neumann boundary condition value (= 0) integer, public, parameter :: Field_BoundaryType_Neumann = 2 Neumann boundary type. Example (Array of length n = g.e-g.s+1, Logical size = 2(n-1)) N---- ---- --- ... --- ----- ---- N\n g.s  +1   +2          -2    -1   g.e g: global range (s: start, e: end) *: Actual data element (required)\nN: Neumann boundary condition value (= 0) integer, public, parameter :: Field_BoundaryType_Neumann_Dirichlet = 4 Neumann(left) and Dirichlet(right) boundary type. (Not tested to work properly.) Example (Array of length n = g.e-g.s, Logical size = 2n) N---- ---- --- ... --- ----*----D\n g.s  +1   +2          -2   -1   g.e g: global range (s: start, e: end) *: Actual data element (required)\nD: Dirichlet boundary condition value (= 0)\nN: Neumann boundary condition value (= 0) integer, public, parameter :: Field_BoundaryType_Periodic = 0 Periodic boundary type. Example (Array of length n = g.e-g.s, Logical size = n) ---- ---- --- ... --- ----*----o\ng.s  +1   +2          -2   -1   g.e(=g.s) g: global range (s: start, e: end) *: Actual data element (required)\no: Actual data element (not required)","tags":"","loc":"module/m_field_boundary_type.html"},{"title":"m_poisson_solver – ohhelp-pic-3d","text":"Uses m_field_boundary_type m_ohhelp m_ohfield m_get_default m_mpi_fft_solver m_field_solver m_science_constants m_block module~~m_poisson_solver~~UsesGraph module~m_poisson_solver m_poisson_solver m_get_default m_get_default module~m_poisson_solver->m_get_default module~m_block m_block module~m_poisson_solver->module~m_block module~m_field_boundary_type m_field_boundary_type module~m_poisson_solver->module~m_field_boundary_type module~m_field_solver m_field_solver module~m_poisson_solver->module~m_field_solver module~m_mpi_fft_solver m_mpi_fft_solver module~m_poisson_solver->module~m_mpi_fft_solver module~m_ohfield m_ohfield module~m_poisson_solver->module~m_ohfield module~m_ohhelp m_ohhelp module~m_poisson_solver->module~m_ohhelp module~m_science_constants m_science_constants module~m_poisson_solver->module~m_science_constants module~m_field_solver->module~m_ohfield module~m_field_solver->module~m_ohhelp module~m_mpi_fft_solver->module~m_block module~m_ohhelp->module~m_ohfield module~m_ohparticles m_ohparticles module~m_ohhelp->module~m_ohparticles oh_type oh_type module~m_ohhelp->oh_type ohhelp2 ohhelp2 module~m_ohhelp->ohhelp2 ohhelp3 ohhelp3 module~m_ohhelp->ohhelp3 module~m_ohparticles->oh_type module~m_ohparticles->ohhelp2 Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_poisson_solver~~UsedByGraph module~m_poisson_solver m_poisson_solver module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_poisson_solver program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_PoissonSolver3d Functions new_PoissonSolver3d Derived Types type, public, extends( t_FieldSolver ) :: t_PoissonSolver3d 3d poisson equation solver. Read more… Components Type Visibility Attributes Name Initial type( t_Block ), public :: global_block type( t_Block ), public :: local_block Type-Bound Procedures procedure\n                    ,                  public\n,                   :: solve =>\n                    poissonSolver3d_solve Subroutine Functions public  function new_PoissonSolver3d (local_block, global_block, fft3d, boundary_values) result(obj) Arguments Type Intent Optional Attributes Name type( t_Block ), intent(in) :: local_block type( t_Block ), intent(in) :: global_block class( t_MPIFFTSolver3d ), intent(in), pointer :: fft3d double precision, intent(in), optional :: boundary_values (2,3) Return Value type( t_PoissonSolver3d )","tags":"","loc":"module/m_poisson_solver.html"},{"title":"m_field_solver – ohhelp-pic-3d","text":"Uses m_ohfield m_ohhelp module~~m_field_solver~~UsesGraph module~m_field_solver m_field_solver module~m_ohfield m_ohfield module~m_field_solver->module~m_ohfield module~m_ohhelp m_ohhelp module~m_field_solver->module~m_ohhelp module~m_ohhelp->module~m_ohfield module~m_ohparticles m_ohparticles module~m_ohhelp->module~m_ohparticles oh_type oh_type module~m_ohhelp->oh_type ohhelp2 ohhelp2 module~m_ohhelp->ohhelp2 ohhelp3 ohhelp3 module~m_ohhelp->ohhelp3 module~m_ohparticles->oh_type module~m_ohparticles->ohhelp2 Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_field_solver~~UsedByGraph module~m_field_solver m_field_solver module~m_poisson_solver m_poisson_solver module~m_poisson_solver->module~m_field_solver module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_field_solver module~ohhelppic3d->module~m_poisson_solver program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_FieldSolver Derived Types type, public :: t_FieldSolver Type-Bound Procedures procedure\n(fieldSolver_solve)                    ,                  public\n                  :: solve","tags":"","loc":"module/m_field_solver.html"},{"title":"m_mpi_fft_solver – ohhelp-pic-3d","text":"Uses m_block module~~m_mpi_fft_solver~~UsesGraph module~m_mpi_fft_solver m_mpi_fft_solver module~m_block m_block module~m_mpi_fft_solver->module~m_block Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_mpi_fft_solver~~UsedByGraph module~m_mpi_fft_solver m_mpi_fft_solver module~m_mpi_fftw3_solver m_mpi_fftw3_solver module~m_mpi_fftw3_solver->module~m_mpi_fft_solver module~m_poisson_solver m_poisson_solver module~m_poisson_solver->module~m_mpi_fft_solver module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_mpi_fft_solver module~ohhelppic3d->module~m_mpi_fftw3_solver module~ohhelppic3d->module~m_poisson_solver program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_MPIFFTSolver3d Derived Types type, public :: t_MPIFFTSolver3d Components Type Visibility Attributes Name Initial integer, public :: boundary_types (3) type( t_Block ), public :: global_block type( t_Block ), public :: local_block type( t_Block ), public :: logical_block Type-Bound Procedures procedure\n(mpiFFTSolver3d_backward)                    ,                  public\n                  :: backward procedure\n(mpiFFTSolver3d_forward)                    ,                  public\n                  :: forward","tags":"","loc":"module/m_mpi_fft_solver.html"},{"title":"m_mpi_fftw3_solver – ohhelp-pic-3d","text":"Uses m_field_boundary_type m_mpi_block_rebaser mpi m_mpi_fft_solver m_fftw3_mpi m_block module~~m_mpi_fftw3_solver~~UsesGraph module~m_mpi_fftw3_solver m_mpi_fftw3_solver m_fftw3_mpi m_fftw3_mpi module~m_mpi_fftw3_solver->m_fftw3_mpi module~m_block m_block module~m_mpi_fftw3_solver->module~m_block module~m_field_boundary_type m_field_boundary_type module~m_mpi_fftw3_solver->module~m_field_boundary_type module~m_mpi_block_rebaser m_mpi_block_rebaser module~m_mpi_fftw3_solver->module~m_mpi_block_rebaser module~m_mpi_fft_solver m_mpi_fft_solver module~m_mpi_fftw3_solver->module~m_mpi_fft_solver mpi mpi module~m_mpi_fftw3_solver->mpi module~m_mpi_block_rebaser->module~m_block module~m_mpi_block_rebaser->mpi m_get_default m_get_default module~m_mpi_block_rebaser->m_get_default module~m_block_communicator m_block_communicator module~m_mpi_block_rebaser->module~m_block_communicator module~m_block_communicator_list m_block_communicator_list module~m_mpi_block_rebaser->module~m_block_communicator_list module~m_block_list m_block_list module~m_mpi_block_rebaser->module~m_block_list module~m_mpi_fft_solver->module~m_block module~m_block_communicator->module~m_block module~m_block_communicator->mpi module~m_block_communicator_list->module~m_block_communicator m_list m_list module~m_block_communicator_list->m_list module~m_block_list->module~m_block module~m_block_list->m_list Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_mpi_fftw3_solver~~UsedByGraph module~m_mpi_fftw3_solver m_mpi_fftw3_solver module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_mpi_fftw3_solver program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Functions new_MPIFFTW3Solver3d Functions public  function new_MPIFFTW3Solver3d (fft_boundary_types, local_block, global_block, myid, nprocs, communicator, tag) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: fft_boundary_types (3) type( t_Block ), intent(in) :: local_block Block that the local process has.\nglobal index 座標系は1:nx type( t_Block ), intent(in) :: global_block integer, intent(in) :: myid integer, intent(in) :: nprocs integer, intent(in) :: communicator integer, intent(in) :: tag Return Value type(t_MPIFFTW3Solver3d)","tags":"","loc":"module/m_mpi_fftw3_solver.html"},{"title":"m_block_communicator_list – ohhelp-pic-3d","text":"Uses m_list m_block_communicator module~~m_block_communicator_list~~UsesGraph module~m_block_communicator_list m_block_communicator_list m_list m_list module~m_block_communicator_list->m_list module~m_block_communicator m_block_communicator module~m_block_communicator_list->module~m_block_communicator module~m_block m_block module~m_block_communicator->module~m_block mpi mpi module~m_block_communicator->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_block_communicator_list~~UsedByGraph module~m_block_communicator_list m_block_communicator_list module~m_mpi_block_rebaser m_mpi_block_rebaser module~m_mpi_block_rebaser->module~m_block_communicator_list module~m_mpi_fftw3_solver m_mpi_fftw3_solver module~m_mpi_fftw3_solver->module~m_mpi_block_rebaser module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_mpi_fftw3_solver program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_BlockCommunicatorList Functions new_BlockCommunicatorList Derived Types type, public, extends(t_List) :: t_BlockCommunicatorList Components Type Visibility Attributes Name Initial type( t_BlockCommunicator ), public, allocatable :: buffer (:) type( t_BlockCommunicator ), public, allocatable :: tmp_buffer (:) Type-Bound Procedures procedure\n                    ,                  public\n,                   :: allocate_tmp_buffer =>\n                    blockSendReceiverList_allocate_tmp_buffer Subroutine procedure\n                    ,                  public\n,                   :: append =>\n                    blockSendReceiverList_append Subroutine procedure\n                    ,                  public\n,                   :: copy_to_tmp_buffer =>\n                    blockSendReceiverList_copy_to_tmp_buffer Subroutine procedure\n                    ,                  public\n,                   :: destroy =>\n                    blockSendReceiverList_destroy Subroutine procedure\n                    ,                  public\n,                   :: get =>\n                    blockSendReceiverList_get Function procedure\n                    ,                  public\n,                   :: switch_to_tmp_buffer =>\n                    blockSendReceiverList_switch_to_tmp_buffer Subroutine Functions public  function new_BlockCommunicatorList (max_size, growth_factor) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: max_size double precision, intent(in), optional :: growth_factor Return Value type( t_BlockCommunicatorList )","tags":"","loc":"module/m_block_communicator_list.html"},{"title":"m_block – ohhelp-pic-3d","text":"Used by module~~m_block~~UsedByGraph module~m_block m_block module~m_block_communicator m_block_communicator module~m_block_communicator->module~m_block module~m_block_list m_block_list module~m_block_list->module~m_block module~m_mpi_block_rebaser m_mpi_block_rebaser module~m_mpi_block_rebaser->module~m_block module~m_mpi_block_rebaser->module~m_block_communicator module~m_mpi_block_rebaser->module~m_block_list module~m_block_communicator_list m_block_communicator_list module~m_mpi_block_rebaser->module~m_block_communicator_list module~m_mpi_fft_solver m_mpi_fft_solver module~m_mpi_fft_solver->module~m_block module~m_mpi_fftw3_solver m_mpi_fftw3_solver module~m_mpi_fftw3_solver->module~m_block module~m_mpi_fftw3_solver->module~m_mpi_block_rebaser module~m_mpi_fftw3_solver->module~m_mpi_fft_solver module~m_poisson_solver m_poisson_solver module~m_poisson_solver->module~m_block module~m_poisson_solver->module~m_mpi_fft_solver module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_block module~ohhelppic3d->module~m_mpi_fft_solver module~ohhelppic3d->module~m_mpi_fftw3_solver module~ohhelppic3d->module~m_poisson_solver module~m_block_communicator_list->module~m_block_communicator program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Variables SIZE_OF_BLOCK_ARRAY Derived Types t_Block Functions new_Block Variables Type Visibility Attributes Name Initial integer, public, parameter :: SIZE_OF_BLOCK_ARRAY = 6 Derived Types type, public :: t_Block Components Type Visibility Attributes Name Initial integer, public :: end (3) integer, public :: sizes (3) integer, public :: start (3) Type-Bound Procedures procedure\n                    ,                  public\n,                   :: from_array =>\n                    block_from_array Subroutine procedure\n                    ,                  public\n,                   :: overlapped =>\n                    block_overlapped Function procedure\n                    ,                  public\n,                   :: size =>\n                    block_size Function procedure\n                    ,                  public\n,                   :: to_array =>\n                    block_to_array Subroutine Functions public  function new_Block (start, end) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in) :: start (3) integer, intent(in) :: end (3) Return Value type( t_Block )","tags":"","loc":"module/m_block.html"},{"title":"m_block_communicator – ohhelp-pic-3d","text":"Uses mpi m_block module~~m_block_communicator~~UsesGraph module~m_block_communicator m_block_communicator module~m_block m_block module~m_block_communicator->module~m_block mpi mpi module~m_block_communicator->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_block_communicator~~UsedByGraph module~m_block_communicator m_block_communicator module~m_block_communicator_list m_block_communicator_list module~m_block_communicator_list->module~m_block_communicator module~m_mpi_block_rebaser m_mpi_block_rebaser module~m_mpi_block_rebaser->module~m_block_communicator module~m_mpi_block_rebaser->module~m_block_communicator_list module~m_mpi_fftw3_solver m_mpi_fftw3_solver module~m_mpi_fftw3_solver->module~m_mpi_block_rebaser module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_mpi_fftw3_solver program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_BlockCommunicator Functions new_BlockCommunicator Derived Types type, public :: t_BlockCommunicator Components Type Visibility Attributes Name Initial integer(kind=kind(MPI_COMM_WORLD)), public :: comm type( t_Block ), public :: comm_block type( t_Block ), public :: local_block integer, public :: mpi_type integer, public :: pid Type-Bound Procedures procedure\n                    ,                  public\n,                   :: destroy =>\n                    blockCommunicator_destroy Subroutine procedure\n                    ,                  public\n,                   :: irecv =>\n                    blockCommunicator_irecv Subroutine procedure\n                    ,                  public\n,                   :: isend =>\n                    blockCommunicator_isend Subroutine Functions public  function new_BlockCommunicator (local_block, comm_block, pid, comm) result(obj) Arguments Type Intent Optional Attributes Name type( t_Block ), intent(in) :: local_block Locally allocated block. type( t_Block ), intent(in) :: comm_block Block used for communication. integer, intent(in) :: pid integer(kind=kind(MPI_COMM_WORLD)), intent(in) :: comm Return Value type( t_BlockCommunicator )","tags":"","loc":"module/m_block_communicator.html"},{"title":"m_mpi_block_rebaser – ohhelp-pic-3d","text":"Uses m_block_communicator_list m_block_list mpi m_get_default m_block_communicator m_block module~~m_mpi_block_rebaser~~UsesGraph module~m_mpi_block_rebaser m_mpi_block_rebaser m_get_default m_get_default module~m_mpi_block_rebaser->m_get_default module~m_block m_block module~m_mpi_block_rebaser->module~m_block module~m_block_communicator m_block_communicator module~m_mpi_block_rebaser->module~m_block_communicator module~m_block_communicator_list m_block_communicator_list module~m_mpi_block_rebaser->module~m_block_communicator_list module~m_block_list m_block_list module~m_mpi_block_rebaser->module~m_block_list mpi mpi module~m_mpi_block_rebaser->mpi module~m_block_communicator->module~m_block module~m_block_communicator->mpi module~m_block_communicator_list->module~m_block_communicator m_list m_list module~m_block_communicator_list->m_list module~m_block_list->module~m_block module~m_block_list->m_list Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_mpi_block_rebaser~~UsedByGraph module~m_mpi_block_rebaser m_mpi_block_rebaser module~m_mpi_fftw3_solver m_mpi_fftw3_solver module~m_mpi_fftw3_solver->module~m_mpi_block_rebaser module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_mpi_fftw3_solver program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Interfaces new_MPIBlockRebaser Derived Types t_MPIBlockRebaser Interfaces public        interface new_MPIBlockRebaser private  function new_MPIBlockRebaser_with_blocks(local_blocks, require_blocks, pids, ipid, comm) result(obj) Arguments Type Intent Optional Attributes Name type( t_BlockList ), intent(in) :: local_blocks Blocks that each process has. type( t_BlockList ), intent(in) :: require_blocks Blocks that each process requires. integer, intent(in) :: pids (:) Array of process ID (= rank = 0, 1, 2, ..., nproc-1).\nIt should be the same as the order of blocks and require_blocks. integer, intent(in) :: ipid Index to identify the current process ID from pids(1:len(pids)). integer(kind=kind(MPI_COMM_WORLD)), intent(in) :: comm MPI Communicator. Return Value type( t_MPIBlockRebaser ) private  function new_MPIBlockRebaser_with_local_block(local_block, require_block, pids, ipid, comm, tag) result(obj) Arguments Type Intent Optional Attributes Name type( t_Block ), intent(in) :: local_block Blocks that each process has. type( t_Block ), intent(in) :: require_block Blocks that each process requires. integer, intent(in) :: pids (:) Array of process ID (= rank = 0, 1, 2, ..., nproc-1).\nIt should be the same as the order of blocks and require_blocks. integer, intent(in) :: ipid Index to identify the current process ID from pids(1:len(pids)). integer(kind=kind(MPI_COMM_WORLD)), intent(in) :: comm MPI Communicator. integer, intent(in), optional :: tag Return Value type( t_MPIBlockRebaser ) Derived Types type, public :: t_MPIBlockRebaser Components Type Visibility Attributes Name Initial integer, public :: ipid type( t_Block ), public :: local_block Block that local process has. integer, public, allocatable :: pids (:) type( t_Block ), public :: require_block Block that local process requires. Type-Bound Procedures procedure\n                    ,                  public\n,                   :: destroy =>\n                    mpiBlockRebaser_destroy Subroutine procedure\n                    ,                  public\n,                   :: rebase =>\n                    mpiBlockRebaser_rebase Subroutine","tags":"","loc":"module/m_mpi_block_rebaser.html"},{"title":"m_block_list – ohhelp-pic-3d","text":"Uses m_block m_list module~~m_block_list~~UsesGraph module~m_block_list m_block_list m_list m_list module~m_block_list->m_list module~m_block m_block module~m_block_list->module~m_block Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_block_list~~UsedByGraph module~m_block_list m_block_list module~m_mpi_block_rebaser m_mpi_block_rebaser module~m_mpi_block_rebaser->module~m_block_list module~m_mpi_fftw3_solver m_mpi_fftw3_solver module~m_mpi_fftw3_solver->module~m_mpi_block_rebaser module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_mpi_fftw3_solver program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_BlockList Functions new_BlockList Derived Types type, public, extends(t_List) :: t_BlockList Components Type Visibility Attributes Name Initial type( t_Block ), public, allocatable :: buffer (:) type( t_Block ), public, allocatable :: tmp_buffer (:) Type-Bound Procedures procedure\n                    ,                  public\n,                   :: allocate_tmp_buffer =>\n                    blockList_allocate_tmp_buffer Subroutine procedure\n                    ,                  public\n,                   :: append =>\n                    blockList_append Subroutine procedure\n                    ,                  public\n,                   :: copy_to_tmp_buffer =>\n                    blockList_copy_to_tmp_buffer Subroutine procedure\n                    ,                  public\n,                   :: destroy =>\n                    blockList_destroy Subroutine procedure\n                    ,                  public\n,                   :: get =>\n                    blockList_get Function procedure\n                    ,                  public\n,                   :: switch_to_tmp_buffer =>\n                    blockList_switch_to_tmp_buffer Subroutine Functions public  function new_BlockList (max_size, growth_factor) result(obj) Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: max_size double precision, intent(in), optional :: growth_factor Return Value type( t_BlockList )","tags":"","loc":"module/m_block_list.html"},{"title":"m_linear_scatter – ohhelp-pic-3d","text":"Uses oh_type m_ohfield m_scatter module~~m_linear_scatter~~UsesGraph module~m_linear_scatter m_linear_scatter module~m_ohfield m_ohfield module~m_linear_scatter->module~m_ohfield module~m_scatter m_scatter module~m_linear_scatter->module~m_scatter oh_type oh_type module~m_linear_scatter->oh_type module~m_scatter->module~m_ohfield module~m_scatter->oh_type Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_linear_scatter~~UsedByGraph module~m_linear_scatter m_linear_scatter module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_linear_scatter program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_LinearScatter Functions new_LinearScatter Derived Types type, public, extends( t_Scatter ) :: t_LinearScatter Type-Bound Procedures procedure\n                    ,                  public\n,                   :: scatter =>\n                    linearScatter_scatter Subroutine Functions public  function new_LinearScatter () result(obj) Arguments None Return Value type( t_LinearScatter )","tags":"","loc":"module/m_linear_scatter.html"},{"title":"m_scatter – ohhelp-pic-3d","text":"Uses m_ohfield oh_type module~~m_scatter~~UsesGraph module~m_scatter m_scatter module~m_ohfield m_ohfield module~m_scatter->module~m_ohfield oh_type oh_type module~m_scatter->oh_type Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_scatter~~UsedByGraph module~m_scatter m_scatter module~m_linear_scatter m_linear_scatter module~m_linear_scatter->module~m_scatter module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_scatter module~ohhelppic3d->module~m_linear_scatter program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_Scatter Derived Types type, public :: t_Scatter Type-Bound Procedures procedure\n(scatter_scatter)                    ,                  public\n                  :: scatter","tags":"","loc":"module/m_scatter.html"},{"title":"m_interpolator – ohhelp-pic-3d","text":"Uses m_ohfield oh_type module~~m_interpolator~~UsesGraph module~m_interpolator m_interpolator module~m_ohfield m_ohfield module~m_interpolator->module~m_ohfield oh_type oh_type module~m_interpolator->oh_type Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_interpolator~~UsedByGraph module~m_interpolator m_interpolator module~m_linear_interpolator m_linear_interpolator module~m_linear_interpolator->module~m_interpolator module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_interpolator module~ohhelppic3d->module~m_linear_interpolator program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_Interpolator Derived Types type, public :: t_Interpolator Type-Bound Procedures procedure\n(interpolator_interp)                    ,                  public\n                  :: interp","tags":"","loc":"module/m_interpolator.html"},{"title":"m_linear_interpolator – ohhelp-pic-3d","text":"Uses oh_type m_ohfield m_interpolator module~~m_linear_interpolator~~UsesGraph module~m_linear_interpolator m_linear_interpolator module~m_interpolator m_interpolator module~m_linear_interpolator->module~m_interpolator module~m_ohfield m_ohfield module~m_linear_interpolator->module~m_ohfield oh_type oh_type module~m_linear_interpolator->oh_type module~m_interpolator->module~m_ohfield module~m_interpolator->oh_type Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~m_linear_interpolator~~UsedByGraph module~m_linear_interpolator m_linear_interpolator module~ohhelppic3d ohhelppic3d module~ohhelppic3d->module~m_linear_interpolator program~main main program~main->module~ohhelppic3d Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Derived Types t_LinearInterpolator Functions new_LinearInterpolator Derived Types type, public, extends( t_Interpolator ) :: t_LinearInterpolator Type-Bound Procedures procedure\n                    ,                  public\n,                   :: interp =>\n                    linearInterpolator_interp Function Functions public  function new_LinearInterpolator () result(obj) Arguments None Return Value type( t_LinearInterpolator )","tags":"","loc":"module/m_linear_interpolator.html"},{"title":"main – ohhelp-pic-3d","text":"Uses mpi ohhelppic3d program~~main~~UsesGraph program~main main module~ohhelppic3d ohhelppic3d program~main->module~ohhelppic3d mpi mpi program~main->mpi module~ohhelppic3d->mpi iso_fortran_env iso_fortran_env module~ohhelppic3d->iso_fortran_env m_str m_str module~ohhelppic3d->m_str module~m_block m_block module~ohhelppic3d->module~m_block module~m_domain m_domain module~ohhelppic3d->module~m_domain module~m_field_boundary_type m_field_boundary_type module~ohhelppic3d->module~m_field_boundary_type module~m_field_solver m_field_solver module~ohhelppic3d->module~m_field_solver module~m_hdf5 m_hdf5 module~ohhelppic3d->module~m_hdf5 module~m_hdf5_for_ohfield m_hdf5_for_ohfield module~ohhelppic3d->module~m_hdf5_for_ohfield module~m_interpolator m_interpolator module~ohhelppic3d->module~m_interpolator module~m_linear_interpolator m_linear_interpolator module~ohhelppic3d->module~m_linear_interpolator module~m_linear_scatter m_linear_scatter module~ohhelppic3d->module~m_linear_scatter module~m_mpi_fft_solver m_mpi_fft_solver module~ohhelppic3d->module~m_mpi_fft_solver module~m_mpi_fftw3_solver m_mpi_fftw3_solver module~ohhelppic3d->module~m_mpi_fftw3_solver module~m_no_position_distribution m_no_position_distribution module~ohhelppic3d->module~m_no_position_distribution module~m_ohfield m_ohfield module~ohhelppic3d->module~m_ohfield module~m_ohfield_factory m_ohfield_factory module~ohhelppic3d->module~m_ohfield_factory module~m_ohhelp m_ohhelp module~ohhelppic3d->module~m_ohhelp module~m_ohparticles m_ohparticles module~ohhelppic3d->module~m_ohparticles module~m_parameters m_parameters module~ohhelppic3d->module~m_parameters module~m_particle_boundaries m_particle_boundaries module~ohhelppic3d->module~m_particle_boundaries module~m_particle_injector_manager m_particle_injector_manager module~ohhelppic3d->module~m_particle_injector_manager module~m_particle_mover m_particle_mover module~ohhelppic3d->module~m_particle_mover module~m_particle_mover_factory m_particle_mover_factory module~ohhelppic3d->module~m_particle_mover_factory module~m_pcg_generator m_pcg_generator module~ohhelppic3d->module~m_pcg_generator module~m_poisson_solver m_poisson_solver module~ohhelppic3d->module~m_poisson_solver module~m_random_generator m_random_generator module~ohhelppic3d->module~m_random_generator module~m_scatter m_scatter module~ohhelppic3d->module~m_scatter module~m_velocity_distribution m_velocity_distribution module~ohhelppic3d->module~m_velocity_distribution oh_type oh_type module~ohhelppic3d->oh_type module~m_field_solver->module~m_ohfield module~m_field_solver->module~m_ohhelp module~m_hdf5->mpi module~m_hdf5->module~m_domain HDF5 HDF5 module~m_hdf5->HDF5 module~m_hdf5_for_ohfield->module~m_domain module~m_hdf5_for_ohfield->module~m_hdf5 module~m_hdf5_for_ohfield->module~m_ohfield module~m_interpolator->module~m_ohfield module~m_interpolator->oh_type module~m_linear_interpolator->module~m_interpolator module~m_linear_interpolator->module~m_ohfield module~m_linear_interpolator->oh_type module~m_linear_scatter->module~m_ohfield module~m_linear_scatter->module~m_scatter module~m_linear_scatter->oh_type module~m_mpi_fft_solver->module~m_block module~m_mpi_fftw3_solver->mpi module~m_mpi_fftw3_solver->module~m_block module~m_mpi_fftw3_solver->module~m_field_boundary_type module~m_mpi_fftw3_solver->module~m_mpi_fft_solver m_fftw3_mpi m_fftw3_mpi module~m_mpi_fftw3_solver->m_fftw3_mpi module~m_mpi_block_rebaser m_mpi_block_rebaser module~m_mpi_fftw3_solver->module~m_mpi_block_rebaser module~m_position_distribution m_position_distribution module~m_no_position_distribution->module~m_position_distribution module~m_ohfield_factory->module~m_ohfield module~m_ohhelp->module~m_ohfield module~m_ohhelp->module~m_ohparticles module~m_ohhelp->oh_type ohhelp2 ohhelp2 module~m_ohhelp->ohhelp2 ohhelp3 ohhelp3 module~m_ohhelp->ohhelp3 module~m_ohparticles->oh_type module~m_ohparticles->ohhelp2 module~m_science_constants m_science_constants module~m_parameters->module~m_science_constants module~m_toml_wrapper m_toml_wrapper module~m_parameters->module~m_toml_wrapper module~m_particle_boundaries->oh_type module~m_particle_boundary m_particle_boundary module~m_particle_boundaries->module~m_particle_boundary module~m_periodic_particle_boundary m_periodic_particle_boundary module~m_particle_boundaries->module~m_periodic_particle_boundary module~m_particle_injector_manager->module~m_no_position_distribution module~m_particle_injector_manager->module~m_ohhelp module~m_particle_injector_manager->module~m_parameters module~m_particle_injector_manager->module~m_random_generator module~m_particle_injector_manager->module~m_velocity_distribution module~m_maxwellian_distribution m_maxwellian_distribution module~m_particle_injector_manager->module~m_maxwellian_distribution module~m_no_particle_injector m_no_particle_injector module~m_particle_injector_manager->module~m_no_particle_injector module~m_particle_injector m_particle_injector module~m_particle_injector_manager->module~m_particle_injector module~m_particle_injector_with_distribution m_particle_injector_with_distribution module~m_particle_injector_manager->module~m_particle_injector_with_distribution module~m_particle_injector_manager->module~m_position_distribution module~m_position_random_uniform_distribution m_position_random_uniform_distribution module~m_particle_injector_manager->module~m_position_random_uniform_distribution module~m_particle_injector_manager->module~m_toml_wrapper module~m_particle_mover->oh_type module~m_particle_mover_factory->module~m_particle_mover module~m_particle_mover_boris m_particle_mover_boris module~m_particle_mover_factory->module~m_particle_mover_boris module~m_pcg_generator->module~m_random_generator module~m_pcg32 m_pcg32 module~m_pcg_generator->module~m_pcg32 module~m_poisson_solver->module~m_block module~m_poisson_solver->module~m_field_boundary_type module~m_poisson_solver->module~m_field_solver module~m_poisson_solver->module~m_mpi_fft_solver module~m_poisson_solver->module~m_ohfield module~m_poisson_solver->module~m_ohhelp m_get_default m_get_default module~m_poisson_solver->m_get_default module~m_poisson_solver->module~m_science_constants module~m_random_generator->module~m_science_constants module~m_scatter->module~m_ohfield module~m_scatter->oh_type module~m_maxwellian_distribution->module~m_velocity_distribution module~m_mpi_block_rebaser->mpi module~m_mpi_block_rebaser->module~m_block module~m_mpi_block_rebaser->m_get_default module~m_block_communicator m_block_communicator module~m_mpi_block_rebaser->module~m_block_communicator module~m_block_communicator_list m_block_communicator_list module~m_mpi_block_rebaser->module~m_block_communicator_list module~m_block_list m_block_list module~m_mpi_block_rebaser->module~m_block_list module~m_no_particle_injector->module~m_ohhelp module~m_no_particle_injector->module~m_particle_injector module~m_particle_boundary->oh_type module~m_particle_injector->module~m_ohhelp module~m_particle_injector_with_distribution->module~m_ohhelp module~m_particle_injector_with_distribution->module~m_random_generator module~m_particle_injector_with_distribution->module~m_velocity_distribution module~m_particle_injector_with_distribution->oh_type module~m_particle_injector_with_distribution->module~m_particle_injector module~m_particle_injector_with_distribution->module~m_position_distribution module~m_particle_mover_boris->module~m_particle_mover module~m_particle_mover_boris->oh_type m_vector m_vector module~m_particle_mover_boris->m_vector iso_c_binding iso_c_binding module~m_pcg32->iso_c_binding module~m_periodic_particle_boundary->oh_type module~m_periodic_particle_boundary->module~m_particle_boundary module~m_position_random_uniform_distribution->module~m_random_generator module~m_position_random_uniform_distribution->module~m_position_distribution module~m_toml_wrapper->mpi module~m_toml_wrapper->iso_fortran_env tomlf tomlf module~m_toml_wrapper->tomlf module~m_block_communicator->mpi module~m_block_communicator->module~m_block module~m_block_communicator_list->module~m_block_communicator m_list m_list module~m_block_communicator_list->m_list module~m_block_list->module~m_block module~m_block_list->m_list Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Calls program~~main~~CallsGraph program~main main proc~pic ohhelppic3d::pic program~main->proc~pic charge_per_macro_particle charge_per_macro_particle proc~pic->charge_per_macro_particle mpi_comm_rank mpi_comm_rank proc~pic->mpi_comm_rank mpi_comm_size mpi_comm_size proc~pic->mpi_comm_size mpi_finalize mpi_finalize proc~pic->mpi_finalize mpi_init mpi_init proc~pic->mpi_init proc~hdf5_finalize m_hdf5::hdf5_finalize proc~pic->proc~hdf5_finalize proc~hdf5_initialize m_hdf5::hdf5_initialize proc~pic->proc~hdf5_initialize proc~new_hdf5forohfield m_hdf5_for_ohfield::new_Hdf5ForOhfield proc~pic->proc~new_hdf5forohfield solve solve proc~pic->solve str str proc~pic->str values values proc~pic->values h5close_f h5close_f proc~hdf5_finalize->h5close_f h5eset_auto_f h5eset_auto_f proc~hdf5_initialize->h5eset_auto_f h5open_f h5open_f proc~hdf5_initialize->h5open_f proc~new_hdf5file m_hdf5::new_HDF5File proc~new_hdf5forohfield->proc~new_hdf5file h5fcreate_f h5fcreate_f proc~new_hdf5file->h5fcreate_f h5fopen_f h5fopen_f proc~new_hdf5file->h5fopen_f h5pclose_f h5pclose_f proc~new_hdf5file->h5pclose_f h5pcreate_f h5pcreate_f proc~new_hdf5file->h5pcreate_f h5pset_fapl_mpio_f h5pset_fapl_mpio_f proc~new_hdf5file->h5pset_fapl_mpio_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents Variables filename Source Code main Variables Type Attributes Name Initial character(len=*), parameter :: filename = 'example1.h5' Source Code program main use mpi use ohhelppic3d implicit none character ( * ), parameter :: filename = 'example1.h5' call pic end program main","tags":"","loc":"program/main.html"},{"title":"ohhelppic3d.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~ohhelppic3d.f90~~EfferentGraph sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~block.f90 block.f90 sourcefile~ohhelppic3d.f90->sourcefile~block.f90 sourcefile~domain.f90 domain.f90 sourcefile~ohhelppic3d.f90->sourcefile~domain.f90 sourcefile~field_boundary_type.f90 field_boundary_type.f90 sourcefile~ohhelppic3d.f90->sourcefile~field_boundary_type.f90 sourcefile~field_solver.f90 field_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~field_solver.f90 sourcefile~hdf5.f90 hdf5.f90 sourcefile~ohhelppic3d.f90->sourcefile~hdf5.f90 sourcefile~hdf5_for_ohfield.f90 hdf5_for_ohfield.f90 sourcefile~ohhelppic3d.f90->sourcefile~hdf5_for_ohfield.f90 sourcefile~interpolator.f90 interpolator.f90 sourcefile~ohhelppic3d.f90->sourcefile~interpolator.f90 sourcefile~linear_interpolator.f90 linear_interpolator.f90 sourcefile~ohhelppic3d.f90->sourcefile~linear_interpolator.f90 sourcefile~linear_scatter.f90 linear_scatter.f90 sourcefile~ohhelppic3d.f90->sourcefile~linear_scatter.f90 sourcefile~mpi_fft_solver.f90 mpi_fft_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~mpi_fft_solver.f90 sourcefile~mpi_fftw3_solver.f90 mpi_fftw3_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~mpi_fftw3_solver.f90 sourcefile~no_position_distribution.f90 no_position_distribution.f90 sourcefile~ohhelppic3d.f90->sourcefile~no_position_distribution.f90 sourcefile~ohfield.f90 ohfield.f90 sourcefile~ohhelppic3d.f90->sourcefile~ohfield.f90 sourcefile~ohfield_factory.f90 ohfield_factory.f90 sourcefile~ohhelppic3d.f90->sourcefile~ohfield_factory.f90 sourcefile~ohhelp.f90 ohhelp.f90 sourcefile~ohhelppic3d.f90->sourcefile~ohhelp.f90 sourcefile~ohparticles.f90 ohparticles.f90 sourcefile~ohhelppic3d.f90->sourcefile~ohparticles.f90 sourcefile~parameters.f90 parameters.f90 sourcefile~ohhelppic3d.f90->sourcefile~parameters.f90 sourcefile~particle_boundaries.f90 particle_boundaries.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_boundaries.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~particle_mover.f90 particle_mover.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_mover.f90 sourcefile~particle_mover_factory.f90 particle_mover_factory.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_mover_factory.f90 sourcefile~pcg_generator.f90 pcg_generator.f90 sourcefile~ohhelppic3d.f90->sourcefile~pcg_generator.f90 sourcefile~poisson_solver.f90 poisson_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~poisson_solver.f90 sourcefile~random_generator.f90 random_generator.f90 sourcefile~ohhelppic3d.f90->sourcefile~random_generator.f90 sourcefile~scatter.f90 scatter.f90 sourcefile~ohhelppic3d.f90->sourcefile~scatter.f90 sourcefile~velocity_distribution.f90 velocity_distribution.f90 sourcefile~ohhelppic3d.f90->sourcefile~velocity_distribution.f90 sourcefile~field_solver.f90->sourcefile~ohfield.f90 sourcefile~field_solver.f90->sourcefile~ohhelp.f90 sourcefile~hdf5.f90->sourcefile~domain.f90 sourcefile~hdf5_for_ohfield.f90->sourcefile~domain.f90 sourcefile~hdf5_for_ohfield.f90->sourcefile~hdf5.f90 sourcefile~hdf5_for_ohfield.f90->sourcefile~ohfield.f90 sourcefile~interpolator.f90->sourcefile~ohfield.f90 sourcefile~linear_interpolator.f90->sourcefile~interpolator.f90 sourcefile~linear_interpolator.f90->sourcefile~ohfield.f90 sourcefile~linear_scatter.f90->sourcefile~ohfield.f90 sourcefile~linear_scatter.f90->sourcefile~scatter.f90 sourcefile~mpi_fft_solver.f90->sourcefile~block.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~block.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~field_boundary_type.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~mpi_fft_solver.f90 sourcefile~mpi_block_rebaser.f90 mpi_block_rebaser.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~mpi_block_rebaser.f90 sourcefile~position_distribution.f90 position_distribution.f90 sourcefile~no_position_distribution.f90->sourcefile~position_distribution.f90 sourcefile~ohfield_factory.f90->sourcefile~ohfield.f90 sourcefile~ohhelp.f90->sourcefile~ohfield.f90 sourcefile~ohhelp.f90->sourcefile~ohparticles.f90 sourcefile~science_constants.f90 science_constants.f90 sourcefile~parameters.f90->sourcefile~science_constants.f90 sourcefile~toml_wrapper.f90 toml_wrapper.f90 sourcefile~parameters.f90->sourcefile~toml_wrapper.f90 sourcefile~particle_boundary.f90 particle_boundary.f90 sourcefile~particle_boundaries.f90->sourcefile~particle_boundary.f90 sourcefile~periodic_particle_boundary.f90 periodic_particle_boundary.f90 sourcefile~particle_boundaries.f90->sourcefile~periodic_particle_boundary.f90 sourcefile~particle_injector_manager.f90->sourcefile~no_position_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_manager.f90->sourcefile~parameters.f90 sourcefile~particle_injector_manager.f90->sourcefile~random_generator.f90 sourcefile~particle_injector_manager.f90->sourcefile~velocity_distribution.f90 sourcefile~no_particle_injector.f90 no_particle_injector.f90 sourcefile~particle_injector_manager.f90->sourcefile~no_particle_injector.f90 sourcefile~particle_injector.f90 particle_injector.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector.f90 sourcefile~particle_injector_with_distribution.f90 particle_injector_with_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector_with_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~position_distribution.f90 sourcefile~position_random_uniform_distribution.f90 position_random_uniform_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~position_random_uniform_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~toml_wrapper.f90 sourcefile~velocity_maxwell_distribution.f90 velocity_maxwell_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~velocity_maxwell_distribution.f90 sourcefile~particle_mover_factory.f90->sourcefile~particle_mover.f90 sourcefile~particle_mover_boris.f90 particle_mover_boris.f90 sourcefile~particle_mover_factory.f90->sourcefile~particle_mover_boris.f90 sourcefile~pcg_generator.f90->sourcefile~random_generator.f90 sourcefile~pcg64.f90 pcg64.f90 sourcefile~pcg_generator.f90->sourcefile~pcg64.f90 sourcefile~poisson_solver.f90->sourcefile~block.f90 sourcefile~poisson_solver.f90->sourcefile~field_boundary_type.f90 sourcefile~poisson_solver.f90->sourcefile~field_solver.f90 sourcefile~poisson_solver.f90->sourcefile~mpi_fft_solver.f90 sourcefile~poisson_solver.f90->sourcefile~ohfield.f90 sourcefile~poisson_solver.f90->sourcefile~ohhelp.f90 sourcefile~poisson_solver.f90->sourcefile~science_constants.f90 sourcefile~random_generator.f90->sourcefile~science_constants.f90 sourcefile~scatter.f90->sourcefile~ohfield.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block.f90 sourcefile~block_communicator.f90 block_communicator.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_communicator.f90 sourcefile~block_communicator_list.f90 block_communicator_list.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_communicator_list.f90 sourcefile~block_list.f90 block_list.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_list.f90 sourcefile~no_particle_injector.f90->sourcefile~ohhelp.f90 sourcefile~no_particle_injector.f90->sourcefile~particle_injector.f90 sourcefile~particle_injector.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~random_generator.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~velocity_distribution.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~particle_injector.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~position_distribution.f90 sourcefile~particle_mover_boris.f90->sourcefile~particle_mover.f90 sourcefile~periodic_particle_boundary.f90->sourcefile~particle_boundary.f90 sourcefile~position_random_uniform_distribution.f90->sourcefile~random_generator.f90 sourcefile~position_random_uniform_distribution.f90->sourcefile~position_distribution.f90 sourcefile~velocity_maxwell_distribution.f90->sourcefile~velocity_distribution.f90 sourcefile~block_communicator.f90->sourcefile~block.f90 sourcefile~block_communicator_list.f90->sourcefile~block_communicator.f90 sourcefile~block_list.f90->sourcefile~block.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~ohhelppic3d.f90~~AfferentGraph sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules ohhelppic3d Source Code ohhelppic3d.f90 Source Code module ohhelppic3d use mpi use m_ohhelp , only : t_OhHelp , new_OhHelp use , intrinsic :: iso_fortran_env , only : stderr => error_unit use m_ohfield_factory , only : t_OhFieldFactory , new_OhFieldFactory use m_ohfield , only : t_OhField , tp_OhField , & BOUNDARY_CONDITION_PERIODIC , & BOUNDARY_CONDITION_NO_PERIODIC use m_ohparticles , only : t_OhParticles , new_OhParticles use oh_type , only : oh_particle use m_hdf5 use m_particle_mover , only : t_ParticleMover use m_particle_mover_factory , only : t_ParticleMoverFactory , new_ParticleMoverFactory use m_parameters , only : t_Parameters , new_Parameters use m_particle_injector_manager , only : t_ParticleInjectorManager , new_ParticleInjectorManager use m_no_position_distribution , only : new_NoPositionDistribution3d use m_velocity_distribution , only : new_NoVelocityDistribution3d use m_interpolator , only : t_Interpolator use m_mpi_fft_solver , only : t_MPIFFTSolver3d use m_mpi_fftw3_solver , only : new_MPIFFTW3Solver3d use m_block , only : t_Block , new_Block use m_random_generator use m_pcg_generator use m_field_solver use m_poisson_solver use m_field_boundary_type use m_linear_interpolator use m_particle_boundaries use m_scatter use m_linear_scatter use m_str use m_hdf5_for_ohfield use m_domain implicit none private public pic !! Main Variables integer :: nprocs , myid type ( t_OhHelp ) :: ohhelp type ( t_OhParticles ) :: ohparticles integer :: pbase ( 3 ) type ( t_OhField ), target :: eb , aj , rho , phi class ( t_ParticleInjectorManager ), allocatable :: particle_injector_manager class ( t_ParticleMover ), allocatable :: particle_mover class ( t_MPIFFTSolver3d ), target , allocatable :: mpifft_solver3d class ( t_Interpolator ), allocatable :: interpolator type ( t_Parameters ) :: parameters class ( t_RandomGenerator ), allocatable , target :: random_generator character ( len = 15 ) :: toml_filepath = 'parameters.toml' class ( t_FieldSolver ), allocatable , target :: field_solver class ( t_ParticleBoundaries ), allocatable :: particle_boundaries class ( t_Scatter ), allocatable :: scatter class ( t_Hdf5ForOhfield ), allocatable :: hdf5_phi contains subroutine pic integer :: istep integer :: ierr call mpi_init ( ierr ) if ( ierr /= 0 ) error stop \"mpi_init failed\" call mpi_comm_size ( MPI_COMM_WORLD , nprocs , ierr ) call mpi_comm_rank ( MPI_COMM_WORLD , myid , ierr ) if ( ierr /= 0 ) error stop \"mpi_comm_rank failed\" print * , myid , '/' , nprocs call initialize call hdf5_initialize ( ierr ) rho % values (:, :, :, :, 1 ) = 0 if ( myid == 0 ) rho % values ( 1 , 2 , 2 , 3 , 1 ) = parameters % charge_per_macro_particle ( 1 ) * 10 call field_solver % solve ( rho , aj , eb , phi , ohhelp ) hdf5_phi = new_Hdf5ForOhfield ( 'phisp00_0000.h5' , 'phisp' , & int ([ parameters % nx + 1 , parameters % ny + 1 , parameters % nz + 1 ], kind = 8 ), & int ([ 0 , 0 , 0 ], kind = 8 ), & MPI_COMM_WORLD ) call hdf5_phi % write ( '0' , phi , 1 ) call hdf5_phi % close () stop do istep = 1 , parameters % nstep if ( myid == 0 . and . mod ( istep , parameters % stdout_interval_step ) == 0 ) then print * , '------ ' // str ( istep ) // ' -------' end if call mainstep ( parameters % dt ) call hdf5_phi % write ( str ( istep ), phi , 1 ) end do call hdf5_phi % close () call hdf5_finalize ( ierr ) call mpi_finalize ( ierr ) call finalize end subroutine subroutine initialize integer :: status parameters = new_Parameters ( toml_filepath ) random_generator = new_PcgGenerator ([ int ( 42 , kind = 8 ), int ( 52 , kind = 8 )]) call random_generator % advance ( myid * 100000000 ) ! Init ohfields block type ( t_OhFieldFactory ) :: ohfield_factory ohfield_factory = new_OhFieldFactory () eb = ohfield_factory % create_field ( 'electromagnetic' ) aj = ohfield_factory % create_field ( 'current' ) rho = ohfield_factory % create_field ( 'density' ) phi = ohfield_factory % create_field ( 'potential' ) end block ! Init ohparticles block integer ( kind = 8 ) :: pbuf_size ( parameters % nspecies ) integer :: nx , ny , nz nx = parameters % nx ; ny = parameters % ny ; nz = parameters % nz pbuf_size (:) = parameters % nmacro_particles_per_grid (:) & * parameters % particle_buffer_size (:) & * nx * ny * nz ohparticles = new_OhParticles ( parameters % nspecies , sum ( pbuf_size ), product ( parameters % nnodes )) end block ! new ohhelp block integer :: boundary_conditions ( 2 , 3 ) integer :: i integer :: ierr character ( len = :), allocatable :: name do i = 1 , 3 name = parameters % boundary_communication ( i )% string if ( name == 'periodic' ) then boundary_conditions (:, i ) = BOUNDARY_CONDITION_PERIODIC else if ( name == 'no_periodic' ) then boundary_conditions (:, i ) = BOUNDARY_CONDITION_NO_PERIODIC else write ( stderr , '(a)' ) 'Error: ' // 'system.outer_boundary.boundary_communication is invalid: ' // name call MPI_Abort ( MPI_COMM_WORLD , 1 , ierr ) stop 1 end if end do ohhelp = new_OhHelp ( parameters % nspecies , & parameters % nnodes , & parameters % nx , parameters % ny , parameters % nz , & boundary_conditions , & parameters % imbalance_tolerance_percentage ) end block ! Init ohhelp block type ( tp_OhField ) :: ohfields ( 4 ) ohfields ( 1 )% ref => eb ohfields ( 2 )% ref => aj ohfields ( 3 )% ref => rho ohfields ( 4 )% ref => phi call ohhelp % initialize ( ohparticles , ohfields ) end block ! Init particle injector block particle_injector_manager = new_ParticleInjectorManager ( parameters , random_generator ) call particle_injector_manager % initialize_particles ( ohhelp ) end block ! Correct load balancing block type ( tp_OhField ) :: ohfields ( 4 ) ohfields ( 1 )% ref => eb ohfields ( 2 )% ref => aj ohfields ( 3 )% ref => rho ohfields ( 4 )% ref => phi call ohhelp % correct_load_balancing ( ohparticles , eb , ohfields_to_be_notified = ohfields ) end block ! TODO: 粒子Scatterの実装 scatter = new_LinearScatter () block integer :: ps integer :: ispec , ipcl integer :: ipcl_start , ipcl_end double precision :: qm double precision :: eb_interped ( 6 ) integer :: eps if ( ohhelp % is_primary_mode ()) then eps = 1 else eps = 2 end if rho % values = 0 do ps = 1 , eps do ispec = 1 , ohparticles % nspecies ipcl_start = ohparticles % start_index ( ispec , ps ) ipcl_end = ohparticles % end_index ( ispec , ps ) do ipcl = ipcl_start , ipcl_end call scatter % scatter ( ohparticles % pbuf ( ipcl ), rho , [ parameters % charge_per_macro_particle ( ispec )], ps ) end do end do end do if ( ohhelp % is_secondary_mode ()) then call ohhelp % reduce_field ( rho ) end if call ohhelp % exchange_borders ( rho ) end block ! TODO: フィールドソルバーのテスト block integer :: fft_boundary_types ( 3 ) type ( t_Block ) :: local_block type ( t_Block ) :: global_block integer :: i do i = 1 , 3 select case ( parameters % boundary_type_for_electromagnetic_field ( i )% string ) case ( 'periodic' ) fft_boundary_types ( i ) = Field_BoundaryType_Periodic case ( 'dirichlet' ) fft_boundary_types ( i ) = Field_BoundaryType_Dirichlet case ( 'neumman' ) fft_boundary_types ( i ) = Field_BoundaryType_Neumann case ( 'dirichlet-neumman' ) fft_boundary_types ( i ) = Field_BoundaryType_Dirichlet_Neumann case ( 'neumman-dirichlet' ) fft_boundary_types ( i ) = Field_BoundaryType_Neumann_Dirichlet end select end do local_block = new_Block ( ohhelp % subdomain_range ( 1 , :, ohhelp % subdomain_id ( 1 ) + 1 ), & ohhelp % subdomain_range ( 2 , :, ohhelp % subdomain_id ( 1 ) + 1 )) global_block = new_Block ([ 0 , 0 , 0 ], [ parameters % nx , parameters % ny , parameters % nz ]) mpifft_solver3d = new_MPIFFTW3Solver3d ( fft_boundary_types , & local_block , & global_block , & myid , nprocs , & MPI_COMM_WORLD , tag = 10 ) field_solver = new_PoissonSolver3d ( local_block , global_block , mpifft_solver3d ) call field_solver % solve ( rho , aj , eb , phi , ohhelp ) end block block interpolator = new_LinearInterpolator () end block block type ( t_ParticleMoverFactory ) :: particle_mover_factory particle_mover_factory = new_ParticleMoverFactory () particle_mover = particle_mover_factory % create_particle_mover ( parameters % particle_mover_type ) particle_boundaries = new_ParticleBoundaries ( parameters % nx , parameters % ny , parameters % nz ) end block end subroutine subroutine mainstep ( dt ) double precision , intent ( in ) :: dt ! TODO: 粒子密度 or 電流の場への配分 block integer :: ps integer :: ispec , ipcl integer :: ipcl_start , ipcl_end double precision :: qm double precision :: eb_interped ( 6 ) integer :: eps if (. not . ohhelp % is_secondary_mode ()) then eps = 1 else eps = 2 end if do ps = 1 , eps do ispec = 1 , ohparticles % nspecies ipcl_start = ohparticles % start_index ( ispec , ps ) ipcl_end = ohparticles % end_index ( ispec , ps ) end do end do rho % values = 0 do ps = 1 , eps do ispec = 1 , ohparticles % nspecies ipcl_start = ohparticles % start_index ( ispec , ps ) ipcl_end = ohparticles % end_index ( ispec , ps ) do ipcl = ipcl_start , ipcl_end call scatter % scatter ( ohparticles % pbuf ( ipcl ), rho , [ parameters % charge_per_macro_particle ( ispec )], ps ) end do end do end do end block ! TODO: 場の更新 & 場のリロケート(self-forceの回避) call field_solver % solve ( rho , aj , eb , phi , ohhelp ) block integer :: ps integer :: ispec , ipcl integer :: ipcl_start , ipcl_end double precision :: qm double precision :: eb_interped ( 6 ) = 0 integer :: eps if ( ohhelp % is_primary_mode ()) then eps = 1 else eps = 2 end if do ps = 1 , eps do ispec = 1 , ohparticles % nspecies qm = parameters % charge_to_mass_ratio ( ispec ) ipcl_start = ohparticles % start_index ( ispec , ps ) ipcl_end = ohparticles % end_index ( ispec , ps ) do ipcl = ipcl_start , ipcl_end eb_interped (:) = interpolator % interp ( ohparticles % pbuf ( ipcl ), eb , ps ) call particle_mover % move ( ohparticles % pbuf ( ipcl ), qm , eb_interped , dt ) call ohhelp % correct_particle ( ohparticles % pbuf ( ipcl ), ps ) call particle_boundaries % apply ( ohparticles % pbuf ( ipcl ), dt ) call particle_boundaries % apply ( ohparticles % pbuf ( ipcl ), dt ) end do end do end do end block call particle_injector_manager % inject_particles ( dt , ohhelp ) block type ( tp_OhField ) :: ohfields ( 4 ) ohfields ( 1 )% ref => eb ohfields ( 2 )% ref => aj ohfields ( 3 )% ref => rho ohfields ( 4 )% ref => phi call ohhelp % correct_load_balancing ( ohparticles , eb , ohfields_to_be_notified = ohfields ) end block block integer :: ierr call MPI_Barrier ( MPI_COMM_WORLD , ierr ) end block ! TODO: スナップショットの出力 end subroutine subroutine finalize integer :: status end subroutine end module ohhelppic3d","tags":"","loc":"sourcefile/ohhelppic3d.f90.html"},{"title":"ohhelp.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~ohhelp.f90~~EfferentGraph sourcefile~ohhelp.f90 ohhelp.f90 sourcefile~ohfield.f90 ohfield.f90 sourcefile~ohhelp.f90->sourcefile~ohfield.f90 sourcefile~ohparticles.f90 ohparticles.f90 sourcefile~ohhelp.f90->sourcefile~ohparticles.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~ohhelp.f90~~AfferentGraph sourcefile~ohhelp.f90 ohhelp.f90 sourcefile~field_solver.f90 field_solver.f90 sourcefile~field_solver.f90->sourcefile~ohhelp.f90 sourcefile~no_particle_injector.f90 no_particle_injector.f90 sourcefile~no_particle_injector.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector.f90 particle_injector.f90 sourcefile~no_particle_injector.f90->sourcefile~particle_injector.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~ohhelp.f90 sourcefile~ohhelppic3d.f90->sourcefile~field_solver.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~poisson_solver.f90 poisson_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~poisson_solver.f90 sourcefile~particle_injector.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_manager.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_manager.f90->sourcefile~no_particle_injector.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector.f90 sourcefile~particle_injector_with_distribution.f90 particle_injector_with_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector_with_distribution.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~particle_injector.f90 sourcefile~poisson_solver.f90->sourcefile~ohhelp.f90 sourcefile~poisson_solver.f90->sourcefile~field_solver.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_ohhelp Source Code ohhelp.f90 Source Code #define OH_LIB_LEVEL 3 !> OhHelp Wrapper module. module m_ohhelp use ohhelp2 , only : oh2_max_local_particles , oh2_inject_particle use ohhelp3 , only : oh3_init , oh3_transbound , & oh3_map_particle_to_neighbor , & oh3_map_particle_to_subdomain , & oh3_bcast_field , oh3_exchange_borders , oh3_reduce_field use oh_type , only : oh_particle , oh_mycomm use m_ohparticles , only : t_OhParticles use m_ohfield , only : t_FieldExtensionInfo , new_FieldExtensionInfo , & tp_OhField , & t_BoundaryCommunicationInfo , new_BoundaryCommunicationInfo , & t_BoundaryCommunicationInfos , new_BoundaryCommunicationInfos , & t_OhField , new_OhField , & NBOUNDARY_CONDITION_TYPES , & BOUNDARY_CONDITION_PERIODIC , BOUNDARY_CONDITION_NO_PERIODIC implicit none !> Helpand-helper configuration in (re)build and in secondary mode (= -1). integer , parameter :: OHH_REQUIRES_BCAST = - 1 !> In primary mode (= 0). integer , parameter :: OHH_PRIMARY_MODE = 0 !> In secondary mode (= 1). integer , parameter :: OHH_SECONDARY_MODE = 1 private public t_OhHelp , new_OhHelp ! integer(kind=4), external :: oh2_max_local_particles ! integer(kind=4), external :: oh3_transbound ! integer(kind=4), external :: oh3_map_particle_to_neighbor ! integer(kind=4), external :: oh3_map_particle_to_subdomain type t_OhHelp integer :: subdomain_id ( 2 ) !> OHH_PRIMARY_MODE: primary mode, OHH_SECONDARY_MODE: secondary mode, OHH_REQUIRES_BCAST: requires bcast integer , private :: current_mode = 0 integer , private :: loadbalance_tolerance_percentage = 10 integer :: nspecies integer , allocatable :: particle_count_histgram (:, :, :) ! (nprocs, nspec, 2) type ( oh_mycomm ), private :: communicator integer :: neighber_subdomain_ids ( 3 , 3 , 3 ) integer , private :: process_coordinates ( 3 ) integer , allocatable :: subdomain_range (:, :, :) ! (2, 3, nprocs) integer , private :: whole_domain_range ( 2 , 3 ) integer , private :: nboundary_condition_types = NBOUNDARY_CONDITION_TYPES integer , private :: boundary_conditions ( 2 , 3 ) = 1 integer , allocatable , private :: subdomain_boundary_conditions (:, :, :) ! (nprocs, 3, 2) type ( t_FieldExtensionInfo ), allocatable , private :: field_extension_infos (:) ! (nextension + 1) type ( t_BoundaryCommunicationInfos ), allocatable , private :: boundary_communication_infos (:) integer , allocatable , private :: field_sizes (:, :, :) ! (2, 3, F) contains procedure :: initialize => ohhelp_initialize procedure :: allocate_ohfield => ohhelp_allocate_ohfield procedure :: correct_load_balancing => ohhelp_correct_load_balancing procedure :: transbound => ohhelp_transbound procedure :: requires_broadcast_field => ohhelp_requires_broadcast_field procedure :: broadcast_field => ohhelp_broadcast_field procedure :: reduce_field => ohhelp_reduce_field procedure :: exchange_borders => ohhelp_exchange_borders procedure :: is_primary_mode => ohhelp_is_primary_mode procedure :: is_secondary_mode => ohhelp_is_secondary_mode procedure , private :: set_field_extension_infos => ohhelp_set_field_extension_infos procedure , private :: set_boundary_communication_infos => ohhelp_set_boundary_communication_infos procedure :: notify_subdomain_range => ohhelp_notify_subdomain_range procedure :: inject_particle => ohhelp_inject_particle procedure :: correct_particle => ohhelp_correct_particle procedure :: map_subdomain_id => ohhelp_map_subdomain_id end type contains function new_OhHelp ( nspecies , nnodes , & nx , ny , nz , & boundary_conditions , & loadbalance_tolerance_percentage ) result ( obj ) integer , intent ( in ) :: nspecies integer , intent ( in ) :: nnodes ( 3 ) integer , intent ( in ) :: nx integer , intent ( in ) :: ny integer , intent ( in ) :: nz integer , intent ( in ) :: loadbalance_tolerance_percentage !> Boundary conditions. !> !>   boundary_conditions := !>     [[xlower, xupper], [ylower, yupper], [zlower, zupper]]. !> !>   [x/y/z][lower/upper] := !>     periodic boundary : BOUNDARY_CONDITION_PERIODIC !>         otherwise     : BOUNDARY_CONDITION_NO_PERIODIC) integer , intent ( in ) :: boundary_conditions ( 2 , 3 ) type ( t_OhHelp ) :: obj obj % nspecies = nspecies block integer :: nprocs nprocs = product ( nnodes ) allocate ( obj % subdomain_range ( 2 , 3 , nprocs )) allocate ( obj % subdomain_boundary_conditions ( 2 , 3 , nprocs )) allocate ( obj % particle_count_histgram ( nprocs , nspecies , 2 )) end block obj % process_coordinates (:) = nnodes (:) obj % whole_domain_range (:, :) = reshape ([ 0 , nx , 0 , ny , 0 , nz ], [ 2 , 3 ]) obj % boundary_conditions (:, :) = boundary_conditions (:, :) obj % loadbalance_tolerance_percentage = loadbalance_tolerance_percentage end function subroutine ohhelp_initialize ( self , ohparticles , ohfields ) class ( t_OhHelp ), intent ( inout ) :: self type ( t_OhParticles ), intent ( inout ) :: ohparticles type ( tp_OhField ), intent ( inout ) :: ohfields (:) integer :: status = 0 integer :: repiter = 0 integer :: verbose = 0 integer , allocatable :: ftypes (:, :) integer , allocatable :: cfields (:) integer , allocatable :: ctypes (:, :, :, :) call ohparticles % allocate_pbuf ( self % loadbalance_tolerance_percentage ) call self % set_field_extension_infos ( ohfields ) call self % set_boundary_communication_infos ( ohfields ) allocate ( ftypes ( 7 , size ( self % field_extension_infos ) + 1 )) allocate ( cfields ( size ( self % boundary_communication_infos ) + 1 )) allocate ( ctypes ( 3 , 2 , NBOUNDARY_CONDITION_TYPES , size ( self % boundary_communication_infos ))) ftypes = ftypes_from ( self % field_extension_infos ) cfields = cfields_from ( self % boundary_communication_infos ) ctypes = ctypes_from ( self % boundary_communication_infos ) ! Let ohhelp set up the following parameters. self % neighber_subdomain_ids ( 1 , 1 , 1 ) = - 1 self % subdomain_range ( 1 , 1 , 1 ) = 0 self % subdomain_range ( 2 , 1 , 1 ) = - 1 call oh3_init ( self % subdomain_id (:), & ! sdid(2) ohparticles % nspecies , & ! nspec self % loadbalance_tolerance_percentage , & ! maxfrac self % particle_count_histgram (:, :, :), & ! nphgram(N, S, 2) ohparticles % total_local_particles (:, :), & ! totalp(S, 2) ohparticles % pbuf (:), & ! pbuf(:) ohparticles % pbase (:), & ! pbase(3) ohparticles % max_local_particles , & ! maxlocalp self % communicator , & ! mycomm self % neighber_subdomain_ids (:, :, :), & ! nbor(3, 3, 3) self % process_coordinates (:), & ! pcoord(3) self % subdomain_range (:, :, :), & ! sdoms(2, 3, N) self % whole_domain_range (:, :), & ! scoord(2, 3) self % nboundary_condition_types , & ! nbound self % boundary_conditions (:, :), & ! bcond(2, 3) self % subdomain_boundary_conditions (:, :, :), & ! bounds(2, 3, N) ftypes (:, :), & ! ftypes(7, F+:) cfields (:), & ! cfields(C+:) ctypes (:, :, :, :), & ! ctypes(3, 2, B, C) self % field_sizes (:, :, :), & ! fsizes(2, 3, F) status , & repiter , & verbose ) ! Initialize particle-related variables, etc. in ohhelp (first time calling transbound function) call self % transbound ( ohparticles ) block integer :: iohfield do iohfield = 1 , size ( ohfields ) call self % allocate_ohfield ( ohfields ( iohfield )% ref ) call self % notify_subdomain_range ( ohfields ( iohfield )% ref ) end do end block contains function ftypes_from ( infos ) result ( ret ) type ( t_FieldExtensionInfo ), intent ( in ) :: infos (:) integer :: ret ( 7 , size ( infos ) + 1 ) block integer :: i , id do i = 1 , size ( infos ) id = infos ( i )% id ret ( 1 , id ) = infos ( i )% nelements ret ( 2 : 3 , id ) = infos ( i )% nextensions ( 1 : 2 ) ret ( 4 : 5 , id ) = infos ( i )% nextensions_for_broadcast ( 1 : 2 ) ret ( 6 : 7 , id ) = infos ( i )% nextensions_for_reduction ( 1 : 2 ) end do end block ret ( 1 , size ( infos ) + 1 ) = 0 end function function cfields_from ( infos ) result ( ret ) type ( t_BoundaryCommunicationInfos ), intent ( in ) :: infos (:) integer :: ret ( size ( infos ) + 1 ) ret ( 1 : size ( infos )) = infos (:)% id ret ( size ( infos ) + 1 ) = 0 end function function ctypes_from ( infos ) result ( ret ) type ( t_BoundaryCommunicationInfos ), intent ( in ) :: infos (:) integer :: ret ( 3 , 2 , NBOUNDARY_CONDITION_TYPES , size ( infos )) integer :: i , ib do i = 1 , size ( infos ) do ib = 1 , NBOUNDARY_CONDITION_TYPES ret ( 1 , 1 , ib , i ) = infos ( i )% infos ( ib )% downward_comm_send_offset ret ( 2 , 1 , ib , i ) = infos ( i )% infos ( ib )% downward_comm_receive_offset ret ( 3 , 1 , ib , i ) = infos ( i )% infos ( ib )% downward_comm_nsends ret ( 1 , 2 , ib , i ) = infos ( i )% infos ( ib )% upward_comm_send_offset ret ( 2 , 2 , ib , i ) = infos ( i )% infos ( ib )% upward_comm_receive_offset ret ( 3 , 2 , ib , i ) = infos ( i )% infos ( ib )% upward_comm_nsends end do end do end function end subroutine subroutine ohhelp_set_field_extension_infos ( self , ohfields ) class ( t_OhHelp ), intent ( inout ) :: self type ( tp_OhField ), intent ( in ) :: ohfields (:) allocate ( self % field_extension_infos ( size ( ohfields ))) allocate ( self % field_sizes ( 2 , 3 , size ( ohfields ))) block integer :: i integer :: id type ( t_FieldExtensionInfo ) :: info do i = 1 , size ( ohfields ) info = ohfields ( i )% ref % extension_info id = info % id self % field_extension_infos ( id ) = info end do end block end subroutine subroutine ohhelp_set_boundary_communication_infos ( self , ohfields ) class ( t_OhHelp ), intent ( inout ) :: self type ( tp_OhField ), intent ( in ) :: ohfields (:) allocate ( self % boundary_communication_infos ( size ( ohfields ))) block integer :: i , j integer :: id type ( t_BoundaryCommunicationInfos ), allocatable :: infos (:) do i = 1 , size ( ohfields ) infos = ohfields ( i )% ref % boundary_comm_infos do j = 1 , size ( infos ) id = infos ( j )% id self % boundary_communication_infos ( id ) = infos ( j ) end do end do end block end subroutine subroutine ohhelp_allocate_ohfield ( self , ohfield ) class ( t_OhHelp ), intent ( in ) :: self class ( t_OhField ), intent ( inout ) :: ohfield integer :: nelements integer :: nfields integer :: field_size ( 2 , 3 ) nelements = ohfield % extension_info % nelements nfields = ohfield % nfields field_size (:, :) = self % field_sizes (:, :, ohfield % extension_info % id ) call ohfield % allocate ( nelements , field_size , nfields ) end subroutine subroutine ohhelp_correct_load_balancing ( self , ohparticles , eb , ohfields_to_be_notified ) class ( t_OhHelp ), intent ( inout ) :: self class ( t_OhParticles ), intent ( inout ) :: ohparticles type ( tp_OhField ), intent ( inout ) :: ohfields_to_be_notified (:) class ( t_OhField ), intent ( inout ) :: eb call self % transbound ( ohparticles ) if (. not . self % requires_broadcast_field ()) then return end if call self % broadcast_field ( eb ) self % current_mode = OHH_SECONDARY_MODE block integer :: i do i = 1 , size ( ohfields_to_be_notified ) call self % notify_subdomain_range ( ohfields_to_be_notified ( i )% ref ) end do end block end subroutine subroutine ohhelp_transbound ( self , ohparticles ) class ( t_OhHelp ), intent ( inout ) :: self class ( t_OhParticles ), intent ( inout ) :: ohparticles integer :: status self % current_mode = oh3_transbound ( self % current_mode , status ) self % particle_count_histgram ( self % subdomain_id ( 1 ) + 1 , :, 1 ) & = ohparticles % total_local_particles (:, 1 ) if ( self % subdomain_id ( 2 ) >= 0 ) then self % particle_count_histgram ( self % subdomain_id ( 2 ) + 1 , :, 2 ) & = ohparticles % total_local_particles (:, 2 ) end if end subroutine function ohhelp_requires_broadcast_field ( self ) result ( ret ) class ( t_OhHelp ), intent ( inout ) :: self logical :: ret ret = self % current_mode == OHH_REQUIRES_BCAST end function subroutine ohhelp_broadcast_field ( self , ohfield ) class ( t_OhHelp ), intent ( inout ) :: self type ( t_OhField ), intent ( inout ) :: ohfield call oh3_bcast_field ( ohfield % values ( 1 , 0 , 0 , 0 , 1 ), & ohfield % values ( 1 , 0 , 0 , 0 , 2 ), & ohfield % extension_info % id ) end subroutine subroutine ohhelp_reduce_field ( self , ohfield ) class ( t_OhHelp ), intent ( inout ) :: self type ( t_OhField ), intent ( inout ) :: ohfield call oh3_reduce_field ( ohfield % values ( 1 , 0 , 0 , 0 , 1 ), ohfield % values ( 1 , 0 , 0 , 0 , 2 ), ohfield % extension_info % id ) end subroutine subroutine ohhelp_exchange_borders ( self , ohfield ) class ( t_OhHelp ), intent ( inout ) :: self type ( t_OhField ), intent ( inout ) :: ohfield call oh3_exchange_borders ( ohfield % values ( 1 , 0 , 0 , 0 , 1 ), & ohfield % values ( 1 , 0 , 0 , 0 , 2 ), & ohfield % boundary_comm_infos ( 1 )% id , 0 ) end subroutine subroutine check_particles_in_subdomain ( particles , pbase , primary_or_secondary ) type ( oh_particle ), intent ( inout ) :: particles (:) integer , intent ( in ) :: pbase ( 3 ) integer , intent ( in ) :: primary_or_secondary type ( oh_particle ) :: particle integer :: nid nid = oh3_map_particle_to_neighbor ( particle % x , particle % y , particle % z , primary_or_secondary ) end subroutine subroutine ohhelp_notify_subdomain_range ( self , ohfield ) class ( t_OhHelp ), intent ( inout ) :: self type ( t_OhField ), intent ( inout ) :: ohfield ohfield % subdomain_range (:, :, 1 ) = self % subdomain_range (:, :, self % subdomain_id ( 1 ) + 1 ) if ( self % is_secondary_mode ()) then ohfield % subdomain_range (:, :, 2 ) = self % subdomain_range (:, :, self % subdomain_id ( 2 ) + 1 ) end if end subroutine function ohhelp_is_primary_mode ( self ) result ( ret ) class ( t_OhHelp ), intent ( inout ) :: self logical :: ret ret = self % current_mode == OHH_PRIMARY_MODE end function function ohhelp_is_secondary_mode ( self ) result ( ret ) class ( t_OhHelp ), intent ( inout ) :: self logical :: ret ret = self % current_mode == OHH_SECONDARY_MODE end function subroutine ohhelp_inject_particle ( self , particle ) class ( t_OhHelp ), intent ( inout ) :: self type ( oh_particle ), intent ( in ) :: particle call oh2_inject_particle ( particle ) end subroutine subroutine ohhelp_correct_particle ( self , particle , ps ) class ( t_OhHelp ), intent ( inout ) :: self type ( oh_particle ), intent ( inout ) :: particle integer , intent ( in ) :: ps integer :: nid nid = oh3_map_particle_to_neighbor ( particle % x , particle % y , particle % z , ps ) if ( nid /= particle % nid ) then particle % nid = nid self % particle_count_histgram ( self % subdomain_id ( ps ) + 1 , particle % spec , ps ) = & self % particle_count_histgram ( self % subdomain_id ( ps ) + 1 , particle % spec , ps ) - 1 end if end subroutine function ohhelp_map_subdomain_id ( self , position ) result ( ret ) class ( t_Ohhelp ), intent ( in ) :: self double precision , intent ( in ) :: position ( 3 ) integer :: ret ret = oh3_map_particle_to_subdomain ( position ( 1 ), position ( 2 ), position ( 3 )) end function end module","tags":"","loc":"sourcefile/ohhelp.f90.html"},{"title":"ohfield_factory.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~ohfield_factory.f90~~EfferentGraph sourcefile~ohfield_factory.f90 ohfield_factory.f90 sourcefile~ohfield.f90 ohfield.f90 sourcefile~ohfield_factory.f90->sourcefile~ohfield.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~ohfield_factory.f90~~AfferentGraph sourcefile~ohfield_factory.f90 ohfield_factory.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~ohfield_factory.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_ohfield_factory Source Code ohfield_factory.f90 Source Code module m_ohfield_factory use m_ohfield implicit none private public t_OhFieldFactory public new_OhFieldFactory type t_OhFieldFactory integer :: extension_id_count integer :: comm_id_count contains procedure :: create_field => factory_create_field procedure , private :: create_electromagnetic_field => factory_create_electromagnetic_field procedure , private :: create_current_field => factory_create_current_field procedure , private :: create_density_field => factory_create_density_field procedure , private :: create_potential_field => factory_create_potential_field procedure , private :: create_field_wrapper => factory_create_field_wrapper end type contains function new_OhFieldFactory () result ( obj ) type ( t_OhFieldFactory ) :: obj obj % extension_id_count = 1 obj % comm_id_count = 1 end function function factory_create_field ( self , name , nfields ) result ( field ) class ( t_OhFieldFactory ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name integer , optional , intent ( in ) :: nfields type ( t_OhField ) :: field integer :: nfields_ = 2 if ( present ( nfields )) then nfields_ = nfields end if select case ( name ) case ( 'eb' , 'electromagnetic' ) field = self % create_electromagnetic_field ( nfields_ ) case ( 'j' , 'current' ) field = self % create_current_field ( nfields_ ) case ( 'rho' , 'density' ) field = self % create_density_field ( nfields_ ) case ( 'phi' , 'potential' ) field = self % create_potential_field ( nfields_ ) case default print * , 'InvalidArgumentError: input name is invalid (OhFieldFactory%create_field):' , name return end select end function function factory_create_field_wrapper ( self , & nelements , & nfields , & nextensions , & nextensions_for_broadcast , & nextensions_for_reduction , & downward_comm_send_offset , & downward_comm_receive_offset , & downward_comm_nsends , & upward_comm_send_offset , & upward_comm_receive_offset , & upward_comm_nsends ) result ( ohfield ) class ( t_OhFieldFactory ), intent ( inout ) :: self integer , intent ( in ) :: nelements integer , intent ( in ) :: nfields integer , intent ( in ) :: nextensions ( 2 ) integer , intent ( in ) :: nextensions_for_broadcast ( 2 ) integer , intent ( in ) :: nextensions_for_reduction ( 2 ) integer , intent ( in ) :: downward_comm_send_offset integer , intent ( in ) :: downward_comm_receive_offset integer , intent ( in ) :: downward_comm_nsends integer , intent ( in ) :: upward_comm_send_offset integer , intent ( in ) :: upward_comm_receive_offset integer , intent ( in ) :: upward_comm_nsends type ( t_OhField ) :: ohfield type ( t_FieldExtensionInfo ) :: exinfo type ( t_BoundaryCommunicationInfos ) :: bcomminfos ( 1 ) exinfo = new_FieldExtensionInfo ( id = self % extension_id_count , & nelements = nelements , & nextensions = nextensions , & nextensions_for_broadcast = nextensions_for_broadcast , & nextensions_for_reduction = nextensions_for_reduction ) self % extension_id_count = self % extension_id_count + 1 block type ( t_BoundaryCommunicationInfo ) :: infos ( NBOUNDARY_CONDITION_TYPES ) infos ( 1 ) = new_BoundaryCommunicationInfo ( & downward_comm_send_offset , & downward_comm_receive_offset , & downward_comm_nsends , & upward_comm_send_offset , & upward_comm_receive_offset , & upward_comm_nsends ) infos ( 2 ) = new_BoundaryCommunicationInfo ( & downward_comm_send_offset , & downward_comm_receive_offset , & downward_comm_nsends , & upward_comm_send_offset , & upward_comm_receive_offset , & upward_comm_nsends ) bcomminfos ( 1 ) = & new_BoundaryCommunicationInfos ( self % comm_id_count , infos ) self % comm_id_count = self % comm_id_count + 1 end block ohfield = new_OhField ( exinfo , nfields , bcomminfos ) end function function factory_create_electromagnetic_field ( self , nfields ) result ( field ) class ( t_OhFieldFactory ), intent ( inout ) :: self integer , intent ( in ) :: nfields type ( t_OhField ) :: field field = self % create_field_wrapper ( & nelements = 6 , & nfields = nfields , & nextensions = [ - 1 , 2 ], & nextensions_for_broadcast = [ - 1 , 2 ], & nextensions_for_reduction = [ 0 , 0 ], & downward_comm_send_offset = 0 , & downward_comm_receive_offset = 0 , & downward_comm_nsends = 2 , & upward_comm_send_offset =- 1 , & upward_comm_receive_offset =- 1 , & upward_comm_nsends = 1 ) end function function factory_create_current_field ( self , nfields ) result ( field ) class ( t_OhFieldFactory ), intent ( inout ) :: self integer , intent ( in ) :: nfields type ( t_OhField ) :: field field = self % create_field_wrapper ( & nelements = 3 , & nfields = nfields , & nextensions = [ 0 , 0 ], & nextensions_for_broadcast = [ 0 , 0 ], & nextensions_for_reduction = [ - 1 , 2 ], & downward_comm_send_offset =- 1 , & downward_comm_receive_offset = 2 , & downward_comm_nsends = 3 , & upward_comm_send_offset =- 1 , & upward_comm_receive_offset =- 4 , & upward_comm_nsends = 3 ) end function function factory_create_density_field ( self , nfields ) result ( field ) class ( t_OhFieldFactory ), intent ( inout ) :: self integer , intent ( in ) :: nfields type ( t_OhField ) :: field field = self % create_field_wrapper ( & nelements = 1 , & nfields = nfields , & nextensions = [ 0 , 1 ], & nextensions_for_broadcast = [ 0 , 0 ], & nextensions_for_reduction = [ 0 , 1 ], & downward_comm_send_offset = 0 , & downward_comm_receive_offset = 1 , & downward_comm_nsends = 1 , & upward_comm_send_offset = 0 , & upward_comm_receive_offset =- 1 , & upward_comm_nsends = 1 ) end function function factory_create_potential_field ( self , nfields ) result ( field ) class ( t_OhFieldFactory ), intent ( inout ) :: self integer , intent ( in ) :: nfields type ( t_OhField ) :: field field = self % create_field_wrapper ( & nelements = 1 , & nfields = nfields , & nextensions = [ 0 , 0 ], & nextensions_for_broadcast = [ - 1 , 2 ], & nextensions_for_reduction = [ 0 , 0 ], & downward_comm_send_offset = 0 , & downward_comm_receive_offset = 0 , & downward_comm_nsends = 1 , & upward_comm_send_offset =- 1 , & upward_comm_receive_offset =- 1 , & upward_comm_nsends = 1 ) end function end module","tags":"","loc":"sourcefile/ohfield_factory.f90.html"},{"title":"ohfield.f90 – ohhelp-pic-3d","text":"Files dependent on this one sourcefile~~ohfield.f90~~AfferentGraph sourcefile~ohfield.f90 ohfield.f90 sourcefile~field_solver.f90 field_solver.f90 sourcefile~field_solver.f90->sourcefile~ohfield.f90 sourcefile~ohhelp.f90 ohhelp.f90 sourcefile~field_solver.f90->sourcefile~ohhelp.f90 sourcefile~hdf5_for_ohfield.f90 hdf5_for_ohfield.f90 sourcefile~hdf5_for_ohfield.f90->sourcefile~ohfield.f90 sourcefile~interpolator.f90 interpolator.f90 sourcefile~interpolator.f90->sourcefile~ohfield.f90 sourcefile~linear_interpolator.f90 linear_interpolator.f90 sourcefile~linear_interpolator.f90->sourcefile~ohfield.f90 sourcefile~linear_interpolator.f90->sourcefile~interpolator.f90 sourcefile~linear_scatter.f90 linear_scatter.f90 sourcefile~linear_scatter.f90->sourcefile~ohfield.f90 sourcefile~scatter.f90 scatter.f90 sourcefile~linear_scatter.f90->sourcefile~scatter.f90 sourcefile~ohfield_factory.f90 ohfield_factory.f90 sourcefile~ohfield_factory.f90->sourcefile~ohfield.f90 sourcefile~ohhelp.f90->sourcefile~ohfield.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~ohfield.f90 sourcefile~ohhelppic3d.f90->sourcefile~field_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~hdf5_for_ohfield.f90 sourcefile~ohhelppic3d.f90->sourcefile~interpolator.f90 sourcefile~ohhelppic3d.f90->sourcefile~linear_interpolator.f90 sourcefile~ohhelppic3d.f90->sourcefile~linear_scatter.f90 sourcefile~ohhelppic3d.f90->sourcefile~ohfield_factory.f90 sourcefile~ohhelppic3d.f90->sourcefile~ohhelp.f90 sourcefile~poisson_solver.f90 poisson_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~poisson_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~scatter.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~poisson_solver.f90->sourcefile~ohfield.f90 sourcefile~poisson_solver.f90->sourcefile~field_solver.f90 sourcefile~poisson_solver.f90->sourcefile~ohhelp.f90 sourcefile~scatter.f90->sourcefile~ohfield.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 sourcefile~no_particle_injector.f90 no_particle_injector.f90 sourcefile~no_particle_injector.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector.f90 particle_injector.f90 sourcefile~no_particle_injector.f90->sourcefile~particle_injector.f90 sourcefile~particle_injector.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_manager.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_manager.f90->sourcefile~no_particle_injector.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector.f90 sourcefile~particle_injector_with_distribution.f90 particle_injector_with_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector_with_distribution.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~particle_injector.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_ohfield Source Code ohfield.f90 Source Code module m_ohfield implicit none private public NBOUNDARY_CONDITION_TYPES public BOUNDARY_CONDITION_PERIODIC public BOUNDARY_CONDITION_NO_PERIODIC public t_BoundaryCommunicationInfo , new_BoundaryCommunicationInfo public t_BoundaryCommunicationInfos , new_BoundaryCommunicationInfos public t_FieldExtensionInfo , new_FieldExtensionInfo public t_OhField , new_OhField public tp_OhField integer , parameter :: NBOUNDARY_CONDITION_TYPES = 2 integer , parameter :: BOUNDARY_CONDITION_PERIODIC = 1 integer , parameter :: BOUNDARY_CONDITION_NO_PERIODIC = 2 type t_FieldExtensionInfo !> Identifier integer :: id !> The number of elements. integer :: nelements = 0 !>  The size of subdomain expansion [lower, upper] integer :: nextensions ( 2 ) !> The size of subdomain expansion when broadcast [lower, upper] integer :: nextensions_for_broadcast ( 2 ) !> The size of subdomain expansion when reduction [lower, upper] integer :: nextensions_for_reduction ( 2 ) end type type t_BoundaryCommunicationInfo !> Offset to send at downward communication integer :: downward_comm_send_offset !> Offset to receive at downward communication integer :: downward_comm_receive_offset !> The number of planes to send/receive at downward communication integer :: downward_comm_nsends !> Offset to send at upward communication integer :: upward_comm_send_offset !> Offset to receive at upward communication integer :: upward_comm_receive_offset !> The number of planes to send/receive at upward communication integer :: upward_comm_nsends end type type t_BoundaryCommunicationInfos !> boundary communication type identifier integer :: id type ( t_BoundaryCommunicationInfo ) :: infos ( NBOUNDARY_CONDITION_TYPES ) end type type t_OhField double precision , allocatable :: values (:, :, :, :, :) ! (nelements, nlx, nly, nlz, nfields) type ( t_FieldExtensionInfo ) :: extension_info integer :: nelements integer :: nfields integer :: field_size ( 2 , 3 ) integer :: subdomain_range ( 2 , 3 , 2 ) integer :: nboundary_comm_infos type ( t_BoundaryCommunicationInfos ), allocatable :: boundary_comm_infos (:) contains procedure :: make_copy => ohfield_make_copy procedure :: allocate => ohfield_allocate procedure :: to_global_index => ohfield_to_global_index procedure :: to_local_index => ohfield_to_local_index procedure :: to_local_position => ohfield_to_local_position procedure :: local_shape => ohfield_local_shape end type type tp_OhField class ( t_OhField ), pointer :: ref end type contains function new_FieldExtensionInfo ( id , & nelements , & nextensions , & nextensions_for_broadcast , & nextensions_for_reduction ) result ( obj ) integer , intent ( in ) :: id integer , intent ( in ) :: nelements integer , intent ( in ) :: nextensions ( 2 ) integer , intent ( in ) :: nextensions_for_broadcast ( 2 ) integer , intent ( in ) :: nextensions_for_reduction ( 2 ) type ( t_FieldExtensionInfo ) :: obj obj % id = id obj % nelements = nelements obj % nextensions = nextensions obj % nextensions_for_broadcast = nextensions_for_broadcast obj % nextensions_for_reduction = nextensions_for_reduction end function function new_BoundaryCommunicationInfo ( downward_comm_send_offset , & downward_comm_receive_offset , & downward_comm_nsends , & upward_comm_send_offset , & upward_comm_receive_offset , & upward_comm_nsends ) result ( obj ) !> Offset to send at downward communication integer , intent ( in ) :: downward_comm_send_offset !> Offset to receive at downward communication integer , intent ( in ) :: downward_comm_receive_offset !> The number of planes to send/receive at downward communication integer , intent ( in ) :: downward_comm_nsends !> Offset to send at upward communication integer , intent ( in ) :: upward_comm_send_offset !> Offset to receive at upward communication integer , intent ( in ) :: upward_comm_receive_offset !> The number of planes to send/receive at upward communication integer , intent ( in ) :: upward_comm_nsends type ( t_BoundaryCommunicationInfo ) :: obj obj % downward_comm_send_offset = downward_comm_send_offset obj % downward_comm_receive_offset = downward_comm_receive_offset obj % downward_comm_nsends = downward_comm_nsends obj % upward_comm_send_offset = upward_comm_send_offset obj % upward_comm_receive_offset = upward_comm_receive_offset obj % upward_comm_nsends = upward_comm_nsends end function function new_BoundaryCommunicationInfos ( id , boundary_communication_infos ) result ( obj ) !> boundary communication type identifier integer , intent ( in ) :: id type ( t_BoundaryCommunicationInfo ) :: boundary_communication_infos ( NBOUNDARY_CONDITION_TYPES ) type ( t_BoundaryCommunicationInfos ) :: obj obj % id = id obj % infos (:) = boundary_communication_infos (:) end function function new_OhField ( extension_info , nfields , boundary_comm_infos ) result ( obj ) type ( t_FieldExtensionInfo ), intent ( in ) :: extension_info integer , intent ( in ) :: nfields type ( t_BoundaryCommunicationInfos ), intent ( in ), optional :: boundary_comm_infos (:) type ( t_OhField ) :: obj obj % extension_info = extension_info obj % nelements = extension_info % nelements obj % nfields = nfields if ( present ( boundary_comm_infos )) then obj % nboundary_comm_infos = size ( boundary_comm_infos ) allocate ( obj % boundary_comm_infos ( obj % nboundary_comm_infos )) obj % boundary_comm_infos (:) = boundary_comm_infos (:) else obj % nboundary_comm_infos = 0 end if end function subroutine ohfield_allocate ( self , nelements , field_size , nfields ) class ( t_Ohfield ), intent ( inout ) :: self integer , intent ( in ) :: nelements integer , intent ( in ) :: field_size ( 2 , 3 ) integer , intent ( in ) :: nfields allocate ( self % values ( nelements , & field_size ( 1 , 1 ): field_size ( 2 , 1 ), & field_size ( 1 , 2 ): field_size ( 2 , 2 ), & field_size ( 1 , 3 ): field_size ( 2 , 3 ), & nfields )) end subroutine function ohfield_make_copy ( self , nfields ) result ( copy ) class ( t_OhField ), intent ( in ) :: self integer , intent ( in ) :: nfields type ( t_OhField ) :: copy copy = new_OhField ( self % extension_info , nfields , self % boundary_comm_infos ) end function function ohfield_to_global_index ( self , local_index , ps ) result ( global_index ) class ( t_Ohfield ), intent ( in ) :: self integer , intent ( in ) :: local_index ( 3 ) integer , intent ( in ) :: ps integer :: global_index ( 3 ) global_index = self % subdomain_range ( 1 , :, ps ) + local_index (:) end function function ohfield_to_local_index ( self , global_index , ps ) result ( local_index ) class ( t_Ohfield ), intent ( in ) :: self integer , intent ( in ) :: global_index ( 3 ) integer , intent ( in ) :: ps integer :: local_index ( 3 ) local_index = global_index - self % subdomain_range ( 1 , :, ps ) end function function ohfield_to_local_position ( self , global_position , ps ) result ( ret ) class ( t_Ohfield ), intent ( in ) :: self double precision , intent ( in ) :: global_position ( 3 ) integer , intent ( in ) :: ps double precision :: ret ( 3 ) ret = global_position - self % subdomain_range ( 1 , :, ps ) end function function ohfield_local_shape ( self , ps ) result ( ret ) class ( t_Ohfield ), intent ( in ) :: self integer , intent ( in ) :: ps integer :: ret ( 3 ) ret = self % subdomain_range ( 2 , :, ps ) - self % subdomain_range ( 1 , :, ps ) + 1 end function end module","tags":"","loc":"sourcefile/ohfield.f90.html"},{"title":"ohparticles.f90 – ohhelp-pic-3d","text":"Files dependent on this one sourcefile~~ohparticles.f90~~AfferentGraph sourcefile~ohparticles.f90 ohparticles.f90 sourcefile~ohhelp.f90 ohhelp.f90 sourcefile~ohhelp.f90->sourcefile~ohparticles.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~ohparticles.f90 sourcefile~ohhelppic3d.f90->sourcefile~ohhelp.f90 sourcefile~field_solver.f90 field_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~field_solver.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~poisson_solver.f90 poisson_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~poisson_solver.f90 sourcefile~field_solver.f90->sourcefile~ohhelp.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 sourcefile~no_particle_injector.f90 no_particle_injector.f90 sourcefile~no_particle_injector.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector.f90 particle_injector.f90 sourcefile~no_particle_injector.f90->sourcefile~particle_injector.f90 sourcefile~particle_injector.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_manager.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_manager.f90->sourcefile~no_particle_injector.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector.f90 sourcefile~particle_injector_with_distribution.f90 particle_injector_with_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector_with_distribution.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~particle_injector.f90 sourcefile~poisson_solver.f90->sourcefile~ohhelp.f90 sourcefile~poisson_solver.f90->sourcefile~field_solver.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_ohparticles Source Code ohparticles.f90 Source Code #define OH_LIB_LEVEL 3 #ifndef OH_PBUF_SIZE #define OH_PBUF_SIZE 16384 #endif module m_ohparticles use ohhelp2 , only : oh2_max_local_particles use oh_type , only : oh_particle implicit none private public t_OhParticles , new_OhParticles integer , parameter :: PARTICLE_BUFSIZE = OH_PBUF_SIZE type :: t_OhParticles type ( oh_particle ), allocatable :: pbuf (:) integer , allocatable :: pbase (:) integer ( kind = 8 ), private :: max_nparticles integer :: max_local_particles integer , allocatable :: total_local_particles (:, :) ! (nspec, 2) integer :: nspecies contains procedure :: allocate_pbuf => ohparticles_allocate_pbuf procedure :: start_index => ohparticles_start_index procedure :: end_index => ohparticles_end_index end type contains function new_OhParticles ( nspecies , & max_nparticles , & nprocs ) result ( self ) integer , intent ( in ) :: nspecies integer ( kind = 8 ), intent ( in ) :: max_nparticles integer , intent ( in ) :: nprocs type ( t_OhParticles ) :: self self % nspecies = nspecies self % max_nparticles = max_nparticles allocate ( self % pbase ( 3 )) allocate ( self % total_local_particles ( nspecies , 2 )) end function subroutine ohparticles_allocate_pbuf ( self , loadbalance_tolerance_percentage ) class ( t_OhParticles ), intent ( inout ) :: self integer , intent ( in ) :: loadbalance_tolerance_percentage self % max_local_particles = oh2_max_local_particles ( self % max_nparticles , & loadbalance_tolerance_percentage , & PARTICLE_BUFSIZE ) allocate ( self % pbuf ( self % max_local_particles )) end subroutine function ohparticles_start_index ( self , ispec , ps ) result ( ret ) class ( t_OhParticles ), intent ( in ) :: self integer , intent ( in ) :: ispec integer , intent ( in ) :: ps integer :: ret ret = self % pbase ( ps ) + 1 + sum ( self % total_local_particles ( 1 : ispec - 1 , ps )) end function function ohparticles_end_index ( self , ispec , ps ) result ( ret ) class ( t_OhParticles ), intent ( in ) :: self integer , intent ( in ) :: ispec !> 1: primary subdomain, 2: secondary subdomain integer , intent ( in ) :: ps integer :: ret ret = self % pbase ( ps ) + sum ( self % total_local_particles ( 1 : ispec , ps )) end function end module","tags":"","loc":"sourcefile/ohparticles.f90.html"},{"title":"rescaler.f90 – ohhelp-pic-3d","text":"Contents Modules m_rescaler Source Code rescaler.f90 Source Code module m_rescaler use m_unit_converter implicit none private public t_Rescaler !> dx : float !>     Grid length [m] !> to_c : float !>     Light Speed in EMSES !> pi : UnitTranslator !>     Circular constant [] !> e : UnitTranslator !>     Napiers constant [] !> c : UnitTranslator !>     Light Speed [m/s] !> e0 : UnitTranslator !>     FS-Permttivity [F/m] !> m0 : UnitTranslator !>     FS-Permeablity [N/A&#94;2] !> qe : UnitTranslator !>     Elementary charge [C] !> me : UnitTranslator !>     Electron mass [kg] !> mi : UnitTranslator !>     Proton mass [kg] !> qe_me : UnitTranslator !>     Electron charge-to-mass ratio [C/kg] !> kB : UnitTranslator !>     Boltzmann constant [J/K] !> length : UnitTranslator !>     Sim-to-Real length ratio [m] !> m : UnitTranslator !>     Mass [kg] !> t : UnitTranslator !>     Time [s] !> f : UnitTranslator !>     Frequency [Hz] !> v : UnitTranslator !>     Velocity [m/s] !> n : UnitTranslator !>     Number density [/m&#94;3] !> N : UnitTranslator !>     Flux [/m&#94;2s] !> F : UnitTranslator !>     Force [N] !> P : UnitTranslator !>     Power [W] !> W : UnitTranslator !>     Energy [J] !> w : UnitTranslator] !>     Energy density [J/m&#94;3] !> eps : UnitTranslator !>     Permittivity  [F/m] !> q : UnitTranslator !>     Charge [C] !> rho : UnitTranslator !>     Charge density [C/m&#94;3] !> q_m : UnitTranslator !>     Charge-to-mass ratio [C/kg] !> i : UnitTranslator !>     Current [A] !> J : UnitTranslator !>     Current density [A/m&#94;2] !> phi : UnitTranslator !>     Potential [V] !> E : UnitTranslator !>     Electric field [V/m] !> H : UnitTranslator !>     Magnetic field [A/m] !> C : UnitTranslator !>     Capacitance [F] !> R : UnitTranslator !>     Resistance [Ω] !> G : UnitTranslator !>     Conductance [S] !> mu : UnitTranslator !>     Permiability [H/m] !> B : UnitTranslator !>     Magnetic flux density [T] !> L : UnitTranslator !>     Inductance [H] !> T : UnitTranslator !>     Temperature [K] type :: t_Rescaler type ( t_UnitConverter ) :: dx type ( t_UnitConverter ) :: to_c type ( t_UnitConverter ) :: pi type ( t_UnitConverter ) :: e type ( t_UnitConverter ) :: c type ( t_UnitConverter ) :: e0 type ( t_UnitConverter ) :: m0 type ( t_UnitConverter ) :: q_m type ( t_UnitConverter ) :: kB type ( t_UnitConverter ) :: length type ( t_UnitConverter ) :: m type ( t_UnitConverter ) :: t type ( t_UnitConverter ) :: f type ( t_UnitConverter ) :: v type ( t_UnitConverter ) :: n type ( t_UnitConverter ) :: flux type ( t_UnitConverter ) :: force type ( t_UnitConverter ) :: P type ( t_UnitConverter ) :: W type ( t_UnitConverter ) :: epsilon type ( t_UnitConverter ) :: q type ( t_UnitConverter ) :: rho type ( t_UnitConverter ) :: i type ( t_UnitConverter ) :: J type ( t_UnitConverter ) :: phi type ( t_UnitConverter ) :: ef type ( t_UnitConverter ) :: bf type ( t_UnitConverter ) :: cap type ( t_UnitConverter ) :: R type ( t_UnitConverter ) :: G type ( t_UnitConverter ) :: mu type ( t_UnitConverter ) :: B type ( t_UnitConverter ) :: L type ( t_UnitConverter ) :: temperature end type end module","tags":"","loc":"sourcefile/rescaler.f90.html"},{"title":"parameters.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~parameters.f90~~EfferentGraph sourcefile~parameters.f90 parameters.f90 sourcefile~science_constants.f90 science_constants.f90 sourcefile~parameters.f90->sourcefile~science_constants.f90 sourcefile~toml_wrapper.f90 toml_wrapper.f90 sourcefile~parameters.f90->sourcefile~toml_wrapper.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~parameters.f90~~AfferentGraph sourcefile~parameters.f90 parameters.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~parameters.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~particle_injector_manager.f90->sourcefile~parameters.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_parameters Source Code parameters.f90 Source Code module m_parameters use m_science_constants use m_toml_wrapper , only : t_TomlWrapper , t_StringHolder implicit none private public t_Parameters , new_Parameters type :: t_Parameters character ( len = :), allocatable :: toml_filepath type ( t_TomlWrapper ) :: toml character ( len = :), allocatable :: simulation_name ! [simulation_type] character ( len = :), allocatable :: simulation_type ! [continuaus] integer :: load_continuaus_data character ( len = :), allocatable :: load_directory integer :: save_continuaus_data character ( len = :), allocatable :: save_directory ! [system] integer :: nx integer :: ny integer :: nz integer :: nstep double precision :: dt integer :: nmacro_particles_per_grid ( 3 ) double precision :: particle_buffer_size ( 3 ) integer :: imbalance_tolerance_percentage = 10 ! [system.method] character ( len = :), allocatable :: particle_mover_type ! [system.mpi] integer :: nnodes ( 3 ) ! [system.outer_boundaries] type ( t_StringHolder ), allocatable :: boundary_communication (:) type ( t_StringHolder ), allocatable :: boundary_type_for_electromagnetic_field (:) type ( t_StringHolder ), allocatable :: boundary_type_for_particle (:, :) ! [output] ! [output.stdout] integer :: stdout_interval_step = 10 ! [output.snapshot] integer :: output_start_step = 0 integer :: field_output_interval integer :: current_output_interval ! [plasma] integer :: nspecies double precision , allocatable :: charge_to_mass_ratio (:) double precision , allocatable :: plasma_frequency (:) double precision , allocatable :: thermal_velocity_para (:) double precision , allocatable :: thermal_velocity_perp (:) double precision , allocatable :: flow_velocity (:) double precision , allocatable :: flow_angle_deg_z (:) double precision , allocatable :: flow_angle_deg_xy (:) double precision :: cyclotron_frequency = 0.0 type ( t_StringHolder ), allocatable :: plasma_initialization (:) double precision , allocatable :: charge_per_macro_particle (:) contains end type contains function new_Parameters ( toml_filepath ) result ( obj ) character ( len =* ), intent ( in ) :: toml_filepath type ( t_Parameters ) :: obj obj % toml_filepath = toml_filepath call obj % toml % load ( toml_filepath ) ! TODO: Retrieve basic parameters. ! Parameters for complex settings are taken out in each module. obj % simulation_name = obj % toml % require_string1 ( 'simulation_name' , default = 'main' ) ! [simulation_type] obj % simulation_type = obj % toml % require_string2 ( 'simulation_type' , 'simulation_type' ) ! [continuaus] obj % load_continuaus_data = obj % toml % require_int ( 'continuaus' , 'load_continuaus_data' ) obj % load_directory = obj % toml % require_string2 ( 'continuaus' , 'load_directory' , default = 'SNAPSHOT0' ) obj % save_continuaus_data = obj % toml % require_int ( 'continuaus' , 'save_continuaus_data' ) obj % save_directory = obj % toml % require_string2 ( 'continuaus' , 'save_directory' , default = 'SNAPSHOT1' ) ! [system] obj % nx = obj % toml % require_int ( 'system' , 'nx' ) obj % ny = obj % toml % require_int ( 'system' , 'ny' ) obj % nz = obj % toml % require_int ( 'system' , 'nz' ) obj % nstep = obj % toml % require_int ( 'system' , 'nstep' ) obj % dt = obj % toml % require_double ( 'system' , 'dt' ) obj % nmacro_particles_per_grid = obj % toml % require_int_array ( 'system' , 'nmacro_particles_per_grid' ) obj % particle_buffer_size = obj % toml % require_double_array ( 'system' , 'particle_buffer_size' ) obj % imbalance_tolerance_percentage = obj % toml % require_int ( 'system' , 'imbalance_tolerance_percentage' , default = 10 ) ! [system.method] obj % particle_mover_type = obj % toml % require_string3 ( 'system' , 'method' , 'particle_mover' , default = 'boris' ) ! [system.mpi] obj % nnodes = obj % toml % require_int_array ( 'system' , 'mpi' , 'nnodes' ) ! [system.outer_boundaries] obj % boundary_communication = obj % toml % require_string_array ( 'system' , 'outer_boundary' , 'boundary_communication' ) obj % boundary_type_for_electromagnetic_field = obj % toml % require_string_array ( 'system' , 'outer_boundary' , 'boundary_type_for_electromagnetic_field' ) obj % boundary_type_for_particle = obj % toml % require_string_array2d ( 'system' , 'outer_boundary' , 'boundary_type_for_particle' ) ! [output] ! [output.stdout] obj % stdout_interval_step = obj % toml % require_int ( 'output' , 'stdout' , 'stdout_interval_step' , default = 10 ) ! [output.snapshot] obj % output_start_step = obj % toml % require_int ( 'output' , 'snapshot' , 'output_start_step' , default = 0 ) obj % field_output_interval = obj % toml % require_int ( 'output' , 'snapshot' , 'field_output_interval' ) obj % current_output_interval = obj % toml % require_int ( 'output' , 'snapshot' , 'current_output_interval' ) ! [plasma] obj % nspecies = obj % toml % require_int ( 'plasma' , 'nspecies' ) obj % charge_to_mass_ratio = obj % toml % require_double_array ( 'plasma' , 'charge_to_mass_ratio' ) obj % plasma_frequency = obj % toml % require_double_array ( 'plasma' , 'plasma_frequency' ) obj % thermal_velocity_para = obj % toml % require_double_array ( 'plasma' , 'thermal_velocity_para' ) obj % thermal_velocity_perp = obj % toml % require_double_array ( 'plasma' , 'thermal_velocity_perp' ) obj % flow_velocity = obj % toml % require_double_array ( 'plasma' , 'flow_velocity' ) obj % flow_angle_deg_z = obj % toml % require_double_array ( 'plasma' , 'flow_angle_deg_z' ) obj % flow_angle_deg_xy = obj % toml % require_double_array ( 'plasma' , 'flow_angle_deg_xy' ) obj % cyclotron_frequency = obj % toml % require_double ( 'plasma' , 'cyclotron_frequency' , default = 0 d0 ) ! [plasma.initialization] obj % plasma_initialization = obj % toml % require_string_array ( 'plasma' , 'initialization' , 'plasma_initialization' ) block double precision , allocatable :: wp (:) double precision , allocatable :: qm (:) wp = obj % plasma_frequency (:) qm = obj % charge_to_mass_ratio (:) obj % charge_per_macro_particle = & wp * wp / qm / obj % nmacro_particles_per_grid end block end function end module","tags":"","loc":"sourcefile/parameters.f90.html"},{"title":"toml_wrapper.f90 – ohhelp-pic-3d","text":"Files dependent on this one sourcefile~~toml_wrapper.f90~~AfferentGraph sourcefile~toml_wrapper.f90 toml_wrapper.f90 sourcefile~parameters.f90 parameters.f90 sourcefile~parameters.f90->sourcefile~toml_wrapper.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~particle_injector_manager.f90->sourcefile~toml_wrapper.f90 sourcefile~particle_injector_manager.f90->sourcefile~parameters.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~parameters.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_toml_wrapper Source Code toml_wrapper.f90 Source Code module m_toml_wrapper use mpi use , intrinsic :: iso_fortran_env , only : stderr => error_unit use tomlf , only : toml_table , & toml_array , & toml_parse , & get_value , & toml_serialize , & len , toml_error , toml_stat implicit none private public t_TomlWrapper , t_StringHolder type :: t_StringHolder character ( len = :), allocatable :: string end type type :: t_TomlWrapper type ( toml_table ), allocatable :: table contains procedure :: load => toml_load procedure :: to_string => toml_to_string generic :: require_table => & require_table1 , require_table2 , require_table3 procedure , private :: require_table1 => toml_require_table1 procedure , private :: require_table2 => toml_require_table2 procedure , private :: require_table3 => toml_require_table3 generic :: require_array => & require_array1 , require_array2 , require_array3 , require_array4 procedure , private :: require_array1 => toml_require_array1 procedure , private :: require_array2 => toml_require_array2 procedure , private :: require_array3 => toml_require_array3 procedure , private :: require_array4 => toml_require_array4 generic :: require_int => require_int1 , require_int2 , require_int3 , require_int4 procedure , private :: require_int1 => toml_require_int1 procedure , private :: require_int2 => toml_require_int2 procedure , private :: require_int3 => toml_require_int3 procedure , private :: require_int4 => toml_require_int4 generic :: require_real => & require_real1 , require_real2 , require_real3 , require_real4 procedure , private :: require_real1 => toml_require_real1 procedure , private :: require_real2 => toml_require_real2 procedure , private :: require_real3 => toml_require_real3 procedure , private :: require_real4 => toml_require_real4 generic :: require_double => & require_double1 , require_double2 , require_double3 , require_double4 procedure , private :: require_double1 => toml_require_double1 procedure , private :: require_double2 => toml_require_double2 procedure , private :: require_double3 => toml_require_double3 procedure , private :: require_double4 => toml_require_double4 procedure :: require_string1 => toml_require_string1 procedure :: require_string2 => toml_require_string2 procedure :: require_string3 => toml_require_string3 procedure :: require_string4 => toml_require_string4 generic :: require_int_array => & require_int_array1 , require_int_array2 , require_int_array3 , require_int_array4 procedure , private :: require_int_array1 => toml_require_int_array1 procedure , private :: require_int_array2 => toml_require_int_array2 procedure , private :: require_int_array3 => toml_require_int_array3 procedure , private :: require_int_array4 => toml_require_int_array4 generic :: require_real_array => & require_real_array1 , require_real_array2 , require_real_array3 , require_real_array4 procedure , private :: require_real_array1 => toml_require_real_array1 procedure , private :: require_real_array2 => toml_require_real_array2 procedure , private :: require_real_array3 => toml_require_real_array3 procedure , private :: require_real_array4 => toml_require_real_array4 generic :: require_double_array => & require_double_array1 , require_double_array2 , require_double_array3 , require_double_array4 procedure , private :: require_double_array1 => toml_require_double_array1 procedure , private :: require_double_array2 => toml_require_double_array2 procedure , private :: require_double_array3 => toml_require_double_array3 procedure , private :: require_double_array4 => toml_require_double_array4 generic :: require_string_array => & require_string_array1 , require_string_array2 , require_string_array3 , require_string_array4 procedure , private :: require_string_array1 => toml_require_string_array1 procedure , private :: require_string_array2 => toml_require_string_array2 procedure , private :: require_string_array3 => toml_require_string_array3 procedure , private :: require_string_array4 => toml_require_string_array4 generic :: require_string_array2d => & require_string_array2d1 , require_string_array2d2 , require_string_array2d3 , require_string_array2d4 procedure , private :: require_string_array2d1 => toml_require_string_array2d1 procedure , private :: require_string_array2d2 => toml_require_string_array2d2 procedure , private :: require_string_array2d3 => toml_require_string_array2d3 procedure , private :: require_string_array2d4 => toml_require_string_array2d4 end type contains subroutine error_stop ( message ) character ( len =* ), intent ( in ) :: message integer :: ierr write ( stderr , '(a)' ) 'Error: ' // message call MPI_Abort ( MPI_COMM_WORLD , 1 , ierr ) stop 1 end subroutine subroutine toml_load ( self , toml_filepath ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: toml_filepath integer :: io type ( toml_error ), allocatable :: error open ( file = toml_filepath , newunit = io , status = 'old' ) call toml_parse ( self % table , io , error ) close ( io ) if ( allocated ( error )) then call error_stop ( error % message ) end if end subroutine function toml_require_table1 ( self , name ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name type ( toml_table ), pointer :: ret integer :: stat call get_value ( self % table , name , ret , stat = stat , requested = . false .) if (. not . associated ( ret )) then call error_stop ( 'Table ' // name // ' is not found' ) end if end function function toml_require_table2 ( self , name1 , name2 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 type ( toml_table ), pointer :: ret integer :: stat type ( toml_table ), pointer :: table table => self % require_table ( name1 ) call get_value ( table , name2 , ret , stat = stat , requested = . false .) if (. not . associated ( ret )) then call error_stop ( 'Table ' // name1 // '.' // name2 // ' is not found' ) end if end function function toml_require_table3 ( self , name1 , name2 , name3 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 type ( toml_table ), pointer :: ret integer :: stat call get_value ( self % require_table ( name1 , name2 ), name3 , ret , & stat = stat , requested = . false .) if (. not . associated ( ret )) then call error_stop ( 'Table ' // name1 // '.' // name2 // '.' // name3 // ' is not found' ) end if end function function toml_require_array1 ( self , name ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name type ( toml_array ), pointer :: ret integer :: stat call get_value ( self % table , name , ret , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Array ' // name // ' is not found' ) end if end function function toml_require_array2 ( self , name1 , name2 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 type ( toml_array ), pointer :: ret integer :: stat call get_value ( self % require_table ( name1 ), name2 , ret , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Array ' // name1 // ',' // name2 // ' is not found' ) end if end function function toml_require_array3 ( self , name1 , name2 , name3 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 type ( toml_array ), pointer :: ret integer :: stat call get_value ( self % require_table ( name1 , name2 ), name3 , ret , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Array ' // name1 // ',' // name2 // ',' // name3 // ' is not found' ) end if end function function toml_require_array4 ( self , name1 , name2 , name3 , name4 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 character ( len =* ), intent ( in ) :: name4 type ( toml_array ), pointer :: ret integer :: stat call get_value ( self % require_table ( name1 , name2 , name3 ), name4 , ret , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Array ' // name1 // ',' // name2 // ',' // name3 // ',' // name4 // ' is not found' ) end if end function function toml_require_int1 ( self , name , default ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name integer , optional , intent ( in ) :: default integer :: ret integer :: stat call get_value ( self % table , name , ret , default , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Integer ' // name // ' is not found' ) end if end function function toml_require_int2 ( self , name1 , name2 , default ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 integer , optional , intent ( in ) :: default integer :: ret integer :: stat call get_value ( self % require_table ( name1 ), name2 , ret , default , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Integer ' // name1 // '.' // name2 // ' is not found' ) end if end function function toml_require_int3 ( self , name1 , name2 , name3 , default ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 integer , optional , intent ( in ) :: default integer :: ret integer :: stat call get_value ( self % require_table ( name1 , name2 ), name3 , ret , default , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Integer ' // name1 // '.' // name2 // ',' // name3 // ' is not found' ) end if end function function toml_require_int4 ( self , name1 , name2 , name3 , name4 , default ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 character ( len =* ), intent ( in ) :: name4 integer , optional , intent ( in ) :: default integer :: ret integer :: stat call get_value ( self % require_table ( name1 , name2 , name3 ), name4 , ret , default , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Integer ' // name1 // '.' // name2 // ',' // name3 // ',' // name4 // ' is not found' ) end if end function function toml_require_real1 ( self , name , default ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name real , optional , intent ( in ) :: default real :: ret integer :: stat call get_value ( self % table , name , ret , default , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Real ' // name // ' is not found' ) end if end function function toml_require_real2 ( self , name1 , name2 , default ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 real , optional , intent ( in ) :: default real :: ret integer :: stat call get_value ( self % require_table ( name1 ), name2 , ret , default , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Real ' // name1 // '.' // name2 // ' is not found' ) end if end function function toml_require_real3 ( self , name1 , name2 , name3 , default ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 real , optional , intent ( in ) :: default real :: ret integer :: stat call get_value ( self % require_table ( name1 , name2 ), name3 , ret , default , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Real ' // name1 // '.' // name2 // ',' // name3 // ' is not found' ) end if end function function toml_require_real4 ( self , name1 , name2 , name3 , name4 , default ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 character ( len =* ), intent ( in ) :: name4 real , optional , intent ( in ) :: default real :: ret integer :: stat call get_value ( self % require_table ( name1 , name2 , name3 ), name4 , ret , default , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Real ' // name1 // '.' // name2 // ',' // name3 // ',' // name4 // ' is not found' ) end if end function function toml_require_double1 ( self , name , default ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name double precision , optional , intent ( in ) :: default double precision :: ret integer :: stat call get_value ( self % table , name , ret , default , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Double precision ' // name // ' is not found' ) end if end function function toml_require_double2 ( self , name1 , name2 , default ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 double precision , optional , intent ( in ) :: default double precision :: ret integer :: stat call get_value ( self % require_table ( name1 ), name2 , ret , default , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Double precision ' // name1 // '.' // name2 // ' is not found' ) end if end function function toml_require_double3 ( self , name1 , name2 , name3 , default ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 double precision , optional , intent ( in ) :: default double precision :: ret integer :: stat call get_value ( self % require_table ( name1 , name2 ), name3 , ret , default , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Double precision ' // name1 // '.' // name2 // ',' // name3 // ' is not found' ) end if end function function toml_require_double4 ( self , name1 , name2 , name3 , name4 , default ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 character ( len =* ), intent ( in ) :: name4 double precision , optional , intent ( in ) :: default double precision :: ret integer :: stat call get_value ( self % require_table ( name1 , name2 , name3 ), name4 , ret , default , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Double precision ' // name1 // '.' // name2 // ',' // name3 // ',' // name4 // ' is not found' ) end if end function function toml_require_string1 ( self , name , default ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name character ( len =* ), optional , intent ( in ) :: default character ( len = :), allocatable :: ret integer :: stat call get_value ( self % table , name , ret , default , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'String ' // name // ' is not found' ) end if end function function toml_require_string2 ( self , name1 , name2 , default ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), optional , intent ( in ) :: default character ( len = :), allocatable :: ret integer :: stat call get_value ( self % require_table ( name1 ), name2 , ret , default , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'String ' // name1 // '.' // name2 // ' is not found' ) end if end function function toml_require_string3 ( self , name1 , name2 , name3 , default ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 character ( len =* ), optional , intent ( in ) :: default character ( len = :), allocatable :: ret integer :: stat call get_value ( self % require_table ( name1 , name2 ), name3 , ret , default , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'String ' // name1 // '.' // name2 // ',' // name3 // ' is not found' ) end if end function function toml_require_string4 ( self , name1 , name2 , name3 , name4 , default ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 character ( len =* ), intent ( in ) :: name4 character ( len = :), allocatable , optional , intent ( in ) :: default character ( len = :), allocatable :: ret integer :: stat call get_value ( self % require_table ( name1 , name2 , name3 ), name4 , ret , default , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'String ' // name1 // '.' // name2 // ',' // name3 // ',' // name4 // ' is not found' ) end if end function function toml_require_int_array1 ( self , name ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name integer , allocatable :: ret (:) integer :: stat type ( toml_array ), pointer :: array integer :: ival array => self % require_array ( name ) allocate ( ret ( len ( array ))) do ival = 1 , size ( ret ) call get_value ( array , ival , ret ( ival ), stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Integer ' // name // ' is not found' ) end if end do end function function toml_require_int_array2 ( self , name1 , name2 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 integer , allocatable :: ret (:) integer :: stat type ( toml_array ), pointer :: array integer :: ival array => self % require_array ( name1 , name2 ) allocate ( ret ( len ( array ))) do ival = 1 , size ( ret ) call get_value ( array , ival , ret ( ival ), stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Integer ' // name1 // '.' // name2 // ' is not found' ) end if end do end function function toml_require_int_array3 ( self , name1 , name2 , name3 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 integer , allocatable :: ret (:) integer :: stat type ( toml_array ), pointer :: array integer :: ival array => self % require_array ( name1 , name2 , name3 ) allocate ( ret ( len ( array ))) do ival = 1 , size ( ret ) call get_value ( array , ival , ret ( ival ), stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Integer ' // name1 // '.' // name2 // '.' // name3 // ' is not found' ) end if end do end function function toml_require_int_array4 ( self , name1 , name2 , name3 , name4 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 character ( len =* ), intent ( in ) :: name4 integer , allocatable :: ret (:) integer :: stat type ( toml_array ), pointer :: array integer :: ival array => self % require_array ( name1 , name2 , name3 , name4 ) allocate ( ret ( len ( array ))) do ival = 1 , size ( ret ) call get_value ( array , ival , ret ( ival ), stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Integer ' // name1 // '.' // name2 // '.' // name3 // '.' // name4 // ' is not found' ) end if end do end function function toml_require_real_array1 ( self , name ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name real , allocatable :: ret (:) integer :: stat type ( toml_array ), pointer :: array integer :: ival array => self % require_array ( name ) allocate ( ret ( len ( array ))) do ival = 1 , size ( ret ) call get_value ( array , ival , ret ( ival ), stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Real ' // name // ' is not found' ) end if end do end function function toml_require_real_array2 ( self , name1 , name2 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 real , allocatable :: ret (:) integer :: stat type ( toml_array ), pointer :: array integer :: ival array => self % require_array ( name1 , name2 ) allocate ( ret ( len ( array ))) do ival = 1 , size ( ret ) call get_value ( array , ival , ret ( ival ), stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Real ' // name1 // '.' // name2 // ' is not found' ) end if end do end function function toml_require_real_array3 ( self , name1 , name2 , name3 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 real , allocatable :: ret (:) integer :: stat type ( toml_array ), pointer :: array integer :: ival array => self % require_array ( name1 , name2 , name3 ) allocate ( ret ( len ( array ))) do ival = 1 , size ( ret ) call get_value ( array , ival , ret ( ival ), stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Real ' // name1 // '.' // name2 // '.' // name3 // ' is not found' ) end if end do end function function toml_require_real_array4 ( self , name1 , name2 , name3 , name4 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 character ( len =* ), intent ( in ) :: name4 real , allocatable :: ret (:) integer :: stat type ( toml_array ), pointer :: array integer :: ival array => self % require_array ( name1 , name2 , name3 , name4 ) allocate ( ret ( len ( array ))) do ival = 1 , size ( ret ) call get_value ( array , ival , ret ( ival ), stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Real ' // name1 // '.' // name2 // '.' // name3 // '.' // name4 // ' is not found' ) end if end do end function function toml_require_double_array1 ( self , name ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name double precision , allocatable :: ret (:) integer :: stat type ( toml_array ), pointer :: array integer :: ival array => self % require_array ( name ) allocate ( ret ( len ( array ))) do ival = 1 , size ( ret ) call get_value ( array , ival , ret ( ival ), stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Double precision ' // name // ' is not found' ) end if end do end function function toml_require_double_array2 ( self , name1 , name2 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 double precision , allocatable :: ret (:) integer :: stat type ( toml_array ), pointer :: array integer :: ival array => self % require_array ( name1 , name2 ) allocate ( ret ( len ( array ))) do ival = 1 , size ( ret ) call get_value ( array , ival , ret ( ival ), stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Double precision ' // name1 // '.' // name2 // ' is not found' ) end if end do end function function toml_require_double_array3 ( self , name1 , name2 , name3 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 double precision , allocatable :: ret (:) integer :: stat type ( toml_array ), pointer :: array integer :: ival array => self % require_array ( name1 , name2 , name3 ) allocate ( ret ( len ( array ))) do ival = 1 , size ( ret ) call get_value ( array , ival , ret ( ival ), stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Double precision ' // name1 // '.' // name2 // '.' // name3 // ' is not found' ) end if end do end function function toml_require_double_array4 ( self , name1 , name2 , name3 , name4 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 character ( len =* ), intent ( in ) :: name4 double precision , allocatable :: ret (:) integer :: stat type ( toml_array ), pointer :: array integer :: ival array => self % require_array ( name1 , name2 , name3 , name4 ) allocate ( ret ( len ( array ))) do ival = 1 , size ( ret ) call get_value ( array , ival , ret ( ival ), stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'Double precision ' // name1 // '.' // name2 // '.' // name3 // '.' // name4 // ' is not found' ) end if end do end function function toml_require_string_array1 ( self , name ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name type ( t_StringHolder ), allocatable :: ret (:) integer :: stat type ( toml_array ), pointer :: array integer :: ival array => self % require_array ( name ) allocate ( ret ( len ( array ))) do ival = 1 , size ( ret ) call get_value ( array , ival , ret ( ival )% string , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'String array ' // name // ' is not found' ) end if end do end function function toml_require_string_array2 ( self , name1 , name2 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 type ( t_StringHolder ), allocatable :: ret (:) integer :: stat type ( toml_array ), pointer :: array integer :: ival array => self % require_array ( name1 , name2 ) allocate ( ret ( len ( array ))) do ival = 1 , size ( ret ) call get_value ( array , ival , ret ( ival )% string , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'String array ' // name1 // '.' // name2 // ' is not found' ) end if end do end function function toml_require_string_array3 ( self , name1 , name2 , name3 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 type ( t_StringHolder ), allocatable :: ret (:) integer :: stat type ( toml_array ), pointer :: array integer :: ival array => self % require_array ( name1 , name2 , name3 ) allocate ( ret ( len ( array ))) do ival = 1 , size ( ret ) call get_value ( array , ival , ret ( ival )% string , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'String array ' // name1 // '.' // name2 // '.' // name3 // ' is not found' ) end if end do end function function toml_require_string_array4 ( self , name1 , name2 , name3 , name4 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 character ( len =* ), intent ( in ) :: name4 type ( t_StringHolder ), allocatable :: ret (:) integer :: stat type ( toml_array ), pointer :: array integer :: ival array => self % require_array ( name1 , name2 , name3 , name4 ) allocate ( ret ( len ( array ))) do ival = 1 , size ( ret ) call get_value ( array , ival , ret ( ival )% string , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'String array ' // name1 // '.' // name2 // '.' // name3 // '.' // name4 // ' is not found' ) end if end do end function function toml_require_string_array2d1 ( self , name ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name type ( t_StringHolder ), allocatable :: ret (:, :) integer :: stat type ( toml_array ), pointer :: array1 type ( toml_array ), pointer :: array2 integer :: ival1 , ival2 array1 => self % require_array ( name ) do ival1 = 1 , len ( array1 ) call get_value ( array1 , ival1 , array2 , stat = stat ) if (. not . allocated ( ret )) then allocate ( ret ( len ( array2 ), len ( array1 ))) end if if ( stat /= toml_stat % success ) then call error_stop ( 'String array 2d ' // name // ' is not found' ) end if do ival2 = 1 , len ( array2 ) call get_value ( array2 , ival1 , ret ( ival1 , ival2 )% string , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'String array 2d ' // name // ' is not found' ) end if end do end do end function function toml_require_string_array2d2 ( self , name1 , name2 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 type ( t_StringHolder ), allocatable :: ret (:, :) integer :: stat type ( toml_array ), pointer :: array1 type ( toml_array ), pointer :: array2 integer :: ival1 , ival2 array1 => self % require_array ( name1 , name2 ) do ival1 = 1 , len ( array1 ) call get_value ( array1 , ival1 , array2 , stat = stat ) if (. not . allocated ( ret )) then allocate ( ret ( len ( array2 ), len ( array1 ))) end if if ( stat /= toml_stat % success ) then call error_stop ( 'String array 2d ' // name1 // '.' // name2 // ' is not found' ) end if do ival2 = 1 , len ( array2 ) call get_value ( array2 , ival1 , ret ( ival1 , ival2 )% string , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'String array 2d ' // name1 // '.' // name2 // ' is not found' ) end if end do end do end function function toml_require_string_array2d3 ( self , name1 , name2 , name3 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 type ( t_StringHolder ), allocatable :: ret (:, :) integer :: stat type ( toml_array ), pointer :: array1 type ( toml_array ), pointer :: array2 integer :: ival1 , ival2 array1 => self % require_array ( name1 , name2 , name3 ) do ival1 = 1 , len ( array1 ) call get_value ( array1 , ival1 , array2 , stat = stat ) if (. not . allocated ( ret )) then allocate ( ret ( len ( array2 ), len ( array1 ))) end if if ( stat /= toml_stat % success ) then call error_stop ( 'String array 2d ' // name1 // '.' // name2 // ' is not found' ) end if do ival2 = 1 , len ( array2 ) call get_value ( array2 , ival1 , ret ( ival1 , ival2 )% string , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'String array 2d ' // name1 // '.' // name2 // ' is not found' ) end if end do end do end function function toml_require_string_array2d4 ( self , name1 , name2 , name3 , name4 ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len =* ), intent ( in ) :: name1 character ( len =* ), intent ( in ) :: name2 character ( len =* ), intent ( in ) :: name3 character ( len =* ), intent ( in ) :: name4 type ( t_StringHolder ), allocatable :: ret (:, :) integer :: stat type ( toml_array ), pointer :: array1 type ( toml_array ), pointer :: array2 integer :: ival1 , ival2 array1 => self % require_array ( name1 , name2 , name3 , name4 ) do ival1 = 1 , len ( array1 ) call get_value ( array1 , ival1 , array2 , stat = stat ) if (. not . allocated ( ret )) then allocate ( ret ( len ( array2 ), len ( array1 ))) end if if ( stat /= toml_stat % success ) then call error_stop ( 'String array 2d ' // name1 // '.' // name2 // ' is not found' ) end if do ival2 = 1 , len ( array2 ) call get_value ( array2 , ival1 , ret ( ival1 , ival2 )% string , stat = stat ) if ( stat /= toml_stat % success ) then call error_stop ( 'String array 2d ' // name1 // '.' // name2 // ' is not found' ) end if end do end do end function function toml_to_string ( self ) result ( ret ) class ( t_TomlWrapper ), intent ( inout ) :: self character ( len = :), allocatable :: ret ret = toml_serialize ( self % table ) end function end module","tags":"","loc":"sourcefile/toml_wrapper.f90.html"},{"title":"hdf5_for_ohfield.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~hdf5_for_ohfield.f90~~EfferentGraph sourcefile~hdf5_for_ohfield.f90 hdf5_for_ohfield.f90 sourcefile~domain.f90 domain.f90 sourcefile~hdf5_for_ohfield.f90->sourcefile~domain.f90 sourcefile~hdf5.f90 hdf5.f90 sourcefile~hdf5_for_ohfield.f90->sourcefile~hdf5.f90 sourcefile~ohfield.f90 ohfield.f90 sourcefile~hdf5_for_ohfield.f90->sourcefile~ohfield.f90 sourcefile~hdf5.f90->sourcefile~domain.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~hdf5_for_ohfield.f90~~AfferentGraph sourcefile~hdf5_for_ohfield.f90 hdf5_for_ohfield.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~hdf5_for_ohfield.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_hdf5_for_ohfield Source Code hdf5_for_ohfield.f90 Source Code module m_hdf5_for_ohfield use m_hdf5 use m_ohfield use m_domain implicit none private public t_Hdf5ForOhfield public new_Hdf5ForOhfield type :: t_Hdf5ForOhfield type ( t_HDF5File ) :: hdf5 type ( t_HDF5Group ) :: group character (:), allocatable :: filename character (:), allocatable :: group_name integer ( kind = 8 ) :: global_shape ( 3 ) integer ( kind = 8 ) :: global_offset ( 3 ) contains procedure :: write => hdf5ForOhfield_write procedure :: close => hdf5ForOhfield_close end type contains function new_Hdf5ForOhfield ( filename , group_name , global_shape , global_offset , comm ) result ( obj ) character ( * ), intent ( in ) :: filename character ( * ), intent ( in ) :: group_name integer ( kind = 8 ), intent ( in ) :: global_shape ( 3 ) integer ( kind = 8 ), intent ( in ) :: global_offset ( 3 ) integer , intent ( in ) :: comm type ( t_Hdf5ForOhfield ) :: obj obj % filename = filename obj % group_name = group_name obj % global_shape = global_shape obj % global_offset = global_offset obj % hdf5 = new_HDF5File ( filename , 'w' , comm ) obj % group = obj % hdf5 % create_group ( group_name ) end function subroutine hdf5ForOhfield_write ( self , dataset_name , ohfield , ps ) class ( t_Hdf5ForOhfield ), intent ( in ) :: self character ( * ), intent ( in ) :: dataset_name class ( t_OhField ), intent ( in ) :: ohfield integer , intent ( in ) :: ps integer :: xl , xu , yl , yu , zl , zu integer :: status type ( t_SubDomain3d ) :: domain_info xl = ohfield % subdomain_range ( 1 , 1 , ps ) xu = ohfield % subdomain_range ( 2 , 1 , ps ) yl = ohfield % subdomain_range ( 1 , 2 , ps ) yu = ohfield % subdomain_range ( 2 , 2 , ps ) zl = ohfield % subdomain_range ( 1 , 3 , ps ) zu = ohfield % subdomain_range ( 2 , 3 , ps ) block integer ( kind = 8 ) :: local_shape ( 3 ) integer ( kind = 8 ) :: local_offset ( 3 ) local_shape (:) = ohfield % local_shape ( ps ) local_offset (:) = [ xl , yl , zl ] domain_info = new_SubDomain3d ( & local_shape , & local_offset , & self % global_shape , & self % global_offset ) end block call self % group % write_dataset ( dataset_name , & ohfield % values ( 1 , 0 : xu - xl , 0 : yu - yl , 0 : zu - zl , ps ), & domain_info , & status ) end subroutine subroutine hdf5ForOhfield_close ( self ) class ( t_Hdf5ForOhfield ), intent ( in ) :: self integer :: status call self % group % close ( status ) call self % hdf5 % close ( status ) end subroutine end module","tags":"","loc":"sourcefile/hdf5_for_ohfield.f90.html"},{"title":"hdf5.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~hdf5.f90~~EfferentGraph sourcefile~hdf5.f90 hdf5.f90 sourcefile~domain.f90 domain.f90 sourcefile~hdf5.f90->sourcefile~domain.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~hdf5.f90~~AfferentGraph sourcefile~hdf5.f90 hdf5.f90 sourcefile~hdf5_for_ohfield.f90 hdf5_for_ohfield.f90 sourcefile~hdf5_for_ohfield.f90->sourcefile~hdf5.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~hdf5.f90 sourcefile~ohhelppic3d.f90->sourcefile~hdf5_for_ohfield.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_hdf5 Source Code hdf5.f90 Source Code module m_hdf5 use mpi use HDF5 use m_domain implicit none private public hdf5_initialize , hdf5_finalize public t_HDF5Group public t_HDF5File , new_HDF5File type :: t_HDF5Group character (:), allocatable :: name !! Group name integer ( kind = HID_T ) :: id !! Group id character :: mode !! Access mode (r: readonly, w: writeonly, a: read/write) contains procedure , private :: write_double3d => hdf5Group_write_dataset3d_double generic :: write_dataset => write_double3d procedure :: create_group => hdf5Group_create_group procedure :: close => hdf5Group_close end type type , extends ( t_HDF5Group ) :: t_HDF5File character (:), allocatable :: filename !! File name contains procedure :: close => hdf5File_close end type contains subroutine hdf5_initialize ( status ) integer , intent ( out ) :: status call h5open_f ( status ) call h5eset_auto_f ( 0 , status ) end subroutine subroutine hdf5_finalize ( status ) integer , intent ( out ) :: status call h5close_f ( status ) end subroutine function new_HDF5File ( filename , mode , comm ) result ( obj ) character ( * ), intent ( in ) :: filename !! File name to create or open character , intent ( in ) :: mode !! Access mode (r: readonly, w: writeonly, a: read/write) integer , intent ( in ) :: comm !! MPI communicator type ( t_HDF5File ) :: obj integer :: hdferr !! Error status integer ( kind = HID_T ) :: prp_id !! Property list id obj % mode = mode obj % filename = filename obj % name = filename ! Configure property list for MPI parallel access. call h5pcreate_f ( H5P_FILE_ACCESS_F , prp_id , hdferr ) call h5pset_fapl_mpio_f ( prp_id , comm , MPI_INFO_NULL , hdferr ) if ( mode == 'r' ) then call h5fopen_f ( filename , H5F_ACC_RDONLY_F , obj % id , hdferr , access_prp = prp_id ) else if ( mode == 'w' ) then call h5fcreate_f ( filename , H5F_ACC_TRUNC_F , obj % id , hdferr , access_prp = prp_id ) else if ( mode == 'a' ) then call h5fopen_f ( filename , H5F_ACC_RDWR_F , obj % id , hdferr , access_prp = prp_id ) end if call h5pclose_f ( prp_id , hdferr ) end function function hdf5Group_create_group ( self , name ) result ( group ) class ( t_HDF5Group ), intent ( in ) :: self character ( * ), intent ( in ) :: name type ( t_HDF5Group ) :: group integer :: hdferr !! Error status group % name = name group % mode = self % mode if ( self % mode == 'w' ) then call h5gcreate_f ( self % id , name , group % id , hdferr ) else call h5gopen_f ( self % id , name , group % id , hdferr ) end if end function subroutine hdf5Group_read_dataset1d_int ( self , dataset_name , dataset , status ) class ( t_HDF5Group ), intent ( in ) :: self character ( * ), intent ( in ) :: dataset_name integer , intent ( out ) :: dataset (:) integer , intent ( out ) :: status integer , parameter :: ndims = 1 integer ( kind = HSIZE_T ) :: dims ( ndims ) integer :: dataset_ndim integer ( kind = HSIZE_T ) :: dataset_dims ( ndims ), dataset_maxdims ( ndims ) integer ( kind = HID_T ) :: dataset_id integer ( kind = HID_T ) :: space_id integer :: idim dims = shape ( dataset ) call h5dopen_f ( self % id , dataset_name , dataset_id , status ) if ( status /= 0 ) then print * , 'InvalidDatasetNameError: dataset name is invalid:' , dataset_name return end if call h5dget_space_f ( dataset_id , space_id , status ) call h5sget_simple_extent_ndims_f ( space_id , dataset_ndim , status ) if ( dataset_ndim /= ndims ) then print * , 'InvalidDatasetRankError: dataset rank is invalid:' , dataset_ndim return end if call h5sget_simple_extent_dims_f ( space_id , dataset_dims , dataset_maxdims , status ) do idim = 1 , ndims if ( dataset_dims ( idim ) > dims ( idim )) then print * , 'InvalidDatasetDimensionError: dataset dimension is too large:' , dataset_dims return end if end do call h5dread_f ( dataset_id , H5T_NATIVE_INTEGER , dataset , dims , status ) if ( status /= 0 ) then return end if call h5sclose_f ( space_id , status ) call h5dclose_f ( dataset_id , status ) end subroutine subroutine hdf5Group_write_dataset3d_double ( self , dataset_name , dataset , subdomain_info , status ) class ( t_HDF5Group ), intent ( in ) :: self character ( * ), intent ( in ) :: dataset_name double precision , intent ( in ) :: dataset (:, :, :) type ( t_SubDomain3d ), intent ( in ) :: subdomain_info integer , intent ( out ) :: status integer , parameter :: ndims = 3 integer ( kind = HID_T ) :: memory_space_id integer ( kind = HID_T ) :: file_space_id integer ( kind = HID_T ) :: dataset_id integer ( kind = HID_T ) :: property_id ! Create global dataset call h5screate_simple_f ( ndims , subdomain_info % global_shape , file_space_id , status ) call h5dcreate_f ( self % id , dataset_name , H5T_NATIVE_DOUBLE , file_space_id , dataset_id , status ) call h5sclose_f ( file_space_id , status ) ! Create local memory_space call h5screate_simple_f ( ndims , subdomain_info % local_shape , memory_space_id , status ) ! Create global file_space call h5dget_space_f ( dataset_id , file_space_id , status ) ! Convert local file_space call h5sselect_hyperslab_f ( file_space_id , H5S_SELECT_SET_F , subdomain_info % local_offset , subdomain_info % local_shape , status ) ! Set MPI collective call h5pcreate_f ( H5P_DATASET_XFER_F , property_id , status ) call h5pset_dxpl_mpio_f ( property_id , H5FD_MPIO_COLLECTIVE_F , status ) call h5dwrite_f ( dataset_id , & H5T_NATIVE_DOUBLE , & dataset , & subdomain_info % global_shape , & status , & file_space_id = file_space_id , & mem_space_id = memory_space_id , & xfer_prp = property_id ) call h5pclose_f ( property_id , status ) call h5sclose_f ( file_space_id , status ) call h5sclose_f ( memory_space_id , status ) call h5dclose_f ( dataset_id , status ) end subroutine subroutine hdf5Group_close ( self , status ) class ( t_HDF5Group ), intent ( in ) :: self integer , intent ( out ) :: status call h5gclose_f ( self % id , status ) end subroutine subroutine hdf5File_close ( self , status ) class ( t_HDF5File ), intent ( in ) :: self integer , intent ( out ) :: status call h5fclose_f ( self % id , status ) end subroutine end module","tags":"","loc":"sourcefile/hdf5.f90.html"},{"title":"domain.f90 – ohhelp-pic-3d","text":"Files dependent on this one sourcefile~~domain.f90~~AfferentGraph sourcefile~domain.f90 domain.f90 sourcefile~hdf5.f90 hdf5.f90 sourcefile~hdf5.f90->sourcefile~domain.f90 sourcefile~hdf5_for_ohfield.f90 hdf5_for_ohfield.f90 sourcefile~hdf5_for_ohfield.f90->sourcefile~domain.f90 sourcefile~hdf5_for_ohfield.f90->sourcefile~hdf5.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~domain.f90 sourcefile~ohhelppic3d.f90->sourcefile~hdf5.f90 sourcefile~ohhelppic3d.f90->sourcefile~hdf5_for_ohfield.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_domain Source Code domain.f90 Source Code module m_domain type :: t_SubDomain3d integer ( kind = 8 ) :: local_shape ( 3 ) integer ( kind = 8 ) :: local_offset ( 3 ) integer ( kind = 8 ) :: global_shape ( 3 ) integer ( kind = 8 ) :: global_offset ( 3 ) end type private public t_SubDomain3d , new_SubDomain3d contains function new_SubDomain3d ( local_shape , local_offset , global_shape , global_offset ) result ( obj ) integer ( kind = 8 ), intent ( in ) :: local_shape ( 3 ) integer ( kind = 8 ), intent ( in ) :: local_offset ( 3 ) integer ( kind = 8 ), intent ( in ) :: global_shape ( 3 ) integer ( kind = 8 ), intent ( in ) :: global_offset ( 3 ) type ( t_SubDomain3d ) :: obj obj % local_shape = local_shape obj % local_offset = local_offset obj % global_shape = global_shape obj % global_offset = global_offset end function end module","tags":"","loc":"sourcefile/domain.f90.html"},{"title":"particle_boundaries.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~particle_boundaries.f90~~EfferentGraph sourcefile~particle_boundaries.f90 particle_boundaries.f90 sourcefile~particle_boundary.f90 particle_boundary.f90 sourcefile~particle_boundaries.f90->sourcefile~particle_boundary.f90 sourcefile~periodic_particle_boundary.f90 periodic_particle_boundary.f90 sourcefile~particle_boundaries.f90->sourcefile~periodic_particle_boundary.f90 sourcefile~periodic_particle_boundary.f90->sourcefile~particle_boundary.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~particle_boundaries.f90~~AfferentGraph sourcefile~particle_boundaries.f90 particle_boundaries.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_boundaries.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_particle_boundaries Source Code particle_boundaries.f90 Source Code module m_particle_boundaries use m_particle_boundary use oh_type , only : oh_particle use m_periodic_particle_boundary implicit none private public t_ParticleBoundaries public new_ParticleBoundaries type :: t_ParticleBoundaryHolder class ( t_ParticleBoundary ), allocatable :: particle_boundary end type type , extends ( t_ParticleBoundary ) :: t_ParticleBoundaries type ( t_ParticleBoundaryHolder ) :: particle_boundaries ( 3 ) contains procedure :: apply => particleBoundaries_apply end type contains function new_ParticleBoundaries ( nx , ny , nz ) result ( obj ) integer , intent ( in ) :: nx integer , intent ( in ) :: ny integer , intent ( in ) :: nz type ( t_ParticleBoundaries ) :: obj obj % particle_boundaries ( 1 )% particle_boundary = new_PeriodicParticleBoundary ( 1 , nx ) obj % particle_boundaries ( 2 )% particle_boundary = new_PeriodicParticleBoundary ( 2 , ny ) obj % particle_boundaries ( 3 )% particle_boundary = new_PeriodicParticleBoundary ( 3 , nz ) end function subroutine particleBoundaries_apply ( self , particle , dt ) class ( t_ParticleBoundaries ), intent ( in ) :: self type ( oh_particle ), intent ( inout ) :: particle double precision , intent ( in ) :: dt integer :: i do i = 1 , size ( self % particle_boundaries ) call self % particle_boundaries ( i )% particle_boundary % apply ( particle , dt ) end do end subroutine end module","tags":"","loc":"sourcefile/particle_boundaries.f90.html"},{"title":"periodic_particle_boundary.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~periodic_particle_boundary.f90~~EfferentGraph sourcefile~periodic_particle_boundary.f90 periodic_particle_boundary.f90 sourcefile~particle_boundary.f90 particle_boundary.f90 sourcefile~periodic_particle_boundary.f90->sourcefile~particle_boundary.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~periodic_particle_boundary.f90~~AfferentGraph sourcefile~periodic_particle_boundary.f90 periodic_particle_boundary.f90 sourcefile~particle_boundaries.f90 particle_boundaries.f90 sourcefile~particle_boundaries.f90->sourcefile~periodic_particle_boundary.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_boundaries.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_periodic_particle_boundary Source Code periodic_particle_boundary.f90 Source Code module m_periodic_particle_boundary use m_particle_boundary use oh_type , only : oh_particle implicit none private public new_PeriodicParticleBoundary type , extends ( t_ParticleBoundary ) :: t_PeriodicParticleBoundary integer :: axis integer :: n contains procedure :: apply => periodicParticleBoundary_apply end type contains function new_PeriodicParticleBoundary ( axis , n ) result ( obj ) integer , intent ( in ) :: axis integer :: n type ( t_PeriodicParticleBoundary ) :: obj obj % axis = axis obj % n = n end function subroutine periodicParticleBoundary_apply ( self , particle , dt ) class ( t_PeriodicParticleBoundary ), intent ( in ) :: self type ( oh_particle ), intent ( inout ) :: particle double precision , intent ( in ) :: dt select case ( self % axis ) case ( 1 ) call apply_periodic ( self % n , particle % x ) case ( 2 ) call apply_periodic ( self % n , particle % y ) case ( 3 ) call apply_periodic ( self % n , particle % z ) end select end subroutine subroutine apply_periodic ( n , p ) integer , intent ( in ) :: n double precision , intent ( inout ) :: p if ( p < 0 ) then p = n + p end if if ( p >= n ) then p = p - n end if end subroutine end module","tags":"","loc":"sourcefile/periodic_particle_boundary.f90.html"},{"title":"particle_boundary.f90 – ohhelp-pic-3d","text":"Files dependent on this one sourcefile~~particle_boundary.f90~~AfferentGraph sourcefile~particle_boundary.f90 particle_boundary.f90 sourcefile~particle_boundaries.f90 particle_boundaries.f90 sourcefile~particle_boundaries.f90->sourcefile~particle_boundary.f90 sourcefile~periodic_particle_boundary.f90 periodic_particle_boundary.f90 sourcefile~particle_boundaries.f90->sourcefile~periodic_particle_boundary.f90 sourcefile~periodic_particle_boundary.f90->sourcefile~particle_boundary.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_boundaries.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_particle_boundary Source Code particle_boundary.f90 Source Code module m_particle_boundary use oh_type implicit none private public t_ParticleBoundary type , abstract :: t_ParticleBoundary contains procedure ( particleBoundary_apply ), deferred :: apply end type interface subroutine particleBoundary_apply ( self , particle , dt ) import t_ParticleBoundary import oh_particle class ( t_ParticleBoundary ), intent ( in ) :: self type ( oh_particle ), intent ( inout ) :: particle double precision , intent ( in ) :: dt end subroutine end interface contains end module","tags":"","loc":"sourcefile/particle_boundary.f90.html"},{"title":"particle_mover_boris.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~particle_mover_boris.f90~~EfferentGraph sourcefile~particle_mover_boris.f90 particle_mover_boris.f90 sourcefile~particle_mover.f90 particle_mover.f90 sourcefile~particle_mover_boris.f90->sourcefile~particle_mover.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~particle_mover_boris.f90~~AfferentGraph sourcefile~particle_mover_boris.f90 particle_mover_boris.f90 sourcefile~particle_mover_factory.f90 particle_mover_factory.f90 sourcefile~particle_mover_factory.f90->sourcefile~particle_mover_boris.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_mover_factory.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_particle_mover_boris Source Code particle_mover_boris.f90 Source Code module m_particle_mover_boris use m_vector , only : cross use oh_type , only : oh_particle use m_particle_mover , only : t_ParticleMover implicit none private public t_ParticleMoverBoris , new_ParticleMoverBoris type , extends ( t_ParticleMover ) :: t_ParticleMoverBoris contains procedure :: move => boris_move end type contains function new_ParticleMoverBoris () result ( obj ) type ( t_ParticleMoverBoris ) :: obj end function subroutine boris_move ( self , particle , qm , eb , dt ) class ( t_ParticleMoverBoris ), intent ( in ) :: self type ( oh_particle ), intent ( inout ) :: particle double precision , intent ( in ) :: qm double precision , intent ( in ) :: eb ( 6 ) double precision :: dt block double precision :: ef ( 3 ), bf ( 3 ) double precision :: uold ( 3 ), unew ( 3 ) double precision :: upm ( 3 ), upa ( 3 ), upp ( 3 ) double precision :: s ( 3 ), t ( 3 ) double precision :: dt2 ! Velocity update dt2 = dt * 0.5d0 ef (:) = eb ( 1 : 3 ) bf (:) = eb ( 4 : 6 ) t (:) = qm * bf (:) * dt2 s (:) = 2 * t (:) / ( 1 + sum ( t (:) * t (:))) uold (:) = [ particle % vx , particle % vy , particle % vz ] upm (:) = uold (:) + qm * ef (:) * dt2 upa (:) = upm (:) + cross ( upm , t ) upp (:) = upm (:) + cross ( upa , s ) unew (:) = upp (:) + qm * ef (:) * dt2 particle % vx = unew ( 1 ) particle % vy = unew ( 2 ) particle % vz = unew ( 3 ) end block ! Position update particle % x = particle % x + particle % vx * dt particle % y = particle % y + particle % vy * dt particle % z = particle % z + particle % vz * dt end subroutine end module","tags":"","loc":"sourcefile/particle_mover_boris.f90.html"},{"title":"particle_mover_factory.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~particle_mover_factory.f90~~EfferentGraph sourcefile~particle_mover_factory.f90 particle_mover_factory.f90 sourcefile~particle_mover.f90 particle_mover.f90 sourcefile~particle_mover_factory.f90->sourcefile~particle_mover.f90 sourcefile~particle_mover_boris.f90 particle_mover_boris.f90 sourcefile~particle_mover_factory.f90->sourcefile~particle_mover_boris.f90 sourcefile~particle_mover_boris.f90->sourcefile~particle_mover.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~particle_mover_factory.f90~~AfferentGraph sourcefile~particle_mover_factory.f90 particle_mover_factory.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_mover_factory.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_particle_mover_factory Source Code particle_mover_factory.f90 Source Code module m_particle_mover_factory use m_particle_mover , only : t_ParticleMover use m_particle_mover_boris , only : t_ParticleMoverBoris , new_ParticleMoverBoris private public t_ParticleMoverFactory , new_ParticleMoverFactory type t_ParticleMoverFactory contains procedure :: create_particle_mover => factory_create_particle_mover end type contains function new_ParticleMoverFactory () result ( obj ) type ( t_ParticleMoverFactory ) :: obj end function function factory_create_particle_mover ( self , name ) result ( particle_mover ) class ( t_ParticleMoverFactory ), intent ( in ) :: self character ( len =* ), intent ( in ) :: name class ( t_ParticleMover ), allocatable :: particle_mover select case ( name ) case ( 'boris' ) allocate ( particle_mover , source = new_ParticleMoverBoris ()) case default ! TODO: エラー出力? end select end function end module","tags":"","loc":"sourcefile/particle_mover_factory.f90.html"},{"title":"particle_mover.f90 – ohhelp-pic-3d","text":"Files dependent on this one sourcefile~~particle_mover.f90~~AfferentGraph sourcefile~particle_mover.f90 particle_mover.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_mover.f90 sourcefile~particle_mover_factory.f90 particle_mover_factory.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_mover_factory.f90 sourcefile~particle_mover_boris.f90 particle_mover_boris.f90 sourcefile~particle_mover_boris.f90->sourcefile~particle_mover.f90 sourcefile~particle_mover_factory.f90->sourcefile~particle_mover.f90 sourcefile~particle_mover_factory.f90->sourcefile~particle_mover_boris.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_particle_mover Source Code particle_mover.f90 Source Code module m_particle_mover use oh_type , only : oh_particle implicit none private public t_ParticleMover type , abstract :: t_ParticleMover contains procedure ( particleMover_move ), deferred :: move end type interface subroutine particleMover_move ( self , particle , qm , eb , dt ) import t_ParticleMover import oh_particle class ( t_ParticleMover ), intent ( in ) :: self type ( oh_particle ), intent ( inout ) :: particle double precision , intent ( in ) :: qm double precision , intent ( in ) :: eb ( 6 ) double precision :: dt end subroutine end interface end module","tags":"","loc":"sourcefile/particle_mover.f90.html"},{"title":"science_constants.f90 – ohhelp-pic-3d","text":"Files dependent on this one sourcefile~~science_constants.f90~~AfferentGraph sourcefile~science_constants.f90 science_constants.f90 sourcefile~parameters.f90 parameters.f90 sourcefile~parameters.f90->sourcefile~science_constants.f90 sourcefile~poisson_solver.f90 poisson_solver.f90 sourcefile~poisson_solver.f90->sourcefile~science_constants.f90 sourcefile~random_generator.f90 random_generator.f90 sourcefile~random_generator.f90->sourcefile~science_constants.f90 sourcefile~maxwellian_velocity_distribution1d.f90 maxwellian_velocity_distribution1d.f90 sourcefile~maxwellian_velocity_distribution1d.f90->sourcefile~random_generator.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~parameters.f90 sourcefile~ohhelppic3d.f90->sourcefile~poisson_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~random_generator.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~pcg_generator.f90 pcg_generator.f90 sourcefile~ohhelppic3d.f90->sourcefile~pcg_generator.f90 sourcefile~particle_injector_manager.f90->sourcefile~parameters.f90 sourcefile~particle_injector_manager.f90->sourcefile~random_generator.f90 sourcefile~particle_injector_with_distribution.f90 particle_injector_with_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector_with_distribution.f90 sourcefile~position_random_uniform_distribution.f90 position_random_uniform_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~position_random_uniform_distribution.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~random_generator.f90 sourcefile~pcg_generator.f90->sourcefile~random_generator.f90 sourcefile~position_random_uniform_distribution.f90->sourcefile~random_generator.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_science_constants Source Code science_constants.f90 Source Code module m_science_constants implicit none double precision , parameter :: pi = 3.14159265358979d0 double precision , parameter :: elemental_charge = 1.602176634d-19 double precision , parameter :: electron_mass = 9.1093837015d-31 end module","tags":"","loc":"sourcefile/science_constants.f90.html"},{"title":"particle_injector_manager.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~particle_injector_manager.f90~~EfferentGraph sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~no_particle_injector.f90 no_particle_injector.f90 sourcefile~particle_injector_manager.f90->sourcefile~no_particle_injector.f90 sourcefile~no_position_distribution.f90 no_position_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~no_position_distribution.f90 sourcefile~ohhelp.f90 ohhelp.f90 sourcefile~particle_injector_manager.f90->sourcefile~ohhelp.f90 sourcefile~parameters.f90 parameters.f90 sourcefile~particle_injector_manager.f90->sourcefile~parameters.f90 sourcefile~particle_injector.f90 particle_injector.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector.f90 sourcefile~particle_injector_with_distribution.f90 particle_injector_with_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector_with_distribution.f90 sourcefile~position_distribution.f90 position_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~position_distribution.f90 sourcefile~position_random_uniform_distribution.f90 position_random_uniform_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~position_random_uniform_distribution.f90 sourcefile~random_generator.f90 random_generator.f90 sourcefile~particle_injector_manager.f90->sourcefile~random_generator.f90 sourcefile~toml_wrapper.f90 toml_wrapper.f90 sourcefile~particle_injector_manager.f90->sourcefile~toml_wrapper.f90 sourcefile~velocity_distribution.f90 velocity_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~velocity_distribution.f90 sourcefile~velocity_maxwell_distribution.f90 velocity_maxwell_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~velocity_maxwell_distribution.f90 sourcefile~no_particle_injector.f90->sourcefile~ohhelp.f90 sourcefile~no_particle_injector.f90->sourcefile~particle_injector.f90 sourcefile~no_position_distribution.f90->sourcefile~position_distribution.f90 sourcefile~ohfield.f90 ohfield.f90 sourcefile~ohhelp.f90->sourcefile~ohfield.f90 sourcefile~ohparticles.f90 ohparticles.f90 sourcefile~ohhelp.f90->sourcefile~ohparticles.f90 sourcefile~parameters.f90->sourcefile~toml_wrapper.f90 sourcefile~science_constants.f90 science_constants.f90 sourcefile~parameters.f90->sourcefile~science_constants.f90 sourcefile~particle_injector.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~particle_injector.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~position_distribution.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~random_generator.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~velocity_distribution.f90 sourcefile~position_random_uniform_distribution.f90->sourcefile~position_distribution.f90 sourcefile~position_random_uniform_distribution.f90->sourcefile~random_generator.f90 sourcefile~random_generator.f90->sourcefile~science_constants.f90 sourcefile~velocity_maxwell_distribution.f90->sourcefile~velocity_distribution.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~particle_injector_manager.f90~~AfferentGraph sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_particle_injector_manager Source Code particle_injector_manager.f90 Source Code module m_particle_injector_manager use m_particle_injector use m_ohhelp use m_parameters use m_toml_wrapper , only : t_StringHolder use m_particle_injector_with_distribution , only : t_ParticleInjectorWithDistribution , & new_ParticleInjectorWithDistribution use m_position_distribution use m_no_position_distribution use m_position_random_uniform_distribution use m_velocity_distribution use m_maxwellian_distribution use m_no_particle_injector use m_random_generator implicit none public t_ParticleInjectorManager , new_ParticleInjectorManager type t_ParticleInjectorHolder class ( t_ParticleInjector ), allocatable :: injector end type ! TODO: Change the name if come up with a name other than \"Manager\" ! TODO: Injector, Manager, Distributionとクラス関係が必要以上に複雑なのでいくつか統合 or 抽出を検討 type t_ParticleInjectorManager type ( t_ParticleInjectorHolder ), allocatable :: injectors_for_initialization (:) type ( t_ParticleInjectorHolder ), allocatable :: injectors_for_injection (:) class ( t_RandomGenerator ), pointer :: random_generator contains procedure :: inject_particles => particleInjectorManager_inject_particles procedure :: initialize_particles => particleInjectorManager_initialize_particles end type contains function new_ParticleInjectorManager ( parameters , random_generator ) result ( obj ) type ( t_ParticleInjectorManager ) :: obj class ( t_Parameters ), intent ( inout ) :: parameters class ( t_RandomGenerator ), pointer , intent ( in ) :: random_generator integer :: ispec character (:), allocatable :: init_type obj % random_generator => random_generator allocate ( obj % injectors_for_initialization ( parameters % nspecies )) do ispec = 1 , parameters % nspecies init_type = parameters % plasma_initialization ( ispec )% string select case ( init_type ) case ( 'random-uniform' ) block class ( t_PositionDistribution3d ), allocatable :: pdist class ( t_VelocityDistribution3d ), allocatable :: vdist pdist = new_SimplePositionDistribution3d ( & new_PositionRandomUniformDistribution1d ([ 0 d0 , 1 d0 * parameters % nx ], obj % random_generator ), & new_PositionRandomUniformDistribution1d ([ 0 d0 , 1 d0 * parameters % ny ], obj % random_generator ), & new_PositionRandomUniformDistribution1d ([ 0 d0 , 1 d0 * parameters % nz ], obj % random_generator )) vdist = new_NoVelocityDistribution3d () obj % injectors_for_initialization ( ispec )% injector = & new_ParticleInjectorWithDistribution ( ispec , pdist , vdist , obj % random_generator ) end block case ( 'none' ) block obj % injectors_for_initialization ( ispec )% injector = new_NoParticleInjector () end block end select end do ! TODO:実装 block integer :: nemission_types nemission_types = parameters % toml % require_int ( 'plasma' , 'injection' , 'nemission_types' ) allocate ( obj % injectors_for_injection ( nemission_types )) end block end function subroutine particleInjectorManager_initialize_particles ( self , ohhelp ) class ( t_ParticleInjectorManager ), intent ( in ) :: self class ( t_OhHelp ), intent ( inout ) :: ohhelp integer :: i do i = 1 , size ( self % injectors_for_initialization ) ! パラメータファイルからの入力に変更 call self % injectors_for_initialization ( i )% injector % inject_particles ( 8 * 4 * 16 * 10 , ohhelp ) end do end subroutine subroutine particleInjectorManager_inject_particles ( self , dt , ohhelp ) class ( t_ParticleInjectorManager ), intent ( in ) :: self double precision , intent ( in ) :: dt class ( t_OhHelp ), intent ( inout ) :: ohhelp integer :: i ! do i = 1, size(self%injectors_for_injection) !     call self%injectors_for_injection(i)%injector%inject_particles(1000, ohhelp) ! end do end subroutine end module","tags":"","loc":"sourcefile/particle_injector_manager.f90.html"},{"title":"no_particle_injector.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~no_particle_injector.f90~~EfferentGraph sourcefile~no_particle_injector.f90 no_particle_injector.f90 sourcefile~ohhelp.f90 ohhelp.f90 sourcefile~no_particle_injector.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector.f90 particle_injector.f90 sourcefile~no_particle_injector.f90->sourcefile~particle_injector.f90 sourcefile~ohfield.f90 ohfield.f90 sourcefile~ohhelp.f90->sourcefile~ohfield.f90 sourcefile~ohparticles.f90 ohparticles.f90 sourcefile~ohhelp.f90->sourcefile~ohparticles.f90 sourcefile~particle_injector.f90->sourcefile~ohhelp.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~no_particle_injector.f90~~AfferentGraph sourcefile~no_particle_injector.f90 no_particle_injector.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~particle_injector_manager.f90->sourcefile~no_particle_injector.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_no_particle_injector Source Code no_particle_injector.f90 Source Code module m_no_particle_injector use m_ohhelp use m_particle_injector implicit none private public t_NoParticleInjector public new_NoParticleInjector type , extends ( t_ParticleInjector ) :: t_NoParticleInjector contains procedure :: inject_particles => noParticleInjector_inject_particles end type contains function new_NoParticleInjector () result ( obj ) type ( t_NoParticleInjector ) :: obj end function subroutine noParticleInjector_inject_particles ( self , nparticles , ohhelp ) class ( t_NoParticleInjector ), intent ( in ) :: self integer , intent ( in ) :: nparticles class ( t_OhHelp ), intent ( inout ) :: ohhelp end subroutine subroutine particleInjector_inject_particles ( self , nparticles , ohhelp ) class ( t_ParticleInjector ), intent ( in ) :: self integer , intent ( in ) :: nparticles class ( t_OhHelp ), intent ( inout ) :: ohhelp end subroutine end module","tags":"","loc":"sourcefile/no_particle_injector.f90.html"},{"title":"particle_injector.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~particle_injector.f90~~EfferentGraph sourcefile~particle_injector.f90 particle_injector.f90 sourcefile~ohhelp.f90 ohhelp.f90 sourcefile~particle_injector.f90->sourcefile~ohhelp.f90 sourcefile~ohfield.f90 ohfield.f90 sourcefile~ohhelp.f90->sourcefile~ohfield.f90 sourcefile~ohparticles.f90 ohparticles.f90 sourcefile~ohhelp.f90->sourcefile~ohparticles.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~particle_injector.f90~~AfferentGraph sourcefile~particle_injector.f90 particle_injector.f90 sourcefile~no_particle_injector.f90 no_particle_injector.f90 sourcefile~no_particle_injector.f90->sourcefile~particle_injector.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector.f90 sourcefile~particle_injector_manager.f90->sourcefile~no_particle_injector.f90 sourcefile~particle_injector_with_distribution.f90 particle_injector_with_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector_with_distribution.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~particle_injector.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_particle_injector Source Code particle_injector.f90 Source Code module m_particle_injector use m_ohhelp , only : t_OhHelp implicit none private public t_ParticleInjector type , abstract :: t_ParticleInjector integer :: ispec contains procedure ( particleInjector_inject_particles ), deferred :: inject_particles end type interface subroutine particleInjector_inject_particles ( self , nparticles , ohhelp ) import t_ParticleInjector import t_OhHelp class ( t_ParticleInjector ), intent ( in ) :: self integer , intent ( in ) :: nparticles class ( t_OhHelp ), intent ( inout ) :: ohhelp end subroutine end interface end module","tags":"","loc":"sourcefile/particle_injector.f90.html"},{"title":"particle_injector_with_distribution.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~particle_injector_with_distribution.f90~~EfferentGraph sourcefile~particle_injector_with_distribution.f90 particle_injector_with_distribution.f90 sourcefile~ohhelp.f90 ohhelp.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector.f90 particle_injector.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~particle_injector.f90 sourcefile~position_distribution.f90 position_distribution.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~position_distribution.f90 sourcefile~random_generator.f90 random_generator.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~random_generator.f90 sourcefile~velocity_distribution.f90 velocity_distribution.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~velocity_distribution.f90 sourcefile~ohfield.f90 ohfield.f90 sourcefile~ohhelp.f90->sourcefile~ohfield.f90 sourcefile~ohparticles.f90 ohparticles.f90 sourcefile~ohhelp.f90->sourcefile~ohparticles.f90 sourcefile~particle_injector.f90->sourcefile~ohhelp.f90 sourcefile~science_constants.f90 science_constants.f90 sourcefile~random_generator.f90->sourcefile~science_constants.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~particle_injector_with_distribution.f90~~AfferentGraph sourcefile~particle_injector_with_distribution.f90 particle_injector_with_distribution.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector_with_distribution.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_particle_injector_with_distribution Source Code particle_injector_with_distribution.f90 Source Code module m_particle_injector_with_distribution use oh_type , only : oh_particle use m_ohhelp , only : t_OhHelp use m_position_distribution , only : t_PositionDistribution3d use m_velocity_distribution , only : t_VelocityDistribution3d use m_random_generator , only : t_RandomGenerator use m_particle_injector implicit none private public t_ParticleInjectorWithDistribution , new_ParticleInjectorWithDistribution type , extends ( t_ParticleInjector ) :: t_ParticleInjectorWithDistribution class ( t_PositionDistribution3d ), allocatable :: distribution_for_position class ( t_VelocityDistribution3d ), allocatable :: distribution_for_velocity class ( t_RandomGenerator ), pointer :: random_generator contains procedure :: inject_particles => particleInjectorWithDistribution_inject_particles end type contains function new_ParticleInjectorWithDistribution ( ispec , & distribution_for_position , & distribution_for_velocity , & random_generator ) result ( obj ) integer , intent ( in ) :: ispec class ( t_PositionDistribution3d ), intent ( in ) :: distribution_for_position class ( t_VelocityDistribution3d ), intent ( in ) :: distribution_for_velocity class ( t_RandomGenerator ), pointer , intent ( in ) :: random_generator type ( t_ParticleInjectorWithDistribution ) :: obj obj % ispec = ispec obj % distribution_for_position = distribution_for_position obj % distribution_for_velocity = distribution_for_velocity obj % random_generator => random_generator end function subroutine particleInjectorWithDistribution_inject_particles ( self , nparticles , ohhelp ) class ( t_ParticleInjectorWithDistribution ), intent ( in ) :: self integer , intent ( in ) :: nparticles class ( t_OhHelp ), intent ( inout ) :: ohhelp double precision :: subdomain_range ( 2 , 3 ) double precision :: ratio integer :: iparticle subdomain_range (:, :) = 1 d0 * ohhelp % subdomain_range (:, :, ohhelp % subdomain_id ( 1 ) + 1 ) ratio = self % distribution_for_position % subdomain_ratio ( subdomain_range ) do iparticle = 1 , self % random_generator % random_fix ( nparticles * ratio ) block type ( oh_particle ) :: particle double precision :: position ( 3 ) double precision :: velocity ( 3 ) position (:) = self % distribution_for_position % sample ( subdomain_range ) velocity (:) = self % distribution_for_velocity % sample () particle % x = position ( 1 ) particle % y = position ( 2 ) particle % z = position ( 3 ) particle % vx = velocity ( 1 ) particle % vy = velocity ( 2 ) particle % vz = velocity ( 3 ) ! NOTE: map処理は重いため、Distributionの実装を再確認 ! 仕様: sample(subdomain)でsubdomain内の座標のみサンプリング可能 particle % nid = ohhelp % map_subdomain_id ( position ) ! ohhelp%subdomain_id(1) particle % pid = 0 particle % spec = self % ispec call ohhelp % inject_particle ( particle ) end block end do end subroutine end module","tags":"","loc":"sourcefile/particle_injector_with_distribution.f90.html"},{"title":"const_velocity_distribution.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~const_velocity_distribution.f90~~EfferentGraph sourcefile~const_velocity_distribution.f90 const_velocity_distribution.f90 sourcefile~velocity_distribution.f90 velocity_distribution.f90 sourcefile~const_velocity_distribution.f90->sourcefile~velocity_distribution.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_const_velocity_distribution Source Code const_velocity_distribution.f90 Source Code module m_const_velocity_distribution use m_velocity_distribution , only : t_VelocityDistribution1d implicit none private public t_ConstVelocityDistribution1d public new_ConstVelocityDistribution1d type , extends ( t_VelocityDistribution1d ) :: t_ConstVelocityDistribution1d double precision :: constant_value contains procedure :: sample => constVelocityDistribution1d_sample end type contains function new_ConstVelocityDistribution1d ( constant_value ) result ( obj ) double precision , intent ( in ) :: constant_value type ( t_ConstVelocityDistribution1d ) :: obj obj % constant_value = constant_value end function function constVelocityDistribution1d_sample ( self ) result ( ret ) class ( t_ConstVelocityDistribution1d ), intent ( in ) :: self double precision :: ret ret = self % constant_value end function constVelocityDistribution1d_sample end module","tags":"","loc":"sourcefile/const_velocity_distribution.f90.html"},{"title":"maxwellian_velocity_distribution1d.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~maxwellian_velocity_distribution1d.f90~~EfferentGraph sourcefile~maxwellian_velocity_distribution1d.f90 maxwellian_velocity_distribution1d.f90 sourcefile~random_generator.f90 random_generator.f90 sourcefile~maxwellian_velocity_distribution1d.f90->sourcefile~random_generator.f90 sourcefile~velocity_distribution.f90 velocity_distribution.f90 sourcefile~maxwellian_velocity_distribution1d.f90->sourcefile~velocity_distribution.f90 sourcefile~science_constants.f90 science_constants.f90 sourcefile~random_generator.f90->sourcefile~science_constants.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_maxwellian_velocity_distribution1d Source Code maxwellian_velocity_distribution1d.f90 Source Code module m_maxwellian_velocity_distribution1d use m_velocity_distribution , only : t_VelocityDistribution1d use m_random_generator implicit none private public t_MaxwellianVelocityDistribution1d public new_MaxwellianVelocityDistribution1d type , extends ( t_VelocityDistribution1d ) :: t_MaxwellianVelocityDistribution1d class ( t_RandomGenerator ), pointer :: random_generator contains procedure :: sample => maxwellianVelocityDistribution1d_sample end type contains function new_MaxwellianVelocityDistribution1d ( random_generator ) result ( obj ) class ( t_RandomGenerator ), pointer :: random_generator type ( t_MaxwellianVelocityDistribution1d ) :: obj obj % random_generator => random_generator end function function maxwellianVelocityDistribution1d_sample ( self ) result ( ret ) class ( t_MaxwellianVelocityDistribution1d ), intent ( in ) :: self double precision :: ret ! Upper and lower of self%domains. double precision :: dl ( 3 ), du ( 3 ) double precision :: v ( 3 ) double precision :: sigma double precision :: PI integer :: icon double precision :: rands ( 6 ) PI = acos ( - 1.0d0 ) ! Assign maxwellian velocity. sigma = self % vel_variance ! v in (-inf, +inf) ! Probability density function: !   f(v) = 1/sqrt(2*pi*sigma&#94;2)*exp(-v&#94;2/(2*sigma&#94;2)) v ( 1 ) = 2.0d0 * sigma * sqrt ( - 2.0d0 * log ( rands ( 4 ))) * cos ( 2.0d0 * PI * rands ( 5 )) v ( 2 ) = 2.0d0 * sigma * sqrt ( - 2.0d0 * log ( rands ( 4 ))) * sin ( 2.0d0 * PI * rands ( 5 )) ! v in (0, +inf) ! Probability density function: !   f(v) = 1/sigma&#94;2*v*exp(-v&#94;2/(2*sigma&#94;2)) !   F(v) = 1 - exp(-v&#94;2/(2*sigma&#94;2)) ! v(3) = sqrt(-2*sigma*sigma*log(rands(6))) v ( 3 ) = sqrt ( - 2 * sigma * sigma * log ( rands ( 6 ))) rands ( 4 : 6 ) = self % vel_direction * v ( 3 ) & + self % vel_perp1 * v ( 1 ) & + self % vel_perp2 * v ( 2 ) success = . true . end function end module","tags":"","loc":"sourcefile/maxwellian_velocity_distribution1d.f90.html"},{"title":"velocity_maxwell_distribution.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~velocity_maxwell_distribution.f90~~EfferentGraph sourcefile~velocity_maxwell_distribution.f90 velocity_maxwell_distribution.f90 sourcefile~velocity_distribution.f90 velocity_distribution.f90 sourcefile~velocity_maxwell_distribution.f90->sourcefile~velocity_distribution.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~velocity_maxwell_distribution.f90~~AfferentGraph sourcefile~velocity_maxwell_distribution.f90 velocity_maxwell_distribution.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~particle_injector_manager.f90->sourcefile~velocity_maxwell_distribution.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_maxwellian_distribution Source Code velocity_maxwell_distribution.f90 Source Code module m_maxwellian_distribution use m_velocity_distribution end module","tags":"","loc":"sourcefile/velocity_maxwell_distribution.f90.html"},{"title":"velocity_distribution.f90 – ohhelp-pic-3d","text":"Files dependent on this one sourcefile~~velocity_distribution.f90~~AfferentGraph sourcefile~velocity_distribution.f90 velocity_distribution.f90 sourcefile~const_velocity_distribution.f90 const_velocity_distribution.f90 sourcefile~const_velocity_distribution.f90->sourcefile~velocity_distribution.f90 sourcefile~maxwellian_velocity_distribution1d.f90 maxwellian_velocity_distribution1d.f90 sourcefile~maxwellian_velocity_distribution1d.f90->sourcefile~velocity_distribution.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~velocity_distribution.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~particle_injector_manager.f90->sourcefile~velocity_distribution.f90 sourcefile~particle_injector_with_distribution.f90 particle_injector_with_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector_with_distribution.f90 sourcefile~velocity_maxwell_distribution.f90 velocity_maxwell_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~velocity_maxwell_distribution.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~velocity_distribution.f90 sourcefile~velocity_maxwell_distribution.f90->sourcefile~velocity_distribution.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_velocity_distribution Source Code velocity_distribution.f90 Source Code module m_velocity_distribution type , abstract :: t_VelocityDistribution1d contains procedure ( distribution1d_sample ), deferred :: sample end type interface function distribution1d_sample ( self ) result ( ret ) import t_VelocityDistribution1d class ( t_VelocityDistribution1d ), intent ( in ) :: self double precision :: ret end function end interface type , abstract :: t_VelocityDistribution3d contains procedure ( distribution3d_sample ), deferred :: sample end type interface function distribution3d_sample ( self ) result ( ret ) import t_VelocityDistribution3d class ( t_VelocityDistribution3d ), intent ( in ) :: self double precision :: ret ( 3 ) end function end interface type , extends ( t_VelocityDistribution3d ) :: t_NoVelocityDistribution3d contains procedure :: sample => noVelocityDistribution3d_sample end type type , extends ( t_VelocityDistribution3d ) :: t_SimpleVelocityDistribution3d class ( t_VelocityDistribution1d ), allocatable :: distribution_x class ( t_VelocityDistribution1d ), allocatable :: distribution_y class ( t_VelocityDistribution1d ), allocatable :: distribution_z contains procedure :: sample => simpleVelocityDistribution3d_sample end type contains function new_NoVelocityDistribution3d () result ( obj ) type ( t_NoVelocityDistribution3d ) :: obj end function function noVelocityDistribution3d_sample ( self ) result ( ret ) class ( t_NoVelocityDistribution3d ), intent ( in ) :: self double precision :: ret ( 3 ) ret (:) = 1.0d0 end function function new_SimpleVelocityDistribution3d ( distribution_x , distribution_y , distribution_z ) result ( obj ) class ( t_VelocityDistribution1d ), intent ( in ) :: distribution_x class ( t_VelocityDistribution1d ), intent ( in ) :: distribution_y class ( t_VelocityDistribution1d ), intent ( in ) :: distribution_z type ( t_SimpleVelocityDistribution3d ) :: obj obj % distribution_x = distribution_x obj % distribution_y = distribution_y obj % distribution_z = distribution_z end function function simpleVelocityDistribution3d_sample ( self ) result ( ret ) class ( t_SimpleVelocityDistribution3d ), intent ( in ) :: self double precision :: ret ( 3 ) ret ( 1 ) = self % distribution_x % sample () ret ( 2 ) = self % distribution_y % sample () ret ( 3 ) = self % distribution_z % sample () end function end module","tags":"","loc":"sourcefile/velocity_distribution.f90.html"},{"title":"no_position_distribution.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~no_position_distribution.f90~~EfferentGraph sourcefile~no_position_distribution.f90 no_position_distribution.f90 sourcefile~position_distribution.f90 position_distribution.f90 sourcefile~no_position_distribution.f90->sourcefile~position_distribution.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~no_position_distribution.f90~~AfferentGraph sourcefile~no_position_distribution.f90 no_position_distribution.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~no_position_distribution.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~particle_injector_manager.f90->sourcefile~no_position_distribution.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_no_position_distribution Source Code no_position_distribution.f90 Source Code module m_no_position_distribution use m_position_distribution , only : t_PositionDistribution3d implicit none private public t_NoPositionDistribution3d , new_NoPositionDistribution3d type , extends ( t_PositionDistribution3d ) :: t_NoPositionDistribution3d contains procedure :: sample => noPositionDistribution3d_sample procedure :: subdomain_ratio => noPositionDistribution3d_subdomain_ratio end type contains function new_NoPositionDistribution3d () result ( obj ) type ( t_NoPositionDistribution3d ) :: obj end function function noPositionDistribution3d_sample ( self , subdomain_range ) result ( ret ) class ( t_NoPositionDistribution3d ), intent ( in ) :: self double precision , intent ( in ) :: subdomain_range ( 2 , 3 ) double precision :: ret ( 3 ) ret (:) = 0 d0 end function function noPositionDistribution3d_subdomain_ratio ( self , subdomain_range ) result ( ret ) class ( t_NoPositionDistribution3d ), intent ( in ) :: self double precision , intent ( in ) :: subdomain_range ( 2 , 3 ) double precision :: ret ret = 0 d0 end function end module","tags":"","loc":"sourcefile/no_position_distribution.f90.html"},{"title":"position_distribution.f90 – ohhelp-pic-3d","text":"Files dependent on this one sourcefile~~position_distribution.f90~~AfferentGraph sourcefile~position_distribution.f90 position_distribution.f90 sourcefile~no_position_distribution.f90 no_position_distribution.f90 sourcefile~no_position_distribution.f90->sourcefile~position_distribution.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~particle_injector_manager.f90->sourcefile~position_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~no_position_distribution.f90 sourcefile~particle_injector_with_distribution.f90 particle_injector_with_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector_with_distribution.f90 sourcefile~position_random_uniform_distribution.f90 position_random_uniform_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~position_random_uniform_distribution.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~position_distribution.f90 sourcefile~position_random_uniform_distribution.f90->sourcefile~position_distribution.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~no_position_distribution.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_position_distribution Source Code position_distribution.f90 Source Code module m_position_distribution implicit none private public t_PositionDistribution1d public t_PositionDistribution3d public t_SimplePositionDistribution3d , new_SimplePositionDistribution3d type , abstract :: t_PositionDistribution1d contains procedure ( distribution1d_sample ), deferred :: sample procedure ( distribution1d_subdomain_ratio ), deferred :: subdomain_ratio end type interface function distribution1d_sample ( self , subdomain_range ) result ( ret ) import t_PositionDistribution1d class ( t_PositionDistribution1d ), intent ( in ) :: self double precision , intent ( in ) :: subdomain_range ( 2 ) double precision :: ret end function function distribution1d_subdomain_ratio ( self , subdomain_range ) result ( ret ) import t_PositionDistribution1d class ( t_PositionDistribution1d ), intent ( in ) :: self double precision , intent ( in ) :: subdomain_range ( 2 ) double precision :: ret end function end interface type , abstract :: t_PositionDistribution3d contains procedure ( distribution3d_sample ), deferred :: sample procedure ( distribution3d_subdomain_ratio ), deferred :: subdomain_ratio end type interface function distribution3d_sample ( self , subdomain_range ) result ( ret ) import t_PositionDistribution3d class ( t_PositionDistribution3d ), intent ( in ) :: self double precision , intent ( in ) :: subdomain_range ( 2 , 3 ) double precision :: ret ( 3 ) end function function distribution3d_subdomain_ratio ( self , subdomain_range ) result ( ret ) import t_PositionDistribution3d class ( t_PositionDistribution3d ), intent ( in ) :: self double precision , intent ( in ) :: subdomain_range ( 2 , 3 ) double precision :: ret end function end interface type , extends ( t_PositionDistribution3d ) :: t_SimplePositionDistribution3d class ( t_PositionDistribution1d ), allocatable :: distribution_x class ( t_PositionDistribution1d ), allocatable :: distribution_y class ( t_PositionDistribution1d ), allocatable :: distribution_z contains procedure :: sample => simplePositionDistribution3d_sample procedure :: subdomain_ratio => simplePositionDistribution3d_subdomain_ratio end type contains function new_SimplePositionDistribution3d ( distribution_x , distribution_y , distribution_z ) result ( obj ) class ( t_PositionDistribution1d ), intent ( in ) :: distribution_x class ( t_PositionDistribution1d ), intent ( in ) :: distribution_y class ( t_PositionDistribution1d ), intent ( in ) :: distribution_z type ( t_SimplePositionDistribution3d ) :: obj obj % distribution_x = distribution_x obj % distribution_y = distribution_y obj % distribution_z = distribution_z end function function simplePositionDistribution3d_sample ( self , subdomain_range ) result ( ret ) class ( t_SimplePositionDistribution3d ), intent ( in ) :: self double precision , intent ( in ) :: subdomain_range ( 2 , 3 ) double precision :: ret ( 3 ) ret ( 1 ) = self % distribution_x % sample ( subdomain_range (:, 1 )) ret ( 2 ) = self % distribution_y % sample ( subdomain_range (:, 2 )) ret ( 3 ) = self % distribution_z % sample ( subdomain_range (:, 3 )) end function function simplePositionDistribution3d_subdomain_ratio ( self , subdomain_range ) result ( ret ) class ( t_SimplePositionDistribution3d ), intent ( in ) :: self double precision , intent ( in ) :: subdomain_range ( 2 , 3 ) double precision :: ret ret = self % distribution_x % subdomain_ratio ( subdomain_range (:, 1 )) & * self % distribution_y % subdomain_ratio ( subdomain_range (:, 2 )) & * self % distribution_z % subdomain_ratio ( subdomain_range (:, 3 )) end function end module","tags":"","loc":"sourcefile/position_distribution.f90.html"},{"title":"position_random_uniform_distribution.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~position_random_uniform_distribution.f90~~EfferentGraph sourcefile~position_random_uniform_distribution.f90 position_random_uniform_distribution.f90 sourcefile~position_distribution.f90 position_distribution.f90 sourcefile~position_random_uniform_distribution.f90->sourcefile~position_distribution.f90 sourcefile~random_generator.f90 random_generator.f90 sourcefile~position_random_uniform_distribution.f90->sourcefile~random_generator.f90 sourcefile~science_constants.f90 science_constants.f90 sourcefile~random_generator.f90->sourcefile~science_constants.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~position_random_uniform_distribution.f90~~AfferentGraph sourcefile~position_random_uniform_distribution.f90 position_random_uniform_distribution.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~particle_injector_manager.f90->sourcefile~position_random_uniform_distribution.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_position_random_uniform_distribution Source Code position_random_uniform_distribution.f90 Source Code module m_position_random_uniform_distribution use m_position_distribution , only : t_PositionDistribution1d use m_random_generator , only : t_RandomGenerator implicit none private public t_PositionRandomUniformDistribution1d public new_PositionRandomUniformDistribution1d type , extends ( t_PositionDistribution1d ) :: t_PositionRandomUniformDistribution1d double precision :: range ( 2 ) double precision , private :: total_range class ( t_RandomGenerator ), pointer :: random_generator contains procedure :: sample => positionRandomUniformDistribution1d_sample procedure :: subdomain_ratio => positionRandomUniformDistribution1d_subdomain_ratio end type contains function new_PositionRandomUniformDistribution1d ( range , random_generator ) result ( obj ) type ( t_PositionRandomUniformDistribution1d ) :: obj double precision , intent ( in ) :: range ( 2 ) class ( t_RandomGenerator ), pointer , intent ( in ) :: random_generator obj % range (:) = range (:) obj % total_range = range ( 2 ) - range ( 1 ) obj % random_generator => random_generator end function function positionRandomUniformDistribution1d_sample ( self , subdomain_range ) result ( ret ) class ( t_PositionRandomUniformDistribution1d ), intent ( in ) :: self double precision , intent ( in ) :: subdomain_range ( 2 ) double precision :: ret double precision :: lower , upper upper = min ( self % range ( 2 ), subdomain_range ( 2 )) lower = max ( self % range ( 1 ), subdomain_range ( 1 )) ret = self % random_generator % rand () * ( upper - lower ) + lower end function function positionRandomUniformDistribution1d_subdomain_ratio ( self , subdomain_range ) result ( ret ) class ( t_PositionRandomUniformDistribution1d ), intent ( in ) :: self double precision , intent ( in ) :: subdomain_range ( 2 ) double precision :: ret double precision :: lower , upper upper = min ( self % range ( 2 ), subdomain_range ( 2 )) lower = max ( self % range ( 1 ), subdomain_range ( 1 )) ret = max ( upper - lower , 0 d0 ) / ( self % total_range ) end function end module","tags":"","loc":"sourcefile/position_random_uniform_distribution.f90.html"},{"title":"random_generator.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~random_generator.f90~~EfferentGraph sourcefile~random_generator.f90 random_generator.f90 sourcefile~science_constants.f90 science_constants.f90 sourcefile~random_generator.f90->sourcefile~science_constants.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~random_generator.f90~~AfferentGraph sourcefile~random_generator.f90 random_generator.f90 sourcefile~maxwellian_velocity_distribution1d.f90 maxwellian_velocity_distribution1d.f90 sourcefile~maxwellian_velocity_distribution1d.f90->sourcefile~random_generator.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~random_generator.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~pcg_generator.f90 pcg_generator.f90 sourcefile~ohhelppic3d.f90->sourcefile~pcg_generator.f90 sourcefile~particle_injector_manager.f90->sourcefile~random_generator.f90 sourcefile~particle_injector_with_distribution.f90 particle_injector_with_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector_with_distribution.f90 sourcefile~position_random_uniform_distribution.f90 position_random_uniform_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~position_random_uniform_distribution.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~random_generator.f90 sourcefile~pcg_generator.f90->sourcefile~random_generator.f90 sourcefile~position_random_uniform_distribution.f90->sourcefile~random_generator.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_random_generator Source Code random_generator.f90 Source Code module m_random_generator use m_science_constants , only : pi implicit none private public t_RandomGenerator !TODO: 乱数の取り扱いを実装 type , abstract :: t_RandomGenerator contains procedure ( randomGenerator_rand ), deferred :: rand procedure :: normal => randomGenerator_normal procedure ( randomGenerator_advance ), deferred :: advance procedure :: random_fix => randomGenerator_random_fix end type interface function randomGenerator_rand ( self ) result ( ret ) import t_RandomGenerator class ( t_RandomGenerator ), intent ( in ) :: self double precision :: ret end function subroutine randomGenerator_advance ( self , n ) import t_RandomGenerator class ( t_RandomGenerator ), intent ( in ) :: self integer ( 8 ), intent ( in ) :: n end subroutine end interface contains function randomGenerator_normal ( self ) result ( ret ) class ( t_RandomGenerator ), intent ( in ) :: self double precision :: ret double precision :: r1 , r2 r1 = self % rand () r2 = self % rand () ret = 2.0d0 * sqrt ( - 2.0d0 * log ( r1 )) * cos ( 2.0d0 * pi * r2 ) end function function randomGenerator_random_fix ( self , value ) result ( ret ) class ( t_RandomGenerator ), intent ( in ) :: self double precision , intent ( in ) :: value double precision :: ret integer :: fixed fixed = int ( value ) if ( self % rand () <= value - fixed ) then ret = fixed + 1 else ret = fixed end if end function end module","tags":"","loc":"sourcefile/random_generator.f90.html"},{"title":"pcg_generator.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~pcg_generator.f90~~EfferentGraph sourcefile~pcg_generator.f90 pcg_generator.f90 sourcefile~pcg64.f90 pcg64.f90 sourcefile~pcg_generator.f90->sourcefile~pcg64.f90 sourcefile~random_generator.f90 random_generator.f90 sourcefile~pcg_generator.f90->sourcefile~random_generator.f90 sourcefile~science_constants.f90 science_constants.f90 sourcefile~random_generator.f90->sourcefile~science_constants.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~pcg_generator.f90~~AfferentGraph sourcefile~pcg_generator.f90 pcg_generator.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~pcg_generator.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_pcg_generator Source Code pcg_generator.f90 Source Code module m_pcg_generator use m_random_generator , only : t_RandomGenerator use m_pcg32 implicit none private public t_PcgGenerator public new_PcgGenerator type , extends ( t_RandomGenerator ) :: t_PcgGenerator type ( pcg_state_setseq_64 ) :: rng integer ( 8 ) :: seeds ( 2 ) contains procedure :: rand => pcgGenerator_rand procedure :: advance => pcgGenerator_advance end type contains function new_PcgGenerator ( seeds ) result ( obj ) type ( t_PcgGenerator ) :: obj integer ( 8 ), intent ( in ) :: seeds ( 2 ) obj % seeds = seeds call pcg32_srandom_r ( obj % rng , seeds ( 1 ), seeds ( 2 )) end function function pcgGenerator_rand ( self ) result ( ret ) class ( t_PcgGenerator ), intent ( in ) :: self double precision :: ret ret = pcg32_random_double_r ( self % rng ) end function subroutine pcgGenerator_advance ( self , n ) class ( t_PcgGenerator ), intent ( in ) :: self integer ( 8 ), intent ( in ) :: n call pcg32_advance_r ( self % rng , n ) end subroutine end module","tags":"","loc":"sourcefile/pcg_generator.f90.html"},{"title":"pcg64.f90 – ohhelp-pic-3d","text":"Files dependent on this one sourcefile~~pcg64.f90~~AfferentGraph sourcefile~pcg64.f90 pcg64.f90 sourcefile~pcg_generator.f90 pcg_generator.f90 sourcefile~pcg_generator.f90->sourcefile~pcg64.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~pcg_generator.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_pcg32 Source Code pcg64.f90 Source Code module m_pcg32 use iso_c_binding , only : c_int64_t , c_double implicit none type , bind ( c ) :: pcg_state_setseq_64 integer ( c_int64_t ) state ; integer ( c_int64_t ) inc ; end type interface subroutine pcg32_srandom_r ( rng , state , initseq ) bind ( c , name = 'pcg_setseq_64_srandom_r' ) import pcg_state_setseq_64 import c_int64_t type ( pcg_state_setseq_64 ) :: rng integer ( c_int64_t ), value , intent ( in ) :: state integer ( c_int64_t ), value , intent ( in ) :: initseq end subroutine subroutine pcg32_advance_r ( rng , delta ) bind ( c , name = 'pcg_setseq_64_advance_r' ) import pcg_state_setseq_64 import c_int64_t type ( pcg_state_setseq_64 ) :: rng integer ( c_int64_t ), value , intent ( in ) :: delta end subroutine function pcg32_random_double_r ( rng ) result ( ret ) bind ( c ) import pcg_state_setseq_64 import c_double type ( pcg_state_setseq_64 ) :: rng real ( c_double ) :: ret end function end interface end module","tags":"","loc":"sourcefile/pcg64.f90.html"},{"title":"field_boundary_type.f90 – ohhelp-pic-3d","text":"Files dependent on this one sourcefile~~field_boundary_type.f90~~AfferentGraph sourcefile~field_boundary_type.f90 field_boundary_type.f90 sourcefile~mpi_fftw3_solver.f90 mpi_fftw3_solver.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~field_boundary_type.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~field_boundary_type.f90 sourcefile~ohhelppic3d.f90->sourcefile~mpi_fftw3_solver.f90 sourcefile~poisson_solver.f90 poisson_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~poisson_solver.f90 sourcefile~poisson_solver.f90->sourcefile~field_boundary_type.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_field_boundary_type Source Code field_boundary_type.f90 Source Code module m_field_boundary_type implicit none private public Field_BoundaryType_Periodic public Field_BoundaryType_Dirichlet public Field_BoundaryType_Neumann public Field_BoundaryType_Dirichlet_Neumann public Field_BoundaryType_Neumann_Dirichlet !> Periodic boundary type. !> !> Example (Array of length n = g.e-g.s, Logical size = n) !>  *----*----*--- ... ---*----*----o !> g.s  +1   +2          -2   -1   g.e(=g.s) !> !> g: global range (s: start, e: end) !> !> *: Actual data element (required) !> o: Actual data element (not required) integer , parameter :: Field_BoundaryType_Periodic = 0 !> Dirichlet boundary type. !> !> Example (Array of length n = g.e-g.s-1, Logical size = 2(n+1)) !>  D----*----*--- ... ---*----*----D !> g.s  +1   +2          -2   -1   g.e !> !> g: global range (s: start, e: end) !> !> *: Actual data element (required) !> D: Dirichlet boundary condition value (= 0) integer , parameter :: Field_BoundaryType_Dirichlet = 1 !> Neumann boundary type. !> !> Example (Array of length n = g.e-g.s+1, Logical size = 2(n-1)) !>  *N----*----*--- ... ---*-----*----*N !>  g.s  +1   +2          -2    -1   g.e !> !> g: global range (s: start, e: end) !> !> *: Actual data element (required) !> N: Neumann boundary condition value (= 0) integer , parameter :: Field_BoundaryType_Neumann = 2 !> Dirichlet(left) and Neumann(right) boundary type. (Not tested to work properly.) !> !> Example (Array of length n = g.e-g.s, Logical size = 2n) !>  D----*----*--- ... ---*----*----*N !> g.s  +1   +2          -2   -1    g.e !> !> g: global range (s: start, e: end) !> !> *: Actual data element (required) !> D: Dirichlet boundary condition value (= 0) !> N: Neumann boundary condition value (= 0) integer , parameter :: Field_BoundaryType_Dirichlet_Neumann = 3 !> Neumann(left) and Dirichlet(right) boundary type. (Not tested to work properly.) !> !> Example (Array of length n = g.e-g.s, Logical size = 2n) !>  *N----*----*--- ... ---*----*----D !>  g.s  +1   +2          -2   -1   g.e !> !> g: global range (s: start, e: end) !> !> *: Actual data element (required) !> D: Dirichlet boundary condition value (= 0) !> N: Neumann boundary condition value (= 0) integer , parameter :: Field_BoundaryType_Neumann_Dirichlet = 4 end module","tags":"","loc":"sourcefile/field_boundary_type.f90.html"},{"title":"poisson_solver.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~poisson_solver.f90~~EfferentGraph sourcefile~poisson_solver.f90 poisson_solver.f90 sourcefile~block.f90 block.f90 sourcefile~poisson_solver.f90->sourcefile~block.f90 sourcefile~field_boundary_type.f90 field_boundary_type.f90 sourcefile~poisson_solver.f90->sourcefile~field_boundary_type.f90 sourcefile~field_solver.f90 field_solver.f90 sourcefile~poisson_solver.f90->sourcefile~field_solver.f90 sourcefile~mpi_fft_solver.f90 mpi_fft_solver.f90 sourcefile~poisson_solver.f90->sourcefile~mpi_fft_solver.f90 sourcefile~ohfield.f90 ohfield.f90 sourcefile~poisson_solver.f90->sourcefile~ohfield.f90 sourcefile~ohhelp.f90 ohhelp.f90 sourcefile~poisson_solver.f90->sourcefile~ohhelp.f90 sourcefile~science_constants.f90 science_constants.f90 sourcefile~poisson_solver.f90->sourcefile~science_constants.f90 sourcefile~field_solver.f90->sourcefile~ohfield.f90 sourcefile~field_solver.f90->sourcefile~ohhelp.f90 sourcefile~mpi_fft_solver.f90->sourcefile~block.f90 sourcefile~ohhelp.f90->sourcefile~ohfield.f90 sourcefile~ohparticles.f90 ohparticles.f90 sourcefile~ohhelp.f90->sourcefile~ohparticles.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~poisson_solver.f90~~AfferentGraph sourcefile~poisson_solver.f90 poisson_solver.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~poisson_solver.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_poisson_solver Source Code poisson_solver.f90 Source Code module m_poisson_solver use m_mpi_fft_solver use m_science_constants , only : pi use m_get_default , only : get_default use m_block use m_field_boundary_type use m_field_solver use m_ohfield use m_ohhelp implicit none !> 3d poisson equation solver. !> !> Poisson equation: !>     ∂&#94;2p/∂&#94;2 + ∂&#94;2p/∂y&#94;2 + ∂&#94;2p/∂z&#94;2 = f(x, y, z) type , extends ( t_FieldSolver ) :: t_PoissonSolver3d class ( t_MPIFFTSolver3d ), pointer , private :: fft3d double precision , allocatable , private :: modified_wave_number (:, :, :) double precision , private :: boundary_condition_terms ( 2 , 3 ) type ( t_Block ) :: local_block type ( t_Block ) :: global_block contains procedure :: solve => poissonSolver3d_solve end type private public new_PoissonSolver3d contains function new_PoissonSolver3d ( local_block , global_block , fft3d , boundary_values ) result ( obj ) type ( t_Block ), intent ( in ) :: local_block type ( t_Block ), intent ( in ) :: global_block class ( t_MPIFFTSolver3d ), pointer , intent ( in ) :: fft3d double precision , intent ( in ), optional :: boundary_values ( 2 , 3 ) type ( t_PoissonSolver3d ) :: obj integer :: start ( 3 ), end ( 3 ) integer :: kx , ky , kz obj % fft3d => fft3d obj % local_block = local_block obj % global_block = global_block if ( present ( boundary_values )) then obj % boundary_condition_terms (:, 1 ) = & calc_boundary_term ( boundary_values (:, 1 ), obj % fft3d % boundary_types ( 1 )) obj % boundary_condition_terms (:, 2 ) = & calc_boundary_term ( boundary_values (:, 2 ), obj % fft3d % boundary_types ( 2 )) obj % boundary_condition_terms (:, 3 ) = & calc_boundary_term ( boundary_values (:, 3 ), obj % fft3d % boundary_types ( 3 )) else obj % boundary_condition_terms (:, :) = 0.0d0 end if allocate ( obj % modified_wave_number ( local_block % start ( 1 ): local_block % end ( 1 ), & local_block % start ( 2 ): local_block % end ( 2 ), & local_block % start ( 3 ): local_block % end ( 3 ))) start (:) = local_block % start (:) - global_block % start (:) end (:) = local_block % end (:) - global_block % start (:) do concurrent ( kx = start ( 1 ): end ( 1 ), ky = start ( 2 ): end ( 2 ), kz = start ( 3 ): end ( 3 )) block double precision :: wx , wy , wz double precision :: wn wx = calc_wave_number ( kx , global_block % sizes ( 1 ), fft3d % boundary_types ( 1 )) wy = calc_wave_number ( ky , global_block % sizes ( 2 ), fft3d % boundary_types ( 2 )) wz = calc_wave_number ( kz , global_block % sizes ( 3 ), fft3d % boundary_types ( 3 )) ! TODO: 二乗にすると正しそうな結果となったが、理論をもう一度確認すること wn = wx * wx + wy * wy + wz * wz obj % modified_wave_number ( kx + global_block % start ( 1 ), & ky + global_block % start ( 2 ), & kz + global_block % start ( 3 )) = wn end block end do end function pure function calc_boundary_term ( boundary_values , boundary_type ) result ( terms ) double precision , intent ( in ) :: boundary_values ( 2 ) integer , intent ( in ) :: boundary_type double precision :: terms ( 2 ) select case ( boundary_type ) case ( Field_BoundaryType_Periodic ) terms (:) = boundary_values (:) case ( Field_BoundaryType_Dirichlet ) terms (:) = [ - boundary_values ( 1 ), - boundary_values ( 2 )] case ( Field_BoundaryType_Neumann ) terms (:) = [ 2.0d0 * boundary_values ( 1 ), - 2.0d0 * boundary_values ( 2 )] case ( Field_BoundaryType_Dirichlet_Neumann ) terms (:) = [ - boundary_values ( 1 ), - 2.0d0 * boundary_values ( 2 )] case ( Field_BoundaryType_Neumann_Dirichlet ) terms (:) = [ - boundary_values ( 1 ), - 2.0d0 * boundary_values ( 2 )] end select end function pure function calc_wave_number ( k , n , boundary_type ) result ( wn ) integer , intent ( in ) :: k integer , intent ( in ) :: n integer , intent ( in ) :: boundary_type double precision :: wn select case ( boundary_type ) case ( Field_BoundaryType_Periodic ) ! REVIEW: wave numberの計算が本当に正しいか疑わしいため、要再確認 if ( k <= int ( n / 2 )) then wn = 2.0d0 * sin ( PI * k / dble ( n )) else wn = 2.0d0 * sin ( PI * ( n - 1 - k ) / dble ( n )) end if case ( Field_BoundaryType_Dirichlet ) wn = 2.0d0 * ( cos ( PI * ( k + 1 ) / dble ( n + 1 )) - 1.0d0 ) case ( Field_BoundaryType_Neumann ) wn = 2.0d0 * ( cos ( PI * k / dble ( n )) - 1.0d0 ) case ( Field_BoundaryType_Dirichlet_Neumann ) wn = 2.0d0 * ( cos ( PI * ( k + 0.5d0 ) / dble ( n + 1 )) - 1.0d0 ) case ( Field_BoundaryType_Neumann_Dirichlet ) wn = 2.0d0 * ( cos ( PI * ( k + 0.5d0 ) / dble ( n + 1 )) - 1.0d0 ) end select end function subroutine poissonSolver3d_solve ( self , rho , aj , eb , phi , ohhelp ) class ( t_PoissonSolver3d ), intent ( in ) :: self class ( t_OhField ), intent ( in ) :: rho class ( t_OhField ), intent ( in ) :: aj class ( t_OhField ), intent ( inout ) :: eb class ( t_OhField ), intent ( inout ) :: phi class ( t_OhHelp ), intent ( inout ) :: ohhelp eb % values = 0 phi % values ( 1 , :, :, :, 1 ) = rho % values ( 1 , :, :, :, 1 ) block integer :: axis integer :: local_start ( 3 ), local_end ( 3 ) local_start = phi % to_local_index ( self % global_block % start , 1 ) local_end = phi % to_local_index ( self % global_block % end , 1 ) do axis = 1 , 3 if ( self % local_block % start ( axis ) == self % global_block % start ( axis )) then phi % values ( 1 , local_start ( axis ), :, :, 1 ) = & phi % values ( 1 , local_start ( axis ), :, :, 1 ) & + self % boundary_condition_terms ( 1 , axis ) end if if ( self % local_block % end ( axis ) == self % global_block % end ( axis )) then phi % values ( 1 , local_end ( axis ), :, :, 1 ) = & phi % values ( 1 , local_end ( axis ), :, :, 1 ) & + self % boundary_condition_terms ( 2 , axis ) end if end do end block block integer :: local_start ( 3 ), local_end ( 3 ) local_start = phi % to_local_index ( self % local_block % start , 1 ) local_end = phi % to_local_index ( self % local_block % end , 1 ) call self % fft3d % forward ( phi % values ( 1 , & local_start ( 1 ): local_end ( 1 ), & local_start ( 2 ): local_end ( 2 ), & local_start ( 3 ): local_end ( 3 ), & 1 ), & phi % values ( 1 , & local_start ( 1 ): local_end ( 1 ), & local_start ( 2 ): local_end ( 2 ), & local_start ( 3 ): local_end ( 3 ), & 1 )) phi % values ( 1 , & local_start ( 1 ): local_end ( 1 ), & local_start ( 2 ): local_end ( 2 ), & local_start ( 3 ): local_end ( 3 ), & 1 ) = & phi % values ( 1 , & local_start ( 1 ): local_end ( 1 ), & local_start ( 2 ): local_end ( 2 ), & local_start ( 3 ): local_end ( 3 ), & 1 ) & / self % modified_wave_number ( self % local_block % start ( 1 ): self % local_block % end ( 1 ), & self % local_block % start ( 2 ): self % local_block % end ( 2 ), & self % local_block % start ( 3 ): self % local_block % end ( 3 )) if ( all ( self % local_block % start == self % global_block % start )) then phi % values ( 1 , & local_start ( 1 ), & local_start ( 2 ), & local_start ( 3 ), & 1 ) = 0 d0 end if call self % fft3d % backward ( phi % values ( 1 , & local_start ( 1 ): local_end ( 1 ), & local_start ( 2 ): local_end ( 2 ), & local_start ( 3 ): local_end ( 3 ), & 1 ), & phi % values ( 1 , & local_start ( 1 ): local_end ( 1 ), & local_start ( 2 ): local_end ( 2 ), & local_start ( 3 ): local_end ( 3 ), & 1 )) call ohhelp % broadcast_field ( phi ) call ohhelp % exchange_borders ( phi ) end block ! NOTE: ebをbroadcastせず、primary/secondary両方で解いているのは通信回数を減らすことを意図している ! OPTIMIZE: しかし、実行時間の計測・比較はしていないため、どちらを採用するかは要検討 block integer :: ps integer :: i , j , k integer :: xl , yl , zl integer :: xu , yu , zu do ps = 1 , 2 xl = phi % subdomain_range ( 1 , 1 , ps ) - 1 yl = phi % subdomain_range ( 1 , 2 , ps ) - 1 zl = phi % subdomain_range ( 1 , 3 , ps ) - 1 xu = phi % subdomain_range ( 2 , 1 , ps ) - phi % subdomain_range ( 1 , 1 , ps ) yu = phi % subdomain_range ( 2 , 2 , ps ) - phi % subdomain_range ( 1 , 2 , ps ) zu = phi % subdomain_range ( 2 , 3 , ps ) - phi % subdomain_range ( 1 , 3 , ps ) eb % values ( 1 , xl : xu , yl : yu , zl : zu , ps ) = & phi % values ( 1 , xl : xu , yl : yu , zl : zu , ps ) - phi % values ( 1 , xl + 1 : xu + 1 , yl : yu , zl : zu , ps ) eb % values ( 2 , xl : xu , yl : yu , zl : zu , ps ) = & phi % values ( 2 , xl : xu , yl : yu , zl : zu , ps ) - phi % values ( 2 , xl : xu , yl + 1 : yu + 1 , zl : zu , ps ) eb % values ( 3 , xl : xu , yl : yu , zl : zu , ps ) = & phi % values ( 3 , xl : xu , yl : yu , zl : zu , ps ) - phi % values ( 3 , xl : xu , yl : yu , zl + 1 : zu + 1 , ps ) end do call ohhelp % exchange_borders ( eb ) end block ! Avoiding self-force. block integer :: ps integer :: i , j , k integer :: xl , yl , zl integer :: xu , yu , zu do ps = 1 , 2 xl = phi % subdomain_range ( 1 , 1 , ps ) - 1 yl = phi % subdomain_range ( 1 , 2 , ps ) - 1 zl = phi % subdomain_range ( 1 , 3 , ps ) - 1 xu = phi % subdomain_range ( 2 , 1 , ps ) - phi % subdomain_range ( 1 , 1 , ps ) yu = phi % subdomain_range ( 2 , 2 , ps ) - phi % subdomain_range ( 1 , 2 , ps ) zu = phi % subdomain_range ( 2 , 3 , ps ) - phi % subdomain_range ( 1 , 3 , ps ) eb % values ( 1 , xl : xu , yl : yu , zl : zu , ps ) = & 0.5d0 * ( eb % values ( 1 , xl - 1 : xu - 1 , yl : yu , zl : zu , ps ) + eb % values ( 1 , xl : xu , yl : yu , zl : zu , ps )) eb % values ( 2 , xl : xu , yl : yu , zl : zu , ps ) = & 0.5d0 * ( eb % values ( 2 , xl : xu , yl - 1 : yu - 1 , zl : zu , ps ) + eb % values ( 2 , xl : xu , yl : yu , zl : zu , ps )) eb % values ( 3 , xl : xu , yl : yu , zl : zu , ps ) = & 0.5d0 * ( eb % values ( 3 , xl : xu , yl : yu , zl - 1 : zu - 1 , ps ) + eb % values ( 3 , xl : xu , yl : yu , zl : zu , ps )) end do call ohhelp % exchange_borders ( eb ) end block end subroutine end module","tags":"","loc":"sourcefile/poisson_solver.f90.html"},{"title":"field_solver.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~field_solver.f90~~EfferentGraph sourcefile~field_solver.f90 field_solver.f90 sourcefile~ohfield.f90 ohfield.f90 sourcefile~field_solver.f90->sourcefile~ohfield.f90 sourcefile~ohhelp.f90 ohhelp.f90 sourcefile~field_solver.f90->sourcefile~ohhelp.f90 sourcefile~ohhelp.f90->sourcefile~ohfield.f90 sourcefile~ohparticles.f90 ohparticles.f90 sourcefile~ohhelp.f90->sourcefile~ohparticles.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~field_solver.f90~~AfferentGraph sourcefile~field_solver.f90 field_solver.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~field_solver.f90 sourcefile~poisson_solver.f90 poisson_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~poisson_solver.f90 sourcefile~poisson_solver.f90->sourcefile~field_solver.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_field_solver Source Code field_solver.f90 Source Code module m_field_solver use m_ohfield use m_ohhelp implicit none private public t_FieldSolver type , abstract :: t_FieldSolver contains procedure ( fieldSolver_solve ), deferred :: solve end type interface subroutine fieldSolver_solve ( self , rho , aj , eb , phi , ohhelp ) import t_FieldSolver import t_OhField import t_OhHelp class ( t_FieldSolver ), intent ( in ) :: self class ( t_OhField ), intent ( in ) :: rho class ( t_OhField ), intent ( in ) :: aj class ( t_OhField ), intent ( inout ) :: eb class ( t_OhField ), intent ( inout ) :: phi class ( t_OhHelp ), intent ( inout ) :: ohhelp end subroutine end interface contains end module","tags":"","loc":"sourcefile/field_solver.f90.html"},{"title":"mpi_fft_solver.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~mpi_fft_solver.f90~~EfferentGraph sourcefile~mpi_fft_solver.f90 mpi_fft_solver.f90 sourcefile~block.f90 block.f90 sourcefile~mpi_fft_solver.f90->sourcefile~block.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~mpi_fft_solver.f90~~AfferentGraph sourcefile~mpi_fft_solver.f90 mpi_fft_solver.f90 sourcefile~mpi_fftw3_solver.f90 mpi_fftw3_solver.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~mpi_fft_solver.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~mpi_fft_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~mpi_fftw3_solver.f90 sourcefile~poisson_solver.f90 poisson_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~poisson_solver.f90 sourcefile~poisson_solver.f90->sourcefile~mpi_fft_solver.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_mpi_fft_solver Source Code mpi_fft_solver.f90 Source Code module m_mpi_fft_solver use m_block implicit none private public t_MPIFFTSolver3d type , abstract :: t_MPIFFTSolver3d integer :: boundary_types ( 3 ) type ( t_Block ) :: local_block type ( t_Block ) :: logical_block type ( t_Block ) :: global_block contains procedure ( mpiFFTSolver3d_forward ), deferred :: forward procedure ( mpiFFTSolver3d_backward ), deferred :: backward end type interface subroutine mpiFFTSolver3d_forward ( self , in , out ) import t_MPIFFTSolver3d class ( t_MPIFFTSolver3d ), intent ( inout ) :: self double precision , intent ( in ) :: in ( self % local_block % start ( 1 ): self % local_block % end ( 1 ), & self % local_block % start ( 2 ): self % local_block % end ( 2 ), & self % local_block % start ( 3 ): self % local_block % end ( 3 )) double precision , intent ( out ) :: out ( self % local_block % start ( 1 ): self % local_block % end ( 1 ), & self % local_block % start ( 2 ): self % local_block % end ( 2 ), & self % local_block % start ( 3 ): self % local_block % end ( 3 )) end subroutine subroutine mpiFFTSolver3d_backward ( self , in , out ) import t_MPIFFTSolver3d class ( t_MPIFFTSolver3d ), intent ( inout ) :: self double precision , intent ( in ) :: in ( self % local_block % start ( 1 ): self % local_block % end ( 1 ), & self % local_block % start ( 2 ): self % local_block % end ( 2 ), & self % local_block % start ( 3 ): self % local_block % end ( 3 )) double precision , intent ( out ) :: out ( self % local_block % start ( 1 ): self % local_block % end ( 1 ), & self % local_block % start ( 2 ): self % local_block % end ( 2 ), & self % local_block % start ( 3 ): self % local_block % end ( 3 )) end subroutine end interface end module","tags":"","loc":"sourcefile/mpi_fft_solver.f90.html"},{"title":"mpi_fftw3_solver.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~mpi_fftw3_solver.f90~~EfferentGraph sourcefile~mpi_fftw3_solver.f90 mpi_fftw3_solver.f90 sourcefile~block.f90 block.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~block.f90 sourcefile~field_boundary_type.f90 field_boundary_type.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~field_boundary_type.f90 sourcefile~mpi_block_rebaser.f90 mpi_block_rebaser.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~mpi_block_rebaser.f90 sourcefile~mpi_fft_solver.f90 mpi_fft_solver.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~mpi_fft_solver.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block.f90 sourcefile~block_communicator.f90 block_communicator.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_communicator.f90 sourcefile~block_communicator_list.f90 block_communicator_list.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_communicator_list.f90 sourcefile~block_list.f90 block_list.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_list.f90 sourcefile~mpi_fft_solver.f90->sourcefile~block.f90 sourcefile~block_communicator.f90->sourcefile~block.f90 sourcefile~block_communicator_list.f90->sourcefile~block_communicator.f90 sourcefile~block_list.f90->sourcefile~block.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~mpi_fftw3_solver.f90~~AfferentGraph sourcefile~mpi_fftw3_solver.f90 mpi_fftw3_solver.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~mpi_fftw3_solver.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_mpi_fftw3_solver Source Code mpi_fftw3_solver.f90 Source Code module m_mpi_fftw3_solver use m_mpi_fft_solver use m_fftw3_mpi use m_field_boundary_type use m_block use m_mpi_block_rebaser use mpi implicit none private public new_MPIFFTW3Solver3d type , extends ( t_MPIFFTSolver3d ) :: t_MPIFFTW3Solver3d type ( C_PTR ) :: forward_plan type ( C_PTR ) :: backward_plan double precision :: normalizers ( 3 ) type ( t_Block ) :: require_block integer :: myid integer :: nprocs integer :: communicator integer :: tag type ( C_PTR ) :: ptr_fft_array real ( C_DOUBLE ), pointer :: fft_array (:, :, :) type ( t_MPIBlockRebaser ) :: in2fftarray type ( t_MPIBlockRebaser ) :: fftarray2out contains procedure :: forward => mpiFFTW3Solver_forward procedure :: backward => mpiFFTW3Solver_backward procedure :: cleanup => mpiFFTWSolver_cleanup end type contains function new_MPIFFTW3Solver3d ( fft_boundary_types , & local_block , & global_block , & myid , nprocs , & communicator , tag ) result ( obj ) integer , intent ( in ) :: fft_boundary_types ( 3 ) !> Block that the local process has. !> global index 座標系は1:nx type ( t_Block ), intent ( in ) :: local_block type ( t_Block ), intent ( in ) :: global_block integer , intent ( in ) :: myid integer , intent ( in ) :: nprocs integer , intent ( in ) :: communicator integer , intent ( in ) :: tag type ( t_MPIFFTW3Solver3d ) :: obj integer ( kind = C_INTPTR_T ) :: iptr_nx , iptr_ny , iptr_nz integer ( C_INTPTR_T ) :: local_nz , local_z_start obj % boundary_types (:) = fft_boundary_types (:) obj % local_block = local_block obj % global_block = global_block obj % myid = myid obj % nprocs = nprocs obj % communicator = communicator obj % tag = tag call fftw_mpi_init () block ! Create fftw plan. integer ( C_FFTW_R2R_KIND ) :: forward_fft_type_x integer ( C_FFTW_R2R_KIND ) :: forward_fft_type_y integer ( C_FFTW_R2R_KIND ) :: forward_fft_type_z integer ( C_FFTW_R2R_KIND ) :: backward_fft_type_x integer ( C_FFTW_R2R_KIND ) :: backward_fft_type_y integer ( C_FFTW_R2R_KIND ) :: backward_fft_type_z double precision :: normalizer_x double precision :: normalizer_y double precision :: normalizer_z integer :: logical_start ( 3 ), logical_end ( 3 ) integer :: nx , ny , nz integer ( C_INTPTR_T ) :: alloc_local call convert_fft_type ( global_block % start ( 1 ), global_block % end ( 1 ), & fft_boundary_types ( 1 ), & logical_start ( 1 ), logical_end ( 1 ), & forward_fft_type_x , backward_fft_type_x , normalizer_x ) call convert_fft_type ( global_block % start ( 2 ), global_block % end ( 2 ), & fft_boundary_types ( 2 ), & logical_start ( 2 ), logical_end ( 2 ), & forward_fft_type_y , backward_fft_type_y , normalizer_y ) call convert_fft_type ( global_block % start ( 3 ), global_block % end ( 3 ), & fft_boundary_types ( 3 ), & logical_start ( 3 ), logical_end ( 3 ), & forward_fft_type_z , backward_fft_type_z , normalizer_z ) obj % logical_block = new_Block ( logical_start , logical_end ) iptr_nx = obj % logical_block % sizes ( 1 ) iptr_ny = obj % logical_block % sizes ( 2 ) iptr_nz = obj % logical_block % sizes ( 3 ) alloc_local = fftw_mpi_local_size_3d ( iptr_nz , & iptr_ny , & iptr_nx , & communicator , & local_nz , local_z_start ) obj % ptr_fft_array = fftw_alloc_real ( alloc_local ) call c_f_pointer ( obj % ptr_fft_array , obj % fft_array , & [ iptr_nx , iptr_ny , local_nz ]) obj % normalizers = [ normalizer_x , normalizer_y , normalizer_z ] obj % forward_plan = fftw_mpi_plan_r2r_3d ( iptr_nz , iptr_ny , iptr_nx , & obj % fft_array , obj % fft_array , & obj % communicator , & forward_fft_type_z , & forward_fft_type_y , & forward_fft_type_x , & FFTW_MEASURE ) obj % backward_plan = fftw_mpi_plan_r2r_3d ( iptr_nz , iptr_ny , iptr_nx , & obj % fft_array , obj % fft_array , & obj % communicator , & backward_fft_type_z , & backward_fft_type_y , & backward_fft_type_x , & FFTW_MEASURE ) end block block ! Set the coordinate range (block) to be used in fftw. integer :: zs , ze ! local_z from fftw start at 0 to nz-1 zs = local_z_start + obj % logical_block % start ( 3 ) ze = local_z_start + obj % logical_block % start ( 3 ) + local_nz - 1 obj % require_block = new_Block ([ obj % logical_block % start ( 1 ), obj % logical_block % start ( 2 ), zs ], & [ obj % logical_block % end ( 1 ), obj % logical_block % end ( 2 ), ze ]) end block block ! Create a converter between the coordinate range used in fft and the coordinate range for subdomain. integer :: pids ( nprocs ) integer :: i do i = 1 , nprocs pids ( i ) = i - 1 end do obj % in2fftarray = new_MPIBlockRebaser ( obj % local_block , obj % require_block , pids , myid + 1 , obj % communicator ) obj % fftarray2out = new_MPIBlockRebaser ( obj % require_block , obj % local_block , pids , myid + 1 , obj % communicator ) end block end function subroutine convert_fft_type ( global_start , global_end , boundary_type , & logical_start , logical_end , & forward_fft_type , backward_fft_type , & normalizer ) integer , intent ( in ) :: global_start integer , intent ( in ) :: global_end integer , intent ( in ) :: boundary_type integer , intent ( out ) :: logical_start integer , intent ( out ) :: logical_end integer ( C_FFTW_R2R_KIND ), intent ( out ) :: forward_fft_type integer ( C_FFTW_R2R_KIND ), intent ( out ) :: backward_fft_type double precision , intent ( out ) :: normalizer integer :: n select case ( boundary_type ) case ( Field_BoundaryType_Periodic ) forward_fft_type = FFTW_R2HC backward_fft_type = FFTW_HC2R logical_start = global_start logical_end = global_end - 1 n = logical_end - global_start + 1 normalizer = n case ( Field_BoundaryType_Dirichlet ) forward_fft_type = FFTW_RODFT00 backward_fft_type = FFTW_RODFT00 logical_start = global_start + 1 logical_end = global_end - 1 n = logical_end - global_start + 1 normalizer = 2.0d0 * ( n + 1.0d0 ) case ( Field_BoundaryType_Neumann ) forward_fft_type = FFTW_REDFT00 backward_fft_type = FFTW_REDFT00 logical_start = global_start logical_end = global_end n = logical_end - global_start + 1 normalizer = 2.0d0 * ( n - 1.0d0 ) case ( Field_BoundaryType_Dirichlet_Neumann ) forward_fft_type = FFTW_RODFT01 backward_fft_type = FFTW_RODFT10 logical_start = global_start + 1 logical_end = global_end n = logical_end - global_start + 1 normalizer = 2.0d0 * n case ( Field_BoundaryType_Neumann_Dirichlet ) forward_fft_type = FFTW_REDFT01 backward_fft_type = FFTW_REDFT10 logical_start = global_start logical_end = global_end - 1 n = logical_end - global_start + 1 normalizer = 2.0d0 * n end select end subroutine subroutine mpiFFTW3Solver_forward ( self , in , out ) class ( t_MPIFFTW3Solver3d ), intent ( inout ) :: self double precision , intent ( in ) :: in ( self % local_block % start ( 1 ): self % local_block % end ( 1 ), & self % local_block % start ( 2 ): self % local_block % end ( 2 ), & self % local_block % start ( 3 ): self % local_block % end ( 3 )) double precision , intent ( out ) :: out ( self % local_block % start ( 1 ): self % local_block % end ( 1 ), & self % local_block % start ( 2 ): self % local_block % end ( 2 ), & self % local_block % start ( 3 ): self % local_block % end ( 3 )) call self % in2fftarray % rebase ( in , self % fft_array , tag = self % tag ) call fftw_mpi_execute_r2r ( self % forward_plan , self % fft_array , self % fft_array ) call self % fftarray2out % rebase ( self % fft_array , out , tag = self % tag ) end subroutine subroutine mpiFFTW3Solver_backward ( self , in , out ) class ( t_MPIFFTW3Solver3d ), intent ( inout ) :: self double precision , intent ( in ) :: in ( self % local_block % start ( 1 ): self % local_block % end ( 1 ), & self % local_block % start ( 2 ): self % local_block % end ( 2 ), & self % local_block % start ( 3 ): self % local_block % end ( 3 )) double precision , intent ( out ) :: out ( self % local_block % start ( 1 ): self % local_block % end ( 1 ), & self % local_block % start ( 2 ): self % local_block % end ( 2 ), & self % local_block % start ( 3 ): self % local_block % end ( 3 )) call self % in2fftarray % rebase ( in , self % fft_array , tag = self % tag ) call fftw_mpi_execute_r2r ( self % backward_plan , self % fft_array , self % fft_array ) call self % fftarray2out % rebase ( self % fft_array , out , tag = self % tag ) out = out / product ( self % normalizers ) end subroutine subroutine mpiFFTWSolver_cleanup ( self ) class ( t_MPIFFTW3Solver3d ), intent ( inout ) :: self call fftw_free ( self % ptr_fft_array ) call fftw_mpi_cleanup () end subroutine end module","tags":"","loc":"sourcefile/mpi_fftw3_solver.f90.html"},{"title":"block_communicator_list.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~block_communicator_list.f90~~EfferentGraph sourcefile~block_communicator_list.f90 block_communicator_list.f90 sourcefile~block_communicator.f90 block_communicator.f90 sourcefile~block_communicator_list.f90->sourcefile~block_communicator.f90 sourcefile~block.f90 block.f90 sourcefile~block_communicator.f90->sourcefile~block.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~block_communicator_list.f90~~AfferentGraph sourcefile~block_communicator_list.f90 block_communicator_list.f90 sourcefile~mpi_block_rebaser.f90 mpi_block_rebaser.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_communicator_list.f90 sourcefile~mpi_fftw3_solver.f90 mpi_fftw3_solver.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~mpi_block_rebaser.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~mpi_fftw3_solver.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_block_communicator_list Source Code block_communicator_list.f90 Source Code module m_block_communicator_list use m_list , only : t_List , init_list use m_block_communicator , only : t_BlockCommunicator implicit none private public t_BlockCommunicatorList public new_BlockCommunicatorList type , extends ( t_List ) :: t_BlockCommunicatorList type ( t_BlockCommunicator ), allocatable :: buffer (:) type ( t_BlockCommunicator ), allocatable :: tmp_buffer (:) contains procedure :: allocate_tmp_buffer => blockSendReceiverList_allocate_tmp_buffer procedure :: copy_to_tmp_buffer => blockSendReceiverList_copy_to_tmp_buffer procedure :: switch_to_tmp_buffer => blockSendReceiverList_switch_to_tmp_buffer procedure :: destroy => blockSendReceiverList_destroy procedure :: append => blockSendReceiverList_append procedure :: get => blockSendReceiverList_get end type contains function new_BlockCommunicatorList ( max_size , growth_factor ) result ( obj ) integer , intent ( in ), optional :: max_size double precision , intent ( in ), optional :: growth_factor type ( t_BlockCommunicatorList ) :: obj call init_list ( obj , max_size , growth_factor ) end function subroutine blockSendReceiverList_allocate_tmp_buffer ( self , n ) class ( t_BlockCommunicatorList ), intent ( inout ) :: self integer , intent ( in ) :: n allocate ( self % tmp_buffer ( n )) end subroutine subroutine blockSendReceiverList_copy_to_tmp_buffer ( self ) class ( t_BlockCommunicatorList ), intent ( inout ) :: self integer :: i do i = 1 , self % current_size self % tmp_buffer ( i ) = self % buffer ( i ) end do deallocate ( self % buffer ) end subroutine subroutine blockSendReceiverList_switch_to_tmp_buffer ( self ) class ( t_BlockCommunicatorList ), intent ( inout ) :: self allocate ( self % buffer , source = self % tmp_buffer ) deallocate ( self % tmp_buffer ) end subroutine subroutine blockSendReceiverList_append ( self , setting ) class ( t_BlockCommunicatorList ), intent ( inout ) :: self type ( t_BlockCommunicator ), intent ( in ) :: setting if ( self % current_size == self % max_size ) then call self % extent_size () end if self % current_size = self % current_size + 1 self % buffer ( self % current_size ) = setting end subroutine subroutine blockSendReceiverList_destroy ( self ) class ( t_BlockCommunicatorList ), intent ( inout ) :: self type ( t_BlockCommunicator ) :: setting integer :: i do i = 1 , self % current_size setting = self % get ( i ) call setting % destroy end do deallocate ( self % buffer ) end subroutine function blockSendReceiverList_get ( self , i ) result ( ret ) class ( t_BlockCommunicatorList ), intent ( in ) :: self integer , intent ( in ) :: i type ( t_BlockCommunicator ) :: ret ret = self % buffer ( i ) end function end module","tags":"","loc":"sourcefile/block_communicator_list.f90.html"},{"title":"block.f90 – ohhelp-pic-3d","text":"Files dependent on this one sourcefile~~block.f90~~AfferentGraph sourcefile~block.f90 block.f90 sourcefile~block_communicator.f90 block_communicator.f90 sourcefile~block_communicator.f90->sourcefile~block.f90 sourcefile~block_list.f90 block_list.f90 sourcefile~block_list.f90->sourcefile~block.f90 sourcefile~mpi_block_rebaser.f90 mpi_block_rebaser.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_communicator.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_list.f90 sourcefile~block_communicator_list.f90 block_communicator_list.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_communicator_list.f90 sourcefile~mpi_fft_solver.f90 mpi_fft_solver.f90 sourcefile~mpi_fft_solver.f90->sourcefile~block.f90 sourcefile~mpi_fftw3_solver.f90 mpi_fftw3_solver.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~block.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~mpi_block_rebaser.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~mpi_fft_solver.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~block.f90 sourcefile~ohhelppic3d.f90->sourcefile~mpi_fft_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~mpi_fftw3_solver.f90 sourcefile~poisson_solver.f90 poisson_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~poisson_solver.f90 sourcefile~poisson_solver.f90->sourcefile~block.f90 sourcefile~poisson_solver.f90->sourcefile~mpi_fft_solver.f90 sourcefile~block_communicator_list.f90->sourcefile~block_communicator.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_block Source Code block.f90 Source Code module m_block implicit none private public SIZE_OF_BLOCK_ARRAY public t_Block public new_block integer , parameter :: SIZE_OF_BLOCK_ARRAY = 6 type t_Block integer :: start ( 3 ) integer :: end ( 3 ) integer :: sizes ( 3 ) contains procedure :: size => block_size procedure :: overlapped => block_overlapped procedure :: to_array => block_to_array procedure :: from_array => block_from_array end type contains function new_Block ( start , end ) result ( obj ) integer , intent ( in ) :: start ( 3 ) integer , intent ( in ) :: end ( 3 ) type ( t_Block ) :: obj obj % start ( 1 : 3 ) = start ( 1 : 3 ) obj % end ( 1 : 3 ) = end ( 1 : 3 ) obj % sizes ( 1 : 3 ) = max ( obj % end ( 1 : 3 ) - obj % start ( 1 : 3 ) + 1 , 0 ) end function function block_size ( self ) result ( size ) class ( t_Block ), intent ( in ) :: self integer :: size size = product ( self % sizes ( 1 : 3 )) end function function block_overlapped ( self , other ) result ( overlapped ) class ( t_Block ), intent ( in ) :: self class ( t_Block ), intent ( in ) :: other type ( t_Block ) :: overlapped integer :: start ( 3 ), end ( 3 ) if ( self % size () == 0 . or . other % size () == 0 ) then overlapped = new_block ([ 0 , 0 , 0 ], [ - 1 , - 1 , - 1 ]) return end if start ( 1 : 3 ) = max ( self % start ( 1 : 3 ), other % start ( 1 : 3 )) end ( 1 : 3 ) = min ( self % end ( 1 : 3 ), other % end ( 1 : 3 )) overlapped = new_block ( start , end ) end function subroutine block_to_array ( self , array ) class ( t_Block ), intent ( in ) :: self integer , intent ( out ) :: array ( SIZE_OF_BLOCK_ARRAY ) array ( 1 : 3 ) = self % start ( 1 : 3 ) array ( 4 : 6 ) = self % end ( 1 : 3 ) end subroutine subroutine block_from_array ( self , array ) class ( t_Block ), intent ( inout ) :: self integer , intent ( in ) :: array ( SIZE_OF_BLOCK_ARRAY ) self % start ( 1 : 3 ) = array ( 1 : 3 ) self % end ( 1 : 3 ) = array ( 4 : 6 ) self % sizes ( 1 : 3 ) = max ( self % end ( 1 : 3 ) - self % start ( 1 : 3 ) + 1 , 0 ) end subroutine end module","tags":"","loc":"sourcefile/block.f90.html"},{"title":"block_communicator.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~block_communicator.f90~~EfferentGraph sourcefile~block_communicator.f90 block_communicator.f90 sourcefile~block.f90 block.f90 sourcefile~block_communicator.f90->sourcefile~block.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~block_communicator.f90~~AfferentGraph sourcefile~block_communicator.f90 block_communicator.f90 sourcefile~block_communicator_list.f90 block_communicator_list.f90 sourcefile~block_communicator_list.f90->sourcefile~block_communicator.f90 sourcefile~mpi_block_rebaser.f90 mpi_block_rebaser.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_communicator.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_communicator_list.f90 sourcefile~mpi_fftw3_solver.f90 mpi_fftw3_solver.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~mpi_block_rebaser.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~mpi_fftw3_solver.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_block_communicator Source Code block_communicator.f90 Source Code module m_block_communicator use m_block use mpi implicit none private public t_BlockCommunicator , new_BlockCommunicator type t_BlockCommunicator type ( t_Block ) :: local_block type ( t_Block ) :: comm_block integer :: mpi_type integer :: pid integer ( kind ( MPI_COMM_WORLD )) :: comm contains procedure :: isend => blockCommunicator_isend procedure :: irecv => blockCommunicator_irecv procedure :: destroy => blockCommunicator_destroy end type contains function new_BlockCommunicator ( local_block , comm_block , pid , comm ) result ( obj ) !> Locally allocated block. type ( t_Block ), intent ( in ) :: local_block !> Block used for communication. type ( t_Block ), intent ( in ) :: comm_block integer , intent ( in ) :: pid integer ( kind ( MPI_COMM_WORLD )), intent ( in ) :: comm type ( t_BlockCommunicator ) :: obj integer :: sizes ( 3 ) integer :: subsizes ( 3 ) integer :: starts ( 3 ) integer :: ierr obj % local_block = local_block obj % comm_block = comm_block obj % pid = pid obj % comm = comm if ( obj % comm_block % size () == 0 ) then return end if sizes (:) = local_block % sizes (:) subsizes (:) = comm_block % sizes (:) starts (:) = comm_block % start (:) - local_block % start (:) call MPI_Type_create_subarray ( 3 , & sizes , subsizes , starts , & MPI_ORDER_FORTRAN , MPI_DOUBLE_PRECISION , & obj % mpi_type , & ierr ) call MPI_Type_commit ( obj % mpi_type , ierr ) end function subroutine blockCommunicator_isend ( self , senddata , tag , request ) class ( t_BlockCommunicator ), intent ( inout ) :: self double precision , intent ( in ) :: senddata ( self % local_block % start ( 1 ): self % local_block % end ( 1 ), & self % local_block % start ( 2 ): self % local_block % end ( 2 ), & self % local_block % start ( 3 ): self % local_block % end ( 3 )) integer , intent ( in ) :: tag integer , intent ( out ) :: request integer :: start ( 3 ) integer :: ierr if ( self % comm_block % size () == 0 ) then return end if start (:) = self % local_block % start (:) call MPI_Isend ( senddata ( start ( 1 ), start ( 2 ), start ( 3 )), 1 , self % mpi_type , self % pid , tag , self % comm , request , ierr ) end subroutine subroutine blockCommunicator_irecv ( self , recvdata , tag , request ) class ( t_BlockCommunicator ), intent ( inout ) :: self integer , intent ( in ) :: tag double precision , intent ( inout ) :: recvdata ( self % local_block % start ( 1 ): self % local_block % end ( 1 ), & self % local_block % start ( 2 ): self % local_block % end ( 2 ), & self % local_block % start ( 3 ): self % local_block % end ( 3 )) integer , intent ( out ) :: request integer :: start ( 3 ) integer :: ierr if ( self % comm_block % size () == 0 ) then return end if start (:) = self % local_block % start (:) call MPI_Irecv ( recvdata ( start ( 1 ), start ( 2 ), start ( 3 )), 1 , self % mpi_type , self % pid , tag , self % comm , request , ierr ) end subroutine subroutine blockCommunicator_destroy ( self ) class ( t_BlockCommunicator ), intent ( inout ) :: self integer :: ierr call MPI_Type_free ( self % mpi_type , ierr ) end subroutine end module","tags":"","loc":"sourcefile/block_communicator.f90.html"},{"title":"mpi_block_rebaser.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~mpi_block_rebaser.f90~~EfferentGraph sourcefile~mpi_block_rebaser.f90 mpi_block_rebaser.f90 sourcefile~block.f90 block.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block.f90 sourcefile~block_communicator.f90 block_communicator.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_communicator.f90 sourcefile~block_communicator_list.f90 block_communicator_list.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_communicator_list.f90 sourcefile~block_list.f90 block_list.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_list.f90 sourcefile~block_communicator.f90->sourcefile~block.f90 sourcefile~block_communicator_list.f90->sourcefile~block_communicator.f90 sourcefile~block_list.f90->sourcefile~block.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~mpi_block_rebaser.f90~~AfferentGraph sourcefile~mpi_block_rebaser.f90 mpi_block_rebaser.f90 sourcefile~mpi_fftw3_solver.f90 mpi_fftw3_solver.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~mpi_block_rebaser.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~mpi_fftw3_solver.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_mpi_block_rebaser Source Code mpi_block_rebaser.f90 Source Code ! TODO: モジュール名とクラス名をよりわかりやすい名前に変える(rebaseはよくわからない) module m_mpi_block_rebaser use m_block use m_block_list use m_block_communicator use m_block_communicator_list use mpi use m_get_default , only : get_default implicit none private public t_MPIBlockRebaser public new_MPIBlockRebaser type t_MPIBlockRebaser !> Block that local process has. type ( t_Block ) :: local_block !> Block that local process requires. type ( t_Block ) :: require_block type ( t_BlockCommunicatorList ), private :: block_senders type ( t_BlockCommunicatorList ), private :: block_receivers integer , allocatable :: pids (:) integer :: ipid integer ( kind = kind ( MPI_COMM_WORLD )), private :: comm contains procedure :: rebase => mpiBlockRebaser_rebase procedure :: destroy => mpiBlockRebaser_destroy end type interface new_MPIBlockRebaser procedure :: new_MPIBlockRebaser_with_blocks procedure :: new_MPIBlockRebaser_with_local_block end interface contains function new_MPIBlockRebaser_with_blocks ( local_blocks , require_blocks , pids , ipid , comm ) result ( obj ) !> Blocks that each process has. type ( t_BlockList ), intent ( in ) :: local_blocks !> Blocks that each process requires. type ( t_BlockList ), intent ( in ) :: require_blocks !> Array of process ID (= rank = 0, 1, 2, ..., nproc-1). !> It should be the same as the order of blocks and require_blocks. integer , intent ( in ) :: pids (:) !> Index to identify the current process ID from pids(1:len(pids)). integer , intent ( in ) :: ipid !> MPI Communicator. integer ( kind = kind ( MPI_COMM_WORLD )), intent ( in ) :: comm type ( t_MPIBlockRebaser ) :: obj obj % local_block = local_blocks % get ( ipid ) obj % require_block = require_blocks % get ( ipid ) obj % pids = pids obj % ipid = ipid obj % block_senders = new_BlockCommunicatorList () obj % block_receivers = new_BlockCommunicatorList () block ! Send settings type ( t_Block ) :: overlapped type ( t_BlockCommunicator ) :: sender integer :: i do i = 1 , require_blocks % current_size overlapped = obj % local_block % overlapped ( require_blocks % get ( i )) if ( overlapped % size () == 0 ) then cycle end if sender = new_BlockCommunicator ( obj % local_block , overlapped , pids ( i ), comm ) call obj % block_senders % append ( sender ) end do end block block ! Recv settings type ( t_Block ) :: overlapped type ( t_BlockCommunicator ) :: receiver integer :: i do i = 1 , local_blocks % current_size overlapped = obj % require_block % overlapped ( local_blocks % get ( i )) if ( overlapped % size () == 0 ) then cycle end if receiver = new_BlockCommunicator ( obj % require_block , overlapped , pids ( i ), comm ) call obj % block_receivers % append ( receiver ) end do end block obj % comm = comm end function function new_MPIBlockRebaser_with_local_block ( local_block , require_block , pids , ipid , comm , tag ) result ( obj ) !> Blocks that each process has. type ( t_Block ), intent ( in ) :: local_block !> Blocks that each process requires. type ( t_Block ), intent ( in ) :: require_block !> Array of process ID (= rank = 0, 1, 2, ..., nproc-1). !> It should be the same as the order of blocks and require_blocks. integer , intent ( in ) :: pids (:) !> Index to identify the current process ID from pids(1:len(pids)). integer , intent ( in ) :: ipid !> MPI Communicator. integer ( kind = kind ( MPI_COMM_WORLD )), intent ( in ) :: comm integer , optional , intent ( in ) :: tag type ( t_MPIBlockRebaser ) :: obj !> Blocks that each process has. type ( t_BlockList ) :: local_blocks !> Blocks that each process requires. type ( t_BlockList ) :: require_blocks local_blocks = mpi_collect_blocks ( local_block , pids , comm , tag ) require_blocks = mpi_collect_blocks ( require_block , pids , comm , tag ) obj = new_MPIBlockRebaser ( local_blocks , require_blocks , pids , ipid , comm ) end function function mpi_collect_blocks ( block , pids , comm , tag ) result ( blocks ) type ( t_Block ), intent ( in ) :: block !> Array of process ID (= rank = 0, 1, 2, ..., nproc-1). !> It should be the same as the order of blocks and require_blocks. integer , intent ( in ) :: pids (:) integer , intent ( in ) :: comm integer , optional , intent ( in ) :: tag type ( t_BlockList ) :: blocks integer :: send_data ( SIZE_OF_BLOCK_ARRAY ) integer :: recv_datas ( SIZE_OF_BLOCK_ARRAY , size ( pids )) integer :: send_requests ( size ( pids )) integer :: recv_requests ( size ( pids )) integer :: send_status ( MPI_STATUS_SIZE , size ( pids )) integer :: recv_status ( MPI_STATUS_SIZE , size ( pids )) integer :: ierr integer :: i , ip call block % to_array ( send_data (:)) do i = 1 , size ( pids ) ip = pids ( i ) call MPI_Isend ( send_data ( 1 ), SIZE_OF_BLOCK_ARRAY , MPI_INTEGER , & ip , & get_default ( tag , 0 ), comm , & send_requests ( i ), ierr ) call MPI_Irecv ( recv_datas ( 1 , i ), SIZE_OF_BLOCK_ARRAY , MPI_INTEGER , & ip , & get_default ( tag , 0 ), comm , & recv_requests ( i ), ierr ) end do call MPI_Waitall ( size ( pids ), recv_requests (:), recv_status (:, :), ierr ) call MPI_Waitall ( size ( pids ), send_requests (:), send_status (:, :), ierr ) blocks = new_BlockList () block type ( t_Block ) :: blk do i = 1 , size ( pids ) call blk % from_array ( recv_datas (:, i )) call blocks % append ( blk ) end do end block end function subroutine mpiBlockRebaser_rebase ( self , send_data , recv_data , tag ) class ( t_MPIBlockRebaser ), intent ( in ) :: self double precision , intent ( in ) :: send_data ( self % local_block % start ( 1 ): self % local_block % end ( 1 ), & self % local_block % start ( 2 ): self % local_block % end ( 2 ), & self % local_block % start ( 3 ): self % local_block % end ( 3 )) double precision , intent ( inout ) :: recv_data ( self % require_block % start ( 1 ): self % require_block % end ( 1 ), & self % require_block % start ( 2 ): self % require_block % end ( 2 ), & self % require_block % start ( 3 ): self % require_block % end ( 3 )) integer , intent ( in ), optional :: tag integer :: send_requests ( self % block_senders % current_size ) integer :: recv_requests ( self % block_receivers % current_size ) integer :: send_status ( MPI_STATUS_SIZE , self % block_senders % current_size ) integer :: recv_status ( MPI_STATUS_SIZE , self % block_receivers % current_size ) block integer :: i type ( t_BlockCommunicator ) :: sender do i = 1 , self % block_senders % current_size sender = self % block_senders % get ( i ) ! print *, self%pids(self%ipid), 'send', sender%pid call sender % isend ( send_data (:, :, :), get_default ( tag , 0 ), send_requests ( i )) end do end block block integer :: i type ( t_BlockCommunicator ) :: receiver do i = 1 , self % block_receivers % current_size receiver = self % block_receivers % get ( i ) ! print *, self%pids(self%ipid), 'recv', receiver%pid call receiver % irecv ( recv_data (:, :, :), get_default ( tag , 0 ), recv_requests ( i )) end do end block ! print *, self%pids(self%ipid), self%block_senders%current_size, self%block_receivers%current_size block integer :: ierr call MPI_Waitall ( self % block_receivers % current_size , recv_requests (:), recv_status (:, :), ierr ) call MPI_Waitall ( self % block_senders % current_size , send_requests (:), send_status (:, :), ierr ) end block end subroutine subroutine mpiBlockRebaser_destroy ( self ) class ( t_MPIBlockRebaser ), intent ( inout ) :: self call self % block_senders % destroy call self % block_receivers % destroy end subroutine end module","tags":"","loc":"sourcefile/mpi_block_rebaser.f90.html"},{"title":"block_list.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~block_list.f90~~EfferentGraph sourcefile~block_list.f90 block_list.f90 sourcefile~block.f90 block.f90 sourcefile~block_list.f90->sourcefile~block.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~block_list.f90~~AfferentGraph sourcefile~block_list.f90 block_list.f90 sourcefile~mpi_block_rebaser.f90 mpi_block_rebaser.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_list.f90 sourcefile~mpi_fftw3_solver.f90 mpi_fftw3_solver.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~mpi_block_rebaser.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~mpi_fftw3_solver.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_block_list Source Code block_list.f90 Source Code module m_block_list use m_list , only : t_List , init_list use m_block , only : t_Block implicit none private public t_BlockList public new_BlockList type , extends ( t_List ) :: t_BlockList type ( t_Block ), allocatable :: buffer (:) type ( t_Block ), allocatable :: tmp_buffer (:) contains procedure :: allocate_tmp_buffer => blockList_allocate_tmp_buffer procedure :: copy_to_tmp_buffer => blockList_copy_to_tmp_buffer procedure :: switch_to_tmp_buffer => blockList_switch_to_tmp_buffer procedure :: destroy => blockList_destroy procedure :: append => blockList_append procedure :: get => blockList_get end type contains function new_BlockList ( max_size , growth_factor ) result ( obj ) integer , intent ( in ), optional :: max_size double precision , intent ( in ), optional :: growth_factor type ( t_BlockList ) :: obj call init_list ( obj , max_size , growth_factor ) end function subroutine blockList_allocate_tmp_buffer ( self , n ) class ( t_BlockList ), intent ( inout ) :: self integer , intent ( in ) :: n allocate ( self % tmp_buffer ( n )) end subroutine subroutine blockList_copy_to_tmp_buffer ( self ) class ( t_BlockList ), intent ( inout ) :: self integer :: i do i = 1 , self % current_size self % tmp_buffer ( i ) = self % buffer ( i ) end do deallocate ( self % buffer ) end subroutine subroutine blockList_switch_to_tmp_buffer ( self ) class ( t_BlockList ), intent ( inout ) :: self allocate ( self % buffer , source = self % tmp_buffer ) deallocate ( self % tmp_buffer ) end subroutine subroutine blockList_append ( self , blk ) class ( t_BlockList ), intent ( inout ) :: self type ( t_Block ), intent ( in ) :: blk if ( self % current_size == self % max_size ) then call self % extent_size () end if self % current_size = self % current_size + 1 self % buffer ( self % current_size ) = blk end subroutine subroutine blockList_destroy ( self ) class ( t_BlockList ), intent ( inout ) :: self deallocate ( self % buffer ) end subroutine function blockList_get ( self , i ) result ( ret ) class ( t_BlockList ), intent ( in ) :: self integer , intent ( in ) :: i type ( t_Block ) :: ret ret = self % buffer ( i ) end function end module","tags":"","loc":"sourcefile/block_list.f90.html"},{"title":"linear_scatter.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~linear_scatter.f90~~EfferentGraph sourcefile~linear_scatter.f90 linear_scatter.f90 sourcefile~ohfield.f90 ohfield.f90 sourcefile~linear_scatter.f90->sourcefile~ohfield.f90 sourcefile~scatter.f90 scatter.f90 sourcefile~linear_scatter.f90->sourcefile~scatter.f90 sourcefile~scatter.f90->sourcefile~ohfield.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~linear_scatter.f90~~AfferentGraph sourcefile~linear_scatter.f90 linear_scatter.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~linear_scatter.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_linear_scatter Source Code linear_scatter.f90 Source Code module m_linear_scatter use m_scatter use oh_type , only : oh_particle use m_ohfield , only : t_OhField implicit none private public t_LinearScatter public new_LinearScatter type , extends ( t_Scatter ) :: t_LinearScatter contains procedure :: scatter => linearScatter_scatter end type contains function new_LinearScatter () result ( obj ) type ( t_LinearScatter ) :: obj end function subroutine linearScatter_scatter ( self , particle , ohfield , amount , ps ) class ( t_LinearScatter ), intent ( in ) :: self type ( oh_particle ), intent ( in ) :: particle class ( t_OhField ), intent ( inout ) :: ohfield double precision , intent ( in ) :: amount ( ohfield % nelements ) integer , intent ( in ) :: ps double precision :: local_position ( 3 ) double precision :: ilocal_position ( 3 ) local_position = ohfield % to_local_position ([ particle % x , particle % y , particle % z ], ps ) ilocal_position = int ( local_position ) block integer :: i , j , k double precision :: r ( 3 ) double precision :: rxyz ( 2 , 3 ) integer :: ix , iy , iz r = local_position - ilocal_position rxyz ( 1 , :) = r (:) rxyz ( 2 , :) = 1 d0 - r (:) do concurrent ( i = 1 : 2 , j = 1 : 2 , k = 1 : 2 ) ix = ilocal_position ( 1 ) + i - 1 iy = ilocal_position ( 2 ) + j - 1 iz = ilocal_position ( 3 ) + k - 1 ohfield % values (:, ix , iy , iz , ps ) = & ohfield % values (:, ix , iy , iz , ps ) + & amount * rxyz ( i , 1 ) * rxyz ( j , 2 ) * rxyz ( k , 3 ) end do end block end subroutine end module","tags":"","loc":"sourcefile/linear_scatter.f90.html"},{"title":"scatter.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~scatter.f90~~EfferentGraph sourcefile~scatter.f90 scatter.f90 sourcefile~ohfield.f90 ohfield.f90 sourcefile~scatter.f90->sourcefile~ohfield.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~scatter.f90~~AfferentGraph sourcefile~scatter.f90 scatter.f90 sourcefile~linear_scatter.f90 linear_scatter.f90 sourcefile~linear_scatter.f90->sourcefile~scatter.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~scatter.f90 sourcefile~ohhelppic3d.f90->sourcefile~linear_scatter.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_scatter Source Code scatter.f90 Source Code module m_scatter use oh_type , only : oh_particle use m_ohfield , only : t_OhField implicit none private public t_Scatter type , abstract :: t_Scatter contains procedure ( scatter_scatter ), deferred :: scatter end type interface subroutine scatter_scatter ( self , particle , ohfield , amount , ps ) import t_Scatter import oh_particle import t_OhField class ( t_Scatter ), intent ( in ) :: self type ( oh_particle ), intent ( in ) :: particle class ( t_OhField ), intent ( inout ) :: ohfield double precision , intent ( in ) :: amount ( ohfield % nelements ) integer , intent ( in ) :: ps end subroutine end interface contains end module","tags":"","loc":"sourcefile/scatter.f90.html"},{"title":"interpolator.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~interpolator.f90~~EfferentGraph sourcefile~interpolator.f90 interpolator.f90 sourcefile~ohfield.f90 ohfield.f90 sourcefile~interpolator.f90->sourcefile~ohfield.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~interpolator.f90~~AfferentGraph sourcefile~interpolator.f90 interpolator.f90 sourcefile~linear_interpolator.f90 linear_interpolator.f90 sourcefile~linear_interpolator.f90->sourcefile~interpolator.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~interpolator.f90 sourcefile~ohhelppic3d.f90->sourcefile~linear_interpolator.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_interpolator Source Code interpolator.f90 Source Code module m_interpolator use oh_type , only : oh_particle use m_ohfield , only : t_OhField implicit none private public t_Interpolator type , abstract :: t_Interpolator contains procedure ( interpolator_interp ), deferred :: interp end type interface function interpolator_interp ( self , particle , field , ps ) result ( ret ) import t_Interpolator import oh_particle import t_OhField class ( t_Interpolator ), intent ( in ) :: self type ( oh_particle ), intent ( in ) :: particle class ( t_OhField ), intent ( in ) :: field integer , intent ( in ) :: ps double precision :: ret ( field % nelements ) end function end interface end module","tags":"","loc":"sourcefile/interpolator.f90.html"},{"title":"linear_interpolator.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~linear_interpolator.f90~~EfferentGraph sourcefile~linear_interpolator.f90 linear_interpolator.f90 sourcefile~interpolator.f90 interpolator.f90 sourcefile~linear_interpolator.f90->sourcefile~interpolator.f90 sourcefile~ohfield.f90 ohfield.f90 sourcefile~linear_interpolator.f90->sourcefile~ohfield.f90 sourcefile~interpolator.f90->sourcefile~ohfield.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~linear_interpolator.f90~~AfferentGraph sourcefile~linear_interpolator.f90 linear_interpolator.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~ohhelppic3d.f90->sourcefile~linear_interpolator.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Modules m_linear_interpolator Source Code linear_interpolator.f90 Source Code module m_linear_interpolator use m_interpolator use oh_type , only : oh_particle use m_ohfield , only : t_OhField implicit none private public t_LinearInterpolator public new_LinearInterpolator type , extends ( t_Interpolator ) :: t_LinearInterpolator contains procedure :: interp => linearInterpolator_interp end type contains function new_LinearInterpolator () result ( obj ) type ( t_LinearInterpolator ) :: obj end function function linearInterpolator_interp ( self , particle , field , ps ) result ( ret ) class ( t_LinearInterpolator ), intent ( in ) :: self type ( oh_particle ), intent ( in ) :: particle class ( t_OhField ), intent ( in ) :: field integer , intent ( in ) :: ps double precision :: ret ( field % nelements ) double precision :: local_position ( 3 ) integer :: ilocal_position ( 3 ) double precision :: v ( field % nelements , 2 , 2 , 2 ) local_position = field % to_local_position ([ particle % x , particle % y , particle % z ], ps ) ilocal_position = int ( local_position ) block integer :: i , j , k integer :: ix , iy , iz double precision :: val ( field % nelements ) do concurrent ( i = 1 : 2 , j = 1 : 2 , k = 1 : 2 ) ix = ilocal_position ( 1 ) + i - 1 iy = ilocal_position ( 2 ) + j - 1 iz = ilocal_position ( 3 ) + k - 1 val = field % values (:, ix , iy , iz , ps ) v (:, i , j , k ) = val end do end block block integer :: i , j , k double precision :: r ( 3 ) double precision :: rxyz ( 2 , 3 ) r = local_position - ilocal_position rxyz ( 1 , :) = r (:) rxyz ( 2 , :) = 1 d0 - r (:) ret (:) = 0 d0 do i = 1 , 2 do j = 1 , 2 do k = 1 , 2 ret (:) = ret (:) + v (:, i , j , k ) * rxyz ( i , 1 ) * rxyz ( j , 2 ) * rxyz ( k , 3 ) end do end do end do end block end function end module","tags":"","loc":"sourcefile/linear_interpolator.f90.html"},{"title":"main.f90 – ohhelp-pic-3d","text":"This file depends on sourcefile~~main.f90~~EfferentGraph sourcefile~main.f90 main.f90 sourcefile~ohhelppic3d.f90 ohhelppic3d.f90 sourcefile~main.f90->sourcefile~ohhelppic3d.f90 sourcefile~block.f90 block.f90 sourcefile~ohhelppic3d.f90->sourcefile~block.f90 sourcefile~domain.f90 domain.f90 sourcefile~ohhelppic3d.f90->sourcefile~domain.f90 sourcefile~field_boundary_type.f90 field_boundary_type.f90 sourcefile~ohhelppic3d.f90->sourcefile~field_boundary_type.f90 sourcefile~field_solver.f90 field_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~field_solver.f90 sourcefile~hdf5.f90 hdf5.f90 sourcefile~ohhelppic3d.f90->sourcefile~hdf5.f90 sourcefile~hdf5_for_ohfield.f90 hdf5_for_ohfield.f90 sourcefile~ohhelppic3d.f90->sourcefile~hdf5_for_ohfield.f90 sourcefile~interpolator.f90 interpolator.f90 sourcefile~ohhelppic3d.f90->sourcefile~interpolator.f90 sourcefile~linear_interpolator.f90 linear_interpolator.f90 sourcefile~ohhelppic3d.f90->sourcefile~linear_interpolator.f90 sourcefile~linear_scatter.f90 linear_scatter.f90 sourcefile~ohhelppic3d.f90->sourcefile~linear_scatter.f90 sourcefile~mpi_fft_solver.f90 mpi_fft_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~mpi_fft_solver.f90 sourcefile~mpi_fftw3_solver.f90 mpi_fftw3_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~mpi_fftw3_solver.f90 sourcefile~no_position_distribution.f90 no_position_distribution.f90 sourcefile~ohhelppic3d.f90->sourcefile~no_position_distribution.f90 sourcefile~ohfield.f90 ohfield.f90 sourcefile~ohhelppic3d.f90->sourcefile~ohfield.f90 sourcefile~ohfield_factory.f90 ohfield_factory.f90 sourcefile~ohhelppic3d.f90->sourcefile~ohfield_factory.f90 sourcefile~ohhelp.f90 ohhelp.f90 sourcefile~ohhelppic3d.f90->sourcefile~ohhelp.f90 sourcefile~ohparticles.f90 ohparticles.f90 sourcefile~ohhelppic3d.f90->sourcefile~ohparticles.f90 sourcefile~parameters.f90 parameters.f90 sourcefile~ohhelppic3d.f90->sourcefile~parameters.f90 sourcefile~particle_boundaries.f90 particle_boundaries.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_boundaries.f90 sourcefile~particle_injector_manager.f90 particle_injector_manager.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_injector_manager.f90 sourcefile~particle_mover.f90 particle_mover.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_mover.f90 sourcefile~particle_mover_factory.f90 particle_mover_factory.f90 sourcefile~ohhelppic3d.f90->sourcefile~particle_mover_factory.f90 sourcefile~pcg_generator.f90 pcg_generator.f90 sourcefile~ohhelppic3d.f90->sourcefile~pcg_generator.f90 sourcefile~poisson_solver.f90 poisson_solver.f90 sourcefile~ohhelppic3d.f90->sourcefile~poisson_solver.f90 sourcefile~random_generator.f90 random_generator.f90 sourcefile~ohhelppic3d.f90->sourcefile~random_generator.f90 sourcefile~scatter.f90 scatter.f90 sourcefile~ohhelppic3d.f90->sourcefile~scatter.f90 sourcefile~velocity_distribution.f90 velocity_distribution.f90 sourcefile~ohhelppic3d.f90->sourcefile~velocity_distribution.f90 sourcefile~field_solver.f90->sourcefile~ohfield.f90 sourcefile~field_solver.f90->sourcefile~ohhelp.f90 sourcefile~hdf5.f90->sourcefile~domain.f90 sourcefile~hdf5_for_ohfield.f90->sourcefile~domain.f90 sourcefile~hdf5_for_ohfield.f90->sourcefile~hdf5.f90 sourcefile~hdf5_for_ohfield.f90->sourcefile~ohfield.f90 sourcefile~interpolator.f90->sourcefile~ohfield.f90 sourcefile~linear_interpolator.f90->sourcefile~interpolator.f90 sourcefile~linear_interpolator.f90->sourcefile~ohfield.f90 sourcefile~linear_scatter.f90->sourcefile~ohfield.f90 sourcefile~linear_scatter.f90->sourcefile~scatter.f90 sourcefile~mpi_fft_solver.f90->sourcefile~block.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~block.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~field_boundary_type.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~mpi_fft_solver.f90 sourcefile~mpi_block_rebaser.f90 mpi_block_rebaser.f90 sourcefile~mpi_fftw3_solver.f90->sourcefile~mpi_block_rebaser.f90 sourcefile~position_distribution.f90 position_distribution.f90 sourcefile~no_position_distribution.f90->sourcefile~position_distribution.f90 sourcefile~ohfield_factory.f90->sourcefile~ohfield.f90 sourcefile~ohhelp.f90->sourcefile~ohfield.f90 sourcefile~ohhelp.f90->sourcefile~ohparticles.f90 sourcefile~science_constants.f90 science_constants.f90 sourcefile~parameters.f90->sourcefile~science_constants.f90 sourcefile~toml_wrapper.f90 toml_wrapper.f90 sourcefile~parameters.f90->sourcefile~toml_wrapper.f90 sourcefile~particle_boundary.f90 particle_boundary.f90 sourcefile~particle_boundaries.f90->sourcefile~particle_boundary.f90 sourcefile~periodic_particle_boundary.f90 periodic_particle_boundary.f90 sourcefile~particle_boundaries.f90->sourcefile~periodic_particle_boundary.f90 sourcefile~particle_injector_manager.f90->sourcefile~no_position_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_manager.f90->sourcefile~parameters.f90 sourcefile~particle_injector_manager.f90->sourcefile~random_generator.f90 sourcefile~particle_injector_manager.f90->sourcefile~velocity_distribution.f90 sourcefile~no_particle_injector.f90 no_particle_injector.f90 sourcefile~particle_injector_manager.f90->sourcefile~no_particle_injector.f90 sourcefile~particle_injector.f90 particle_injector.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector.f90 sourcefile~particle_injector_with_distribution.f90 particle_injector_with_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~particle_injector_with_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~position_distribution.f90 sourcefile~position_random_uniform_distribution.f90 position_random_uniform_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~position_random_uniform_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~toml_wrapper.f90 sourcefile~velocity_maxwell_distribution.f90 velocity_maxwell_distribution.f90 sourcefile~particle_injector_manager.f90->sourcefile~velocity_maxwell_distribution.f90 sourcefile~particle_mover_factory.f90->sourcefile~particle_mover.f90 sourcefile~particle_mover_boris.f90 particle_mover_boris.f90 sourcefile~particle_mover_factory.f90->sourcefile~particle_mover_boris.f90 sourcefile~pcg_generator.f90->sourcefile~random_generator.f90 sourcefile~pcg64.f90 pcg64.f90 sourcefile~pcg_generator.f90->sourcefile~pcg64.f90 sourcefile~poisson_solver.f90->sourcefile~block.f90 sourcefile~poisson_solver.f90->sourcefile~field_boundary_type.f90 sourcefile~poisson_solver.f90->sourcefile~field_solver.f90 sourcefile~poisson_solver.f90->sourcefile~mpi_fft_solver.f90 sourcefile~poisson_solver.f90->sourcefile~ohfield.f90 sourcefile~poisson_solver.f90->sourcefile~ohhelp.f90 sourcefile~poisson_solver.f90->sourcefile~science_constants.f90 sourcefile~random_generator.f90->sourcefile~science_constants.f90 sourcefile~scatter.f90->sourcefile~ohfield.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block.f90 sourcefile~block_communicator.f90 block_communicator.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_communicator.f90 sourcefile~block_communicator_list.f90 block_communicator_list.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_communicator_list.f90 sourcefile~block_list.f90 block_list.f90 sourcefile~mpi_block_rebaser.f90->sourcefile~block_list.f90 sourcefile~no_particle_injector.f90->sourcefile~ohhelp.f90 sourcefile~no_particle_injector.f90->sourcefile~particle_injector.f90 sourcefile~particle_injector.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~ohhelp.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~random_generator.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~velocity_distribution.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~particle_injector.f90 sourcefile~particle_injector_with_distribution.f90->sourcefile~position_distribution.f90 sourcefile~particle_mover_boris.f90->sourcefile~particle_mover.f90 sourcefile~periodic_particle_boundary.f90->sourcefile~particle_boundary.f90 sourcefile~position_random_uniform_distribution.f90->sourcefile~random_generator.f90 sourcefile~position_random_uniform_distribution.f90->sourcefile~position_distribution.f90 sourcefile~velocity_maxwell_distribution.f90->sourcefile~velocity_distribution.f90 sourcefile~block_communicator.f90->sourcefile~block.f90 sourcefile~block_communicator_list.f90->sourcefile~block_communicator.f90 sourcefile~block_list.f90->sourcefile~block.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Contents Programs main Source Code main.f90 Source Code program main use mpi use ohhelppic3d implicit none character ( * ), parameter :: filename = 'example1.h5' call pic end program main","tags":"","loc":"sourcefile/main.f90.html"}]}